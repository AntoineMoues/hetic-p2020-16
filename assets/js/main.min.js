!function t(e,n,i){function r(o,a){if(!n[o]){if(!e[o]){var c="function"==typeof require&&require;if(!a&&c)return c(o,!0);if(s)return s(o,!0);var u=new Error("Cannot find module '"+o+"'");throw u.code="MODULE_NOT_FOUND",u}var h=n[o]={exports:{}};e[o][0].call(h.exports,function(t){var n=e[o][1][t];return r(n||t)},h,h.exports,t,e,n,i)}return n[o].exports}for(var s="function"==typeof require&&require,o=0;o<i.length;o++)r(i[o]);return r}({1:[function(t,e,n){!function(t,n,i,r){"use strict";function s(t,e,n){return setTimeout(h(t,n),e)}function o(t,e,n){return!!Array.isArray(t)&&(a(t,n[e],n),!0)}function a(t,e,n){var i;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==r)for(i=0;i<t.length;)e.call(n,t[i],i,t),i++;else for(i in t)t.hasOwnProperty(i)&&e.call(n,t[i],i,t)}function c(e,n,i){var r="DEPRECATED METHOD: "+n+"\n"+i+" AT \n";return function(){var n=new Error("get-stack-trace"),i=n&&n.stack?n.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",s=t.console&&(t.console.warn||t.console.log);return s&&s.call(t.console,r,i),e.apply(this,arguments)}}function u(t,e,n){var i,r=e.prototype;i=t.prototype=Object.create(r),i.constructor=t,i._super=r,n&&lt(i,n)}function h(t,e){return function(){return t.apply(e,arguments)}}function l(t,e){return typeof t==dt?t.apply(e?e[0]||r:r,e):t}function p(t,e){return t===r?e:t}function f(t,e,n){a(g(e),function(e){t.addEventListener(e,n,!1)})}function d(t,e,n){a(g(e),function(e){t.removeEventListener(e,n,!1)})}function v(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function m(t,e){return t.indexOf(e)>-1}function g(t){return t.trim().split(/\s+/g)}function y(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}function T(t){return Array.prototype.slice.call(t,0)}function E(t,e,n){for(var i=[],r=[],s=0;s<t.length;){var o=e?t[s][e]:t[s];y(r,o)<0&&i.push(t[s]),r[s]=o,s++}return n&&(i=e?i.sort(function(t,n){return t[e]>n[e]}):i.sort()),i}function _(t,e){for(var n,i,s=e[0].toUpperCase()+e.slice(1),o=0;o<pt.length;){if(n=pt[o],(i=n?n+s:e)in t)return i;o++}return r}function w(){return Et++}function x(e){var n=e.ownerDocument||e;return n.defaultView||n.parentWindow||t}function S(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){l(t.options.enable,[t])&&n.handler(e)},this.init()}function C(t){var e=t.options.inputClass;return new(e||(xt?$:St?k:wt?H:L))(t,b)}function b(t,e,n){var i=n.pointers.length,r=n.changedPointers.length,s=e&bt&&i-r==0,o=e&(It|Pt)&&i-r==0;n.isFirst=!!s,n.isFinal=!!o,s&&(t.session={}),n.eventType=e,A(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function A(t,e){var n=t.session,i=e.pointers,r=i.length;n.firstInput||(n.firstInput=D(e)),r>1&&!n.firstMultiple?n.firstMultiple=D(e):1===r&&(n.firstMultiple=!1);var s=n.firstInput,o=n.firstMultiple,a=o?o.center:s.center,c=e.center=F(i);e.timeStamp=gt(),e.deltaTime=e.timeStamp-s.timeStamp,e.angle=M(a,c),e.distance=R(a,c),I(n,e),e.offsetDirection=O(e.deltaX,e.deltaY);var u=q(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=u.x,e.overallVelocityY=u.y,e.overallVelocity=mt(u.x)>mt(u.y)?u.x:u.y,e.scale=o?z(o.pointers,i):1,e.rotation=o?N(o.pointers,i):0,e.maxPointers=n.prevInput?e.pointers.length>n.prevInput.maxPointers?e.pointers.length:n.prevInput.maxPointers:e.pointers.length,P(n,e);var h=t.element;v(e.srcEvent.target,h)&&(h=e.srcEvent.target),e.target=h}function I(t,e){var n=e.center,i=t.offsetDelta||{},r=t.prevDelta||{},s=t.prevInput||{};e.eventType!==bt&&s.eventType!==It||(r=t.prevDelta={x:s.deltaX||0,y:s.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=r.x+(n.x-i.x),e.deltaY=r.y+(n.y-i.y)}function P(t,e){var n,i,s,o,a=t.lastInterval||e,c=e.timeStamp-a.timeStamp;if(e.eventType!=Pt&&(c>Ct||a.velocity===r)){var u=e.deltaX-a.deltaX,h=e.deltaY-a.deltaY,l=q(c,u,h);i=l.x,s=l.y,n=mt(l.x)>mt(l.y)?l.x:l.y,o=O(u,h),t.lastInterval=e}else n=a.velocity,i=a.velocityX,s=a.velocityY,o=a.direction;e.velocity=n,e.velocityX=i,e.velocityY=s,e.direction=o}function D(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:vt(t.pointers[n].clientX),clientY:vt(t.pointers[n].clientY)},n++;return{timeStamp:gt(),pointers:e,center:F(e),deltaX:t.deltaX,deltaY:t.deltaY}}function F(t){var e=t.length;if(1===e)return{x:vt(t[0].clientX),y:vt(t[0].clientY)};for(var n=0,i=0,r=0;r<e;)n+=t[r].clientX,i+=t[r].clientY,r++;return{x:vt(n/e),y:vt(i/e)}}function q(t,e,n){return{x:e/t||0,y:n/t||0}}function O(t,e){return t===e?Dt:mt(t)>=mt(e)?t<0?Ft:qt:e<0?Ot:Rt}function R(t,e,n){n||(n=Lt);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return Math.sqrt(i*i+r*r)}function M(t,e,n){n||(n=Lt);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return 180*Math.atan2(r,i)/Math.PI}function N(t,e){return M(e[1],e[0],$t)+M(t[1],t[0],$t)}function z(t,e){return R(e[0],e[1],$t)/R(t[0],t[1],$t)}function L(){this.evEl=Yt,this.evWin=kt,this.pressed=!1,S.apply(this,arguments)}function $(){this.evEl=jt,this.evWin=Ut,S.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function X(){this.evTarget=Bt,this.evWin=Gt,this.started=!1,S.apply(this,arguments)}function Y(t,e){var n=T(t.touches),i=T(t.changedTouches);return e&(It|Pt)&&(n=E(n.concat(i),"identifier",!0)),[n,i]}function k(){this.evTarget=Jt,this.targetIds={},S.apply(this,arguments)}function W(t,e){var n=T(t.touches),i=this.targetIds;if(e&(bt|At)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,s,o=T(t.changedTouches),a=[],c=this.target;if(s=n.filter(function(t){return v(t.target,c)}),e===bt)for(r=0;r<s.length;)i[s[r].identifier]=!0,r++;for(r=0;r<o.length;)i[o[r].identifier]&&a.push(o[r]),e&(It|Pt)&&delete i[o[r].identifier],r++;return a.length?[E(s.concat(a),"identifier",!0),a]:void 0}function H(){S.apply(this,arguments);var t=h(this.handler,this);this.touch=new k(this.manager,t),this.mouse=new L(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function j(t,e){t&bt?(this.primaryTouch=e.changedPointers[0].identifier,U.call(this,e)):t&(It|Pt)&&U.call(this,e)}function U(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var n={x:e.clientX,y:e.clientY};this.lastTouches.push(n);var i=this.lastTouches,r=function(){var t=i.indexOf(n);t>-1&&i.splice(t,1)};setTimeout(r,Kt)}}function V(t){for(var e=t.srcEvent.clientX,n=t.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var r=this.lastTouches[i],s=Math.abs(e-r.x),o=Math.abs(n-r.y);if(s<=Qt&&o<=Qt)return!0}return!1}function B(t,e){this.manager=t,this.set(e)}function G(t){if(m(t,re))return re;var e=m(t,se),n=m(t,oe);return e&&n?re:e||n?e?se:oe:m(t,ie)?ie:ne}function Z(t){this.options=lt({},this.defaults,t||{}),this.id=w(),this.manager=null,this.options.enable=p(this.options.enable,!0),this.state=ce,this.simultaneous={},this.requireFail=[]}function J(t){return t&fe?"cancel":t&le?"end":t&he?"move":t&ue?"start":""}function K(t){return t==Rt?"down":t==Ot?"up":t==Ft?"left":t==qt?"right":""}function Q(t,e){var n=e.manager;return n?n.get(t):t}function tt(){Z.apply(this,arguments)}function et(){tt.apply(this,arguments),this.pX=null,this.pY=null}function nt(){tt.apply(this,arguments)}function it(){Z.apply(this,arguments),this._timer=null,this._input=null}function rt(){tt.apply(this,arguments)}function st(){tt.apply(this,arguments)}function ot(){Z.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function at(t,e){return e=e||{},e.recognizers=p(e.recognizers,at.defaults.preset),new ct(t,e)}function ct(t,e){this.options=lt({},at.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=C(this),this.touchAction=new B(this,this.options.touchAction),ut(this,!0),a(this.options.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function ut(t,e){var n=t.element;if(n.style){var i;a(t.options.cssProps,function(r,s){i=_(n.style,s),e?(t.oldCssProps[i]=n.style[i],n.style[i]=r):n.style[i]=t.oldCssProps[i]||""}),e||(t.oldCssProps={})}}function ht(t,e){var i=n.createEvent("Event");i.initEvent(t,!0,!0),i.gesture=e,e.target.dispatchEvent(i)}var lt,pt=["","webkit","Moz","MS","ms","o"],ft=n.createElement("div"),dt="function",vt=Math.round,mt=Math.abs,gt=Date.now;lt="function"!=typeof Object.assign?function(t){if(t===r||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(i!==r&&null!==i)for(var s in i)i.hasOwnProperty(s)&&(e[s]=i[s])}return e}:Object.assign;var yt=c(function(t,e,n){for(var i=Object.keys(e),s=0;s<i.length;)(!n||n&&t[i[s]]===r)&&(t[i[s]]=e[i[s]]),s++;return t},"extend","Use `assign`."),Tt=c(function(t,e){return yt(t,e,!0)},"merge","Use `assign`."),Et=1,_t=/mobile|tablet|ip(ad|hone|od)|android/i,wt="ontouchstart"in t,xt=_(t,"PointerEvent")!==r,St=wt&&_t.test(navigator.userAgent),Ct=25,bt=1,At=2,It=4,Pt=8,Dt=1,Ft=2,qt=4,Ot=8,Rt=16,Mt=Ft|qt,Nt=Ot|Rt,zt=Mt|Nt,Lt=["x","y"],$t=["clientX","clientY"];S.prototype={handler:function(){},init:function(){this.evEl&&f(this.element,this.evEl,this.domHandler),this.evTarget&&f(this.target,this.evTarget,this.domHandler),this.evWin&&f(x(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&d(this.element,this.evEl,this.domHandler),this.evTarget&&d(this.target,this.evTarget,this.domHandler),this.evWin&&d(x(this.element),this.evWin,this.domHandler)}};var Xt={mousedown:bt,mousemove:At,mouseup:It},Yt="mousedown",kt="mousemove mouseup";u(L,S,{handler:function(t){var e=Xt[t.type];e&bt&&0===t.button&&(this.pressed=!0),e&At&&1!==t.which&&(e=It),this.pressed&&(e&It&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:"mouse",srcEvent:t}))}});var Wt={pointerdown:bt,pointermove:At,pointerup:It,pointercancel:Pt,pointerout:Pt},Ht={2:"touch",3:"pen",4:"mouse",5:"kinect"},jt="pointerdown",Ut="pointermove pointerup pointercancel";t.MSPointerEvent&&!t.PointerEvent&&(jt="MSPointerDown",Ut="MSPointerMove MSPointerUp MSPointerCancel"),u($,S,{handler:function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),r=Wt[i],s=Ht[t.pointerType]||t.pointerType,o="touch"==s,a=y(e,t.pointerId,"pointerId");r&bt&&(0===t.button||o)?a<0&&(e.push(t),a=e.length-1):r&(It|Pt)&&(n=!0),a<0||(e[a]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:s,srcEvent:t}),n&&e.splice(a,1))}});var Vt={touchstart:bt,touchmove:At,touchend:It,touchcancel:Pt},Bt="touchstart",Gt="touchstart touchmove touchend touchcancel";u(X,S,{handler:function(t){var e=Vt[t.type];if(e===bt&&(this.started=!0),this.started){var n=Y.call(this,t,e);e&(It|Pt)&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:t})}}});var Zt={touchstart:bt,touchmove:At,touchend:It,touchcancel:Pt},Jt="touchstart touchmove touchend touchcancel";u(k,S,{handler:function(t){var e=Zt[t.type],n=W.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:t})}});var Kt=2500,Qt=25;u(H,S,{handler:function(t,e,n){var i="touch"==n.pointerType,r="mouse"==n.pointerType;if(!(r&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)j.call(this,e,n);else if(r&&V.call(this,n))return;this.callback(t,e,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var te=_(ft.style,"touchAction"),ee=te!==r,ne="auto",ie="manipulation",re="none",se="pan-x",oe="pan-y",ae=function(){if(!ee)return!1;var e={},n=t.CSS&&t.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(i){e[i]=!n||t.CSS.supports("touch-action",i)}),e}();B.prototype={set:function(t){"compute"==t&&(t=this.compute()),ee&&this.manager.element.style&&ae[t]&&(this.manager.element.style[te]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return a(this.manager.recognizers,function(e){l(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),G(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)return void e.preventDefault();var i=this.actions,r=m(i,re)&&!ae[re],s=m(i,oe)&&!ae[oe],o=m(i,se)&&!ae[se];if(r){var a=1===t.pointers.length,c=t.distance<2,u=t.deltaTime<250;if(a&&c&&u)return}return o&&s?void 0:r||s&&n&Mt||o&&n&Nt?this.preventSrc(e):void 0},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var ce=1,ue=2,he=4,le=8,pe=le,fe=16;Z.prototype={defaults:{},set:function(t){return lt(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(o(t,"recognizeWith",this))return this;var e=this.simultaneous;return t=Q(t,this),e[t.id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return o(t,"dropRecognizeWith",this)?this:(t=Q(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(o(t,"requireFailure",this))return this;var e=this.requireFail;return t=Q(t,this),-1===y(e,t)&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(o(t,"dropRequireFailure",this))return this;t=Q(t,this);var e=y(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){function e(e){n.manager.emit(e,t)}var n=this,i=this.state;i<le&&e(n.options.event+J(i)),e(n.options.event),t.additionalEvent&&e(t.additionalEvent),i>=le&&e(n.options.event+J(i))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=32},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(32|ce)))return!1;t++}return!0},recognize:function(t){var e=lt({},t);if(!l(this.options.enable,[this,e]))return this.reset(),void(this.state=32);this.state&(pe|fe|32)&&(this.state=ce),this.state=this.process(e),this.state&(ue|he|le|fe)&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},u(tt,Z,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,i=e&(ue|he),r=this.attrTest(t);return i&&(n&Pt||!r)?e|fe:i||r?n&It?e|le:e&ue?e|he:ue:32}}),u(et,tt,{defaults:{event:"pan",threshold:10,pointers:1,direction:zt},getTouchAction:function(){var t=this.options.direction,e=[];return t&Mt&&e.push(oe),t&Nt&&e.push(se),e},directionTest:function(t){var e=this.options,n=!0,i=t.distance,r=t.direction,s=t.deltaX,o=t.deltaY;return r&e.direction||(e.direction&Mt?(r=0===s?Dt:s<0?Ft:qt,n=s!=this.pX,i=Math.abs(t.deltaX)):(r=0===o?Dt:o<0?Ot:Rt,n=o!=this.pY,i=Math.abs(t.deltaY))),t.direction=r,n&&i>e.threshold&&r&e.direction},attrTest:function(t){return tt.prototype.attrTest.call(this,t)&&(this.state&ue||!(this.state&ue)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=K(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),u(nt,tt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[re]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&ue)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),u(it,Z,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[ne]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime>e.time;if(this._input=t,!i||!n||t.eventType&(It|Pt)&&!r)this.reset();else if(t.eventType&bt)this.reset(),this._timer=s(function(){this.state=pe,this.tryEmit()},e.time,this);else if(t.eventType&It)return pe;return 32},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===pe&&(t&&t.eventType&It?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=gt(),this.manager.emit(this.options.event,this._input)))}}),u(rt,tt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[re]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&ue)}}),u(st,tt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Mt|Nt,pointers:1},getTouchAction:function(){return et.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&(Mt|Nt)?e=t.overallVelocity:n&Mt?e=t.overallVelocityX:n&Nt&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&n&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&mt(e)>this.options.velocity&&t.eventType&It},emit:function(t){var e=K(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),u(ot,Z,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[ie]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime<e.time;if(this.reset(),t.eventType&bt&&0===this.count)return this.failTimeout();if(i&&r&&n){if(t.eventType!=It)return this.failTimeout();var o=!this.pTime||t.timeStamp-this.pTime<e.interval,a=!this.pCenter||R(this.pCenter,t.center)<e.posThreshold;this.pTime=t.timeStamp,this.pCenter=t.center,a&&o?this.count+=1:this.count=1,this._input=t;if(0===this.count%e.taps)return this.hasRequireFailures()?(this._timer=s(function(){this.state=pe,this.tryEmit()},e.interval,this),ue):pe}return 32},failTimeout:function(){return this._timer=s(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==pe&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),at.VERSION="2.0.7",at.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[rt,{enable:!1}],[nt,{enable:!1},["rotate"]],[st,{direction:Mt}],[et,{direction:Mt},["swipe"]],[ot],[ot,{event:"doubletap",taps:2},["tap"]],[it]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};ct.prototype={set:function(t){return lt(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){this.touchAction.preventDefaults(t);var n,i=this.recognizers,r=e.curRecognizer;(!r||r&&r.state&pe)&&(r=e.curRecognizer=null);for(var s=0;s<i.length;)n=i[s],2===e.stopped||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(t),!r&&n.state&(ue|he|le)&&(r=e.curRecognizer=n),s++}},get:function(t){if(t instanceof Z)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(o(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(o(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,n=y(e,t);-1!==n&&(e.splice(n,1),this.touchAction.update())}return this},on:function(t,e){if(t!==r&&e!==r){var n=this.handlers;return a(g(t),function(t){n[t]=n[t]||[],n[t].push(e)}),this}},off:function(t,e){if(t!==r){var n=this.handlers;return a(g(t),function(t){e?n[t]&&n[t].splice(y(n[t],e),1):delete n[t]}),this}},emit:function(t,e){this.options.domEvents&&ht(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},destroy:function(){this.element&&ut(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},lt(at,{INPUT_START:bt,INPUT_MOVE:At,INPUT_END:It,INPUT_CANCEL:Pt,STATE_POSSIBLE:ce,STATE_BEGAN:ue,STATE_CHANGED:he,STATE_ENDED:le,STATE_RECOGNIZED:pe,STATE_CANCELLED:fe,STATE_FAILED:32,DIRECTION_NONE:Dt,DIRECTION_LEFT:Ft,DIRECTION_RIGHT:qt,DIRECTION_UP:Ot,DIRECTION_DOWN:Rt,DIRECTION_HORIZONTAL:Mt,DIRECTION_VERTICAL:Nt,DIRECTION_ALL:zt,Manager:ct,Input:S,TouchAction:B,TouchInput:k,MouseInput:L,PointerEventInput:$,TouchMouseInput:H,SingleTouchInput:X,Recognizer:Z,AttrRecognizer:tt,Tap:ot,Pan:et,Swipe:st,Pinch:nt,Rotate:rt,Press:it,on:f,off:d,each:a,merge:Tt,extend:yt,assign:lt,inherit:u,bindFn:h,prefixed:_}),(void 0!==t?t:"undefined"!=typeof self?self:{}).Hammer=at,"function"==typeof define&&define.amd?define(function(){return at}):void 0!==e&&e.exports?e.exports=at:t.Hammer=at}(window,document)},{}],2:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=function t(e){i(this,t),window.addEventListener("scroll",function(){e.$container.getBoundingClientRect().y<70&&e.$container.getBoundingClientRect().y>-e.$container.getBoundingClientRect().height?e.$animate.forEach(function(t){t.classList.add(e.animation)}):e.$animate.forEach(function(t){t.classList.remove(e.animation)})})};e.exports=r},{}],3:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),s=t("hammerjs"),o=function(){function t(e){var n=this;i(this,t),this.index=0,this.$controls=document.querySelectorAll(".colors__controls"),this.$images=document.querySelectorAll(".colors__imageContainer"),this.$image=document.querySelector(".colors__images"),this.$diamond=document.querySelector(".colors__diamond"),this.$diamondText=document.querySelector(".colors__number"),this.$texts=document.querySelectorAll(".colors__textContainer"),this.quantity=this.$images.length,this.swiped=!1,this.colors=["#FFFFFF","#56FFA7","#56F0FF","#FF7029","#FFD500"],this.swipes=new s(this.$image),this.swipes.on("panleft",function(t){n.index+1<=n.quantity-1&&0==n.swiped&&(n.index++,n.changeSlide())}),this.swipes.on("panright",function(t){n.index-1>=0&&0==n.swiped&&(n.index--,n.changeSlide())}),this.changeSlide(),this.$controls.forEach(function(t,e){t.addEventListener("click",function(){n.index=e,n.changeSlide()})})}return r(t,[{key:"changeSlide",value:function(){var t=this;this.swiped=!0,document.querySelector(".colors__controls--active").classList.remove("colors__controls--active"),this.$controls[this.index].classList.add("colors__controls--active"),document.querySelector(".colors__imageContainer--active").classList.remove("colors__imageContainer--active"),this.$images[this.index].classList.add("colors__imageContainer--active"),this.$diamondText.innerHTML=this.index+1,document.querySelector(".colors__textContainer--active").classList.remove("colors__textContainer--active"),this.$texts[this.index].classList.add("colors__textContainer--active"),this.$diamond.style.borderColor=this.colors[this.index],window.setTimeout(function(){t.swiped=!1},1500)}}]),t}();e.exports=o},{hammerjs:1}],4:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),s=function(){function t(e){var n=this;i(this,t),this.params=e,this.$elements=new Object,this.refreshProperties(),this.init(),window.setInterval(function(){n.init()},500)}return r(t,[{key:"init",value:function(){this.refreshProperties(),window.addEventListener("scroll",this.check())}},{key:"refreshProperties",value:function(){this.$elements.hidden=document.querySelectorAll("."+this.params.hidden),this.height=window.innerHeight}},{key:"check",value:function(){var t=this;this.$elements.hidden.forEach(function(e){e.getBoundingClientRect().top-t.height<=0&&(e.className=e.className.replace(t.params.hidden,t.params.appeared))})}}]),t}();e.exports=s},{}],5:[function(t,e,n){"use strict";var i=t("./components/scrollappearing"),r=t("./components/appear"),s=t("./components/carousel");new i({hidden:"hidden",appeared:"appeared"}),new r({$container:document.querySelector(".box"),$animate:document.querySelectorAll(".background__circle"),animation:"opacity"}),new s({$container:document.querySelector(".colors")})},{"./components/appear":2,"./components/carousel":3,"./components/scrollappearing":4}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwid2luZG93IiwiZG9jdW1lbnQiLCJleHBvcnROYW1lIiwidW5kZWZpbmVkIiwic2V0VGltZW91dENvbnRleHQiLCJmbiIsInRpbWVvdXQiLCJjb250ZXh0Iiwic2V0VGltZW91dCIsImJpbmRGbiIsImludm9rZUFycmF5QXJnIiwiYXJnIiwiQXJyYXkiLCJpc0FycmF5IiwiZWFjaCIsIm9iaiIsIml0ZXJhdG9yIiwiZm9yRWFjaCIsImhhc093blByb3BlcnR5IiwiZGVwcmVjYXRlIiwibWV0aG9kIiwibmFtZSIsIm1lc3NhZ2UiLCJkZXByZWNhdGlvbk1lc3NhZ2UiLCJzdGFjayIsInJlcGxhY2UiLCJsb2ciLCJjb25zb2xlIiwid2FybiIsImFwcGx5IiwidGhpcyIsImFyZ3VtZW50cyIsImluaGVyaXQiLCJjaGlsZCIsImJhc2UiLCJwcm9wZXJ0aWVzIiwiY2hpbGRQIiwiYmFzZVAiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl9zdXBlciIsImFzc2lnbiIsImJvb2xPckZuIiwidmFsIiwiYXJncyIsIlRZUEVfRlVOQ1RJT04iLCJpZlVuZGVmaW5lZCIsInZhbDEiLCJ2YWwyIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJ0YXJnZXQiLCJ0eXBlcyIsImhhbmRsZXIiLCJzcGxpdFN0ciIsInR5cGUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFzUGFyZW50Iiwibm9kZSIsInBhcmVudCIsInBhcmVudE5vZGUiLCJpblN0ciIsInN0ciIsImZpbmQiLCJpbmRleE9mIiwidHJpbSIsInNwbGl0IiwiaW5BcnJheSIsInNyYyIsImZpbmRCeUtleSIsInRvQXJyYXkiLCJzbGljZSIsInVuaXF1ZUFycmF5Iiwia2V5Iiwic29ydCIsInJlc3VsdHMiLCJ2YWx1ZXMiLCJwdXNoIiwiYiIsInByZWZpeGVkIiwicHJvcGVydHkiLCJwcmVmaXgiLCJwcm9wIiwiY2FtZWxQcm9wIiwidG9VcHBlckNhc2UiLCJWRU5ET1JfUFJFRklYRVMiLCJ1bmlxdWVJZCIsIl91bmlxdWVJZCIsImdldFdpbmRvd0ZvckVsZW1lbnQiLCJlbGVtZW50IiwiZG9jIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiSW5wdXQiLCJtYW5hZ2VyIiwiY2FsbGJhY2siLCJzZWxmIiwib3B0aW9ucyIsImlucHV0VGFyZ2V0IiwiZG9tSGFuZGxlciIsImV2IiwiZW5hYmxlIiwiaW5pdCIsImNyZWF0ZUlucHV0SW5zdGFuY2UiLCJpbnB1dENsYXNzIiwiU1VQUE9SVF9QT0lOVEVSX0VWRU5UUyIsIlBvaW50ZXJFdmVudElucHV0IiwiU1VQUE9SVF9PTkxZX1RPVUNIIiwiVG91Y2hJbnB1dCIsIlNVUFBPUlRfVE9VQ0giLCJUb3VjaE1vdXNlSW5wdXQiLCJNb3VzZUlucHV0IiwiaW5wdXRIYW5kbGVyIiwiZXZlbnRUeXBlIiwiaW5wdXQiLCJwb2ludGVyc0xlbiIsInBvaW50ZXJzIiwiY2hhbmdlZFBvaW50ZXJzTGVuIiwiY2hhbmdlZFBvaW50ZXJzIiwiaXNGaXJzdCIsIklOUFVUX1NUQVJUIiwiaXNGaW5hbCIsIklOUFVUX0VORCIsIklOUFVUX0NBTkNFTCIsInNlc3Npb24iLCJjb21wdXRlSW5wdXREYXRhIiwiZW1pdCIsInJlY29nbml6ZSIsInByZXZJbnB1dCIsInBvaW50ZXJzTGVuZ3RoIiwiZmlyc3RJbnB1dCIsInNpbXBsZUNsb25lSW5wdXREYXRhIiwiZmlyc3RNdWx0aXBsZSIsIm9mZnNldENlbnRlciIsImNlbnRlciIsImdldENlbnRlciIsInRpbWVTdGFtcCIsIm5vdyIsImRlbHRhVGltZSIsImFuZ2xlIiwiZ2V0QW5nbGUiLCJkaXN0YW5jZSIsImdldERpc3RhbmNlIiwiY29tcHV0ZURlbHRhWFkiLCJvZmZzZXREaXJlY3Rpb24iLCJnZXREaXJlY3Rpb24iLCJkZWx0YVgiLCJkZWx0YVkiLCJvdmVyYWxsVmVsb2NpdHkiLCJnZXRWZWxvY2l0eSIsIm92ZXJhbGxWZWxvY2l0eVgiLCJ4Iiwib3ZlcmFsbFZlbG9jaXR5WSIsInkiLCJhYnMiLCJzY2FsZSIsImdldFNjYWxlIiwicm90YXRpb24iLCJnZXRSb3RhdGlvbiIsIm1heFBvaW50ZXJzIiwiY29tcHV0ZUludGVydmFsSW5wdXREYXRhIiwic3JjRXZlbnQiLCJvZmZzZXQiLCJvZmZzZXREZWx0YSIsInByZXZEZWx0YSIsInZlbG9jaXR5IiwidmVsb2NpdHlYIiwidmVsb2NpdHlZIiwiZGlyZWN0aW9uIiwibGFzdCIsImxhc3RJbnRlcnZhbCIsIkNPTVBVVEVfSU5URVJWQUwiLCJ2IiwiY2xpZW50WCIsInJvdW5kIiwiY2xpZW50WSIsIkRJUkVDVElPTl9OT05FIiwiRElSRUNUSU9OX0xFRlQiLCJESVJFQ1RJT05fUklHSFQiLCJESVJFQ1RJT05fVVAiLCJESVJFQ1RJT05fRE9XTiIsInAxIiwicDIiLCJwcm9wcyIsIlBST1BTX1hZIiwiTWF0aCIsInNxcnQiLCJhdGFuMiIsIlBJIiwic3RhcnQiLCJlbmQiLCJQUk9QU19DTElFTlRfWFkiLCJldkVsIiwiTU9VU0VfRUxFTUVOVF9FVkVOVFMiLCJldldpbiIsIk1PVVNFX1dJTkRPV19FVkVOVFMiLCJwcmVzc2VkIiwiUE9JTlRFUl9FTEVNRU5UX0VWRU5UUyIsIlBPSU5URVJfV0lORE9XX0VWRU5UUyIsInN0b3JlIiwicG9pbnRlckV2ZW50cyIsIlNpbmdsZVRvdWNoSW5wdXQiLCJldlRhcmdldCIsIlNJTkdMRV9UT1VDSF9UQVJHRVRfRVZFTlRTIiwiU0lOR0xFX1RPVUNIX1dJTkRPV19FVkVOVFMiLCJzdGFydGVkIiwibm9ybWFsaXplU2luZ2xlVG91Y2hlcyIsImFsbCIsInRvdWNoZXMiLCJjaGFuZ2VkIiwiY2hhbmdlZFRvdWNoZXMiLCJjb25jYXQiLCJUT1VDSF9UQVJHRVRfRVZFTlRTIiwidGFyZ2V0SWRzIiwiZ2V0VG91Y2hlcyIsImFsbFRvdWNoZXMiLCJJTlBVVF9NT1ZFIiwiaWRlbnRpZmllciIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVGFyZ2V0VG91Y2hlcyIsImZpbHRlciIsInRvdWNoIiwibW91c2UiLCJwcmltYXJ5VG91Y2giLCJsYXN0VG91Y2hlcyIsInJlY29yZFRvdWNoZXMiLCJldmVudERhdGEiLCJzZXRMYXN0VG91Y2giLCJsYXN0VG91Y2giLCJsdHMiLCJyZW1vdmVMYXN0VG91Y2giLCJzcGxpY2UiLCJERURVUF9USU1FT1VUIiwiaXNTeW50aGV0aWNFdmVudCIsImR4IiwiZHkiLCJERURVUF9ESVNUQU5DRSIsIlRvdWNoQWN0aW9uIiwidmFsdWUiLCJzZXQiLCJjbGVhblRvdWNoQWN0aW9ucyIsImFjdGlvbnMiLCJUT1VDSF9BQ1RJT05fTk9ORSIsImhhc1BhblgiLCJUT1VDSF9BQ1RJT05fUEFOX1giLCJoYXNQYW5ZIiwiVE9VQ0hfQUNUSU9OX1BBTl9ZIiwiVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTiIsIlRPVUNIX0FDVElPTl9BVVRPIiwiUmVjb2duaXplciIsImRlZmF1bHRzIiwiaWQiLCJzdGF0ZSIsIlNUQVRFX1BPU1NJQkxFIiwic2ltdWx0YW5lb3VzIiwicmVxdWlyZUZhaWwiLCJzdGF0ZVN0ciIsIlNUQVRFX0NBTkNFTExFRCIsIlNUQVRFX0VOREVEIiwiU1RBVEVfQ0hBTkdFRCIsIlNUQVRFX0JFR0FOIiwiZGlyZWN0aW9uU3RyIiwiZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlciIsIm90aGVyUmVjb2duaXplciIsInJlY29nbml6ZXIiLCJnZXQiLCJBdHRyUmVjb2duaXplciIsIlBhblJlY29nbml6ZXIiLCJwWCIsInBZIiwiUGluY2hSZWNvZ25pemVyIiwiUHJlc3NSZWNvZ25pemVyIiwiX3RpbWVyIiwiX2lucHV0IiwiUm90YXRlUmVjb2duaXplciIsIlN3aXBlUmVjb2duaXplciIsIlRhcFJlY29nbml6ZXIiLCJwVGltZSIsInBDZW50ZXIiLCJjb3VudCIsIkhhbW1lciIsInJlY29nbml6ZXJzIiwicHJlc2V0IiwiTWFuYWdlciIsImhhbmRsZXJzIiwib2xkQ3NzUHJvcHMiLCJ0b3VjaEFjdGlvbiIsInRvZ2dsZUNzc1Byb3BzIiwiaXRlbSIsImFkZCIsInJlY29nbml6ZVdpdGgiLCJyZXF1aXJlRmFpbHVyZSIsInN0eWxlIiwiY3NzUHJvcHMiLCJ0cmlnZ2VyRG9tRXZlbnQiLCJldmVudCIsImRhdGEiLCJnZXN0dXJlRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImdlc3R1cmUiLCJkaXNwYXRjaEV2ZW50IiwiVEVTVF9FTEVNRU5UIiwiY3JlYXRlRWxlbWVudCIsIkRhdGUiLCJUeXBlRXJyb3IiLCJvdXRwdXQiLCJpbmRleCIsInNvdXJjZSIsIm5leHRLZXkiLCJleHRlbmQiLCJkZXN0IiwibWVyZ2UiLCJrZXlzIiwiTU9CSUxFX1JFR0VYIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIkRJUkVDVElPTl9IT1JJWk9OVEFMIiwiRElSRUNUSU9OX1ZFUlRJQ0FMIiwiRElSRUNUSU9OX0FMTCIsImRlc3Ryb3kiLCJNT1VTRV9JTlBVVF9NQVAiLCJtb3VzZWRvd24iLCJtb3VzZW1vdmUiLCJtb3VzZXVwIiwiYnV0dG9uIiwid2hpY2giLCJwb2ludGVyVHlwZSIsIlBPSU5URVJfSU5QVVRfTUFQIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJjYW5jZWwiLCJwb2ludGVyb3V0IiwiSUUxMF9QT0lOVEVSX1RZUEVfRU5VTSIsIjIiLCIzIiwiNCIsIjUiLCJNU1BvaW50ZXJFdmVudCIsIlBvaW50ZXJFdmVudCIsInJlbW92ZVBvaW50ZXIiLCJldmVudFR5cGVOb3JtYWxpemVkIiwidG9Mb3dlckNhc2UiLCJpc1RvdWNoIiwic3RvcmVJbmRleCIsInBvaW50ZXJJZCIsIlNJTkdMRV9UT1VDSF9JTlBVVF9NQVAiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJ0b3VjaGNhbmNlbCIsIlRPVUNIX0lOUFVUX01BUCIsImlucHV0RXZlbnQiLCJpbnB1dERhdGEiLCJpc01vdXNlIiwic291cmNlQ2FwYWJpbGl0aWVzIiwiZmlyZXNUb3VjaEV2ZW50cyIsIlBSRUZJWEVEX1RPVUNIX0FDVElPTiIsIk5BVElWRV9UT1VDSF9BQ1RJT04iLCJUT1VDSF9BQ1RJT05fTUFQIiwidG91Y2hNYXAiLCJjc3NTdXBwb3J0cyIsIkNTUyIsInN1cHBvcnRzIiwiY29tcHV0ZSIsInVwZGF0ZSIsImdldFRvdWNoQWN0aW9uIiwiam9pbiIsInByZXZlbnREZWZhdWx0cyIsInByZXZlbnRlZCIsInByZXZlbnREZWZhdWx0IiwiaGFzTm9uZSIsImlzVGFwUG9pbnRlciIsImlzVGFwTW92ZW1lbnQiLCJpc1RhcFRvdWNoVGltZSIsInByZXZlbnRTcmMiLCJTVEFURV9SRUNPR05JWkVEIiwiZHJvcFJlY29nbml6ZVdpdGgiLCJkcm9wUmVxdWlyZUZhaWx1cmUiLCJoYXNSZXF1aXJlRmFpbHVyZXMiLCJjYW5SZWNvZ25pemVXaXRoIiwiYWRkaXRpb25hbEV2ZW50IiwidHJ5RW1pdCIsImNhbkVtaXQiLCJpbnB1dERhdGFDbG9uZSIsInJlc2V0IiwicHJvY2VzcyIsImF0dHJUZXN0Iiwib3B0aW9uUG9pbnRlcnMiLCJpc1JlY29nbml6ZWQiLCJpc1ZhbGlkIiwidGhyZXNob2xkIiwiZGlyZWN0aW9uVGVzdCIsImhhc01vdmVkIiwiaW5PdXQiLCJ0aW1lIiwidmFsaWRQb2ludGVycyIsInZhbGlkTW92ZW1lbnQiLCJ2YWxpZFRpbWUiLCJjbGVhclRpbWVvdXQiLCJ0YXBzIiwiaW50ZXJ2YWwiLCJwb3NUaHJlc2hvbGQiLCJ2YWxpZFRvdWNoVGltZSIsImZhaWxUaW1lb3V0IiwidmFsaWRJbnRlcnZhbCIsInZhbGlkTXVsdGlUYXAiLCJ0YXBDb3VudCIsIlZFUlNJT04iLCJkb21FdmVudHMiLCJ1c2VyU2VsZWN0IiwidG91Y2hTZWxlY3QiLCJ0b3VjaENhbGxvdXQiLCJjb250ZW50Wm9vbWluZyIsInVzZXJEcmFnIiwidGFwSGlnaGxpZ2h0Q29sb3IiLCJzdG9wIiwiZm9yY2UiLCJzdG9wcGVkIiwiY3VyUmVjb2duaXplciIsImV4aXN0aW5nIiwicmVtb3ZlIiwib24iLCJldmVudHMiLCJvZmYiLCJTVEFURV9GQUlMRUQiLCJUYXAiLCJQYW4iLCJTd2lwZSIsIlBpbmNoIiwiUm90YXRlIiwiUHJlc3MiLCJkZWZpbmUiLCJhbWQiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiQXBwZWFyIiwicGFyYW1zIiwiJGNvbnRhaW5lciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImhlaWdodCIsIiRhbmltYXRlIiwiY2xhc3NMaXN0IiwiYW5pbWF0aW9uIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIkNhcm91c2VsIiwiX3RoaXMiLCIkY29udHJvbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiJGltYWdlcyIsIiRpbWFnZSIsInF1ZXJ5U2VsZWN0b3IiLCIkZGlhbW9uZCIsIiRkaWFtb25kVGV4dCIsIiR0ZXh0cyIsInF1YW50aXR5Iiwic3dpcGVkIiwiY29sb3JzIiwic3dpcGVzIiwiY2hhbmdlU2xpZGUiLCJfdGhpczIiLCJpbm5lckhUTUwiLCJib3JkZXJDb2xvciIsImhhbW1lcmpzIiwiU2Nyb2xsQXBwZWFyaW5nIiwiJGVsZW1lbnRzIiwicmVmcmVzaFByb3BlcnRpZXMiLCJzZXRJbnRlcnZhbCIsImNoZWNrIiwiaGlkZGVuIiwiaW5uZXJIZWlnaHQiLCJ0b3AiLCJjbGFzc05hbWUiLCJhcHBlYXJlZCIsIi4vY29tcG9uZW50cy9hcHBlYXIiLCIuL2NvbXBvbmVudHMvY2Fyb3VzZWwiLCIuL2NvbXBv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IjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qISBIYW1tZXIuSlMgLSB2Mi4wLjcgLSAyMDE2LTA0LTIyXG4gKiBodHRwOi8vaGFtbWVyanMuZ2l0aHViLmlvL1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNiBKb3JpayBUYW5nZWxkZXI7XG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKi9cbihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCBleHBvcnROYW1lLCB1bmRlZmluZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVORE9SX1BSRUZJWEVTID0gWycnLCAnd2Via2l0JywgJ01veicsICdNUycsICdtcycsICdvJ107XG52YXIgVEVTVF9FTEVNRU5UID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbnZhciBUWVBFX0ZVTkNUSU9OID0gJ2Z1bmN0aW9uJztcblxudmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBub3cgPSBEYXRlLm5vdztcblxuLyoqXG4gKiBzZXQgYSB0aW1lb3V0IHdpdGggYSBnaXZlbiBzY29wZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0XG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gc2V0VGltZW91dENvbnRleHQoZm4sIHRpbWVvdXQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChiaW5kRm4oZm4sIGNvbnRleHQpLCB0aW1lb3V0KTtcbn1cblxuLyoqXG4gKiBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXksIHdlIHdhbnQgdG8gZXhlY3V0ZSB0aGUgZm4gb24gZWFjaCBlbnRyeVxuICogaWYgaXQgYWludCBhbiBhcnJheSB3ZSBkb24ndCB3YW50IHRvIGRvIGEgdGhpbmcuXG4gKiB0aGlzIGlzIHVzZWQgYnkgYWxsIHRoZSBtZXRob2RzIHRoYXQgYWNjZXB0IGEgc2luZ2xlIGFuZCBhcnJheSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7KnxBcnJheX0gYXJnXG4gKiBAcGFyYW0ge1N0cmluZ30gZm5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dF1cbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpbnZva2VBcnJheUFyZyhhcmcsIGZuLCBjb250ZXh0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICBlYWNoKGFyZywgY29udGV4dFtmbl0sIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIHdhbGsgb2JqZWN0cyBhbmQgYXJyYXlzXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRvclxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAqL1xuZnVuY3Rpb24gZWFjaChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAoIW9iaikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9iai5mb3JFYWNoKSB7XG4gICAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBvYmoubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShpKSAmJiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiB3cmFwIGEgbWV0aG9kIHdpdGggYSBkZXByZWNhdGlvbiB3YXJuaW5nIGFuZCBzdGFjayB0cmFjZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBuZXcgZnVuY3Rpb24gd3JhcHBpbmcgdGhlIHN1cHBsaWVkIG1ldGhvZC5cbiAqL1xuZnVuY3Rpb24gZGVwcmVjYXRlKG1ldGhvZCwgbmFtZSwgbWVzc2FnZSkge1xuICAgIHZhciBkZXByZWNhdGlvbk1lc3NhZ2UgPSAnREVQUkVDQVRFRCBNRVRIT0Q6ICcgKyBuYW1lICsgJ1xcbicgKyBtZXNzYWdlICsgJyBBVCBcXG4nO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoJ2dldC1zdGFjay10cmFjZScpO1xuICAgICAgICB2YXIgc3RhY2sgPSBlICYmIGUuc3RhY2sgPyBlLnN0YWNrLnJlcGxhY2UoL15bXlxcKF0rP1tcXG4kXS9nbSwgJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXlxccythdFxccysvZ20sICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL15PYmplY3QuPGFub255bW91cz5cXHMqXFwoL2dtLCAne2Fub255bW91c30oKUAnKSA6ICdVbmtub3duIFN0YWNrIFRyYWNlJztcblxuICAgICAgICB2YXIgbG9nID0gd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLndhcm4gfHwgd2luZG93LmNvbnNvbGUubG9nKTtcbiAgICAgICAgaWYgKGxvZykge1xuICAgICAgICAgICAgbG9nLmNhbGwod2luZG93LmNvbnNvbGUsIGRlcHJlY2F0aW9uTWVzc2FnZSwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG4vKipcbiAqIGV4dGVuZCBvYmplY3QuXG4gKiBtZWFucyB0aGF0IHByb3BlcnRpZXMgaW4gZGVzdCB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHRoZSBvbmVzIGluIHNyYy5cbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBvYmplY3RzX3RvX2Fzc2lnblxuICogQHJldHVybnMge09iamVjdH0gdGFyZ2V0XG4gKi9cbnZhciBhc3NpZ247XG5pZiAodHlwZW9mIE9iamVjdC5hc3NpZ24gIT09ICdmdW5jdGlvbicpIHtcbiAgICBhc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0KSB7XG4gICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG91dHB1dCA9IE9iamVjdCh0YXJnZXQpO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgICAgICBpZiAoc291cmNlICE9PSB1bmRlZmluZWQgJiYgc291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbmV4dEtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShuZXh0S2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W25leHRLZXldID0gc291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbn0gZWxzZSB7XG4gICAgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcbn1cblxuLyoqXG4gKiBleHRlbmQgb2JqZWN0LlxuICogbWVhbnMgdGhhdCBwcm9wZXJ0aWVzIGluIGRlc3Qgd2lsbCBiZSBvdmVyd3JpdHRlbiBieSB0aGUgb25lcyBpbiBzcmMuXG4gKiBAcGFyYW0ge09iamVjdH0gZGVzdFxuICogQHBhcmFtIHtPYmplY3R9IHNyY1xuICogQHBhcmFtIHtCb29sZWFufSBbbWVyZ2U9ZmFsc2VdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBkZXN0XG4gKi9cbnZhciBleHRlbmQgPSBkZXByZWNhdGUoZnVuY3Rpb24gZXh0ZW5kKGRlc3QsIHNyYywgbWVyZ2UpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNyYyk7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwga2V5cy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKCFtZXJnZSB8fCAobWVyZ2UgJiYgZGVzdFtrZXlzW2ldXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgZGVzdFtrZXlzW2ldXSA9IHNyY1trZXlzW2ldXTtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBkZXN0O1xufSwgJ2V4dGVuZCcsICdVc2UgYGFzc2lnbmAuJyk7XG5cbi8qKlxuICogbWVyZ2UgdGhlIHZhbHVlcyBmcm9tIHNyYyBpbiB0aGUgZGVzdC5cbiAqIG1lYW5zIHRoYXQgcHJvcGVydGllcyB0aGF0IGV4aXN0IGluIGRlc3Qgd2lsbCBub3QgYmUgb3ZlcndyaXR0ZW4gYnkgc3JjXG4gKiBAcGFyYW0ge09iamVjdH0gZGVzdFxuICogQHBhcmFtIHtPYmplY3R9IHNyY1xuICogQHJldHVybnMge09iamVjdH0gZGVzdFxuICovXG52YXIgbWVyZ2UgPSBkZXByZWNhdGUoZnVuY3Rpb24gbWVyZ2UoZGVzdCwgc3JjKSB7XG4gICAgcmV0dXJuIGV4dGVuZChkZXN0LCBzcmMsIHRydWUpO1xufSwgJ21lcmdlJywgJ1VzZSBgYXNzaWduYC4nKTtcblxuLyoqXG4gKiBzaW1wbGUgY2xhc3MgaW5oZXJpdGFuY2VcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNoaWxkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBiYXNlXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdXG4gKi9cbmZ1bmN0aW9uIGluaGVyaXQoY2hpbGQsIGJhc2UsIHByb3BlcnRpZXMpIHtcbiAgICB2YXIgYmFzZVAgPSBiYXNlLnByb3RvdHlwZSxcbiAgICAgICAgY2hpbGRQO1xuXG4gICAgY2hpbGRQID0gY2hpbGQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShiYXNlUCk7XG4gICAgY2hpbGRQLmNvbnN0cnVjdG9yID0gY2hpbGQ7XG4gICAgY2hpbGRQLl9zdXBlciA9IGJhc2VQO1xuXG4gICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgICAgYXNzaWduKGNoaWxkUCwgcHJvcGVydGllcyk7XG4gICAgfVxufVxuXG4vKipcbiAqIHNpbXBsZSBmdW5jdGlvbiBiaW5kXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gYmluZEZuKGZuLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJvdW5kRm4oKSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbi8qKlxuICogbGV0IGEgYm9vbGVhbiB2YWx1ZSBhbHNvIGJlIGEgZnVuY3Rpb24gdGhhdCBtdXN0IHJldHVybiBhIGJvb2xlYW5cbiAqIHRoaXMgZmlyc3QgaXRlbSBpbiBhcmdzIHdpbGwgYmUgdXNlZCBhcyB0aGUgY29udGV4dFxuICogQHBhcmFtIHtCb29sZWFufEZ1bmN0aW9ufSB2YWxcbiAqIEBwYXJhbSB7QXJyYXl9IFthcmdzXVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGJvb2xPckZuKHZhbCwgYXJncykge1xuICAgIGlmICh0eXBlb2YgdmFsID09IFRZUEVfRlVOQ1RJT04pIHtcbiAgICAgICAgcmV0dXJuIHZhbC5hcHBseShhcmdzID8gYXJnc1swXSB8fCB1bmRlZmluZWQgOiB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xufVxuXG4vKipcbiAqIHVzZSB0aGUgdmFsMiB3aGVuIHZhbDEgaXMgdW5kZWZpbmVkXG4gKiBAcGFyYW0geyp9IHZhbDFcbiAqIEBwYXJhbSB7Kn0gdmFsMlxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGlmVW5kZWZpbmVkKHZhbDEsIHZhbDIpIHtcbiAgICByZXR1cm4gKHZhbDEgPT09IHVuZGVmaW5lZCkgPyB2YWwyIDogdmFsMTtcbn1cblxuLyoqXG4gKiBhZGRFdmVudExpc3RlbmVyIHdpdGggbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2VcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IHRhcmdldFxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gKi9cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzKHRhcmdldCwgdHlwZXMsIGhhbmRsZXIpIHtcbiAgICBlYWNoKHNwbGl0U3RyKHR5cGVzKSwgZnVuY3Rpb24odHlwZSkge1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcmVtb3ZlRXZlbnRMaXN0ZW5lciB3aXRoIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSB0YXJnZXRcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyh0YXJnZXQsIHR5cGVzLCBoYW5kbGVyKSB7XG4gICAgZWFjaChzcGxpdFN0cih0eXBlcyksIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIGZpbmQgaWYgYSBub2RlIGlzIGluIHRoZSBnaXZlbiBwYXJlbnRcbiAqIEBtZXRob2QgaGFzUGFyZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGhhc1BhcmVudChub2RlLCBwYXJlbnQpIHtcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICBpZiAobm9kZSA9PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBzbWFsbCBpbmRleE9mIHdyYXBwZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaW5kXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gZm91bmRcbiAqL1xuZnVuY3Rpb24gaW5TdHIoc3RyLCBmaW5kKSB7XG4gICAgcmV0dXJuIHN0ci5pbmRleE9mKGZpbmQpID4gLTE7XG59XG5cbi8qKlxuICogc3BsaXQgc3RyaW5nIG9uIHdoaXRlc3BhY2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtBcnJheX0gd29yZHNcbiAqL1xuZnVuY3Rpb24gc3BsaXRTdHIoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50cmltKCkuc3BsaXQoL1xccysvZyk7XG59XG5cbi8qKlxuICogZmluZCBpZiBhIGFycmF5IGNvbnRhaW5zIHRoZSBvYmplY3QgdXNpbmcgaW5kZXhPZiBvciBhIHNpbXBsZSBwb2x5RmlsbFxuICogQHBhcmFtIHtBcnJheX0gc3JjXG4gKiBAcGFyYW0ge1N0cmluZ30gZmluZFxuICogQHBhcmFtIHtTdHJpbmd9IFtmaW5kQnlLZXldXG4gKiBAcmV0dXJuIHtCb29sZWFufE51bWJlcn0gZmFsc2Ugd2hlbiBub3QgZm91bmQsIG9yIHRoZSBpbmRleFxuICovXG5mdW5jdGlvbiBpbkFycmF5KHNyYywgZmluZCwgZmluZEJ5S2V5KSB7XG4gICAgaWYgKHNyYy5pbmRleE9mICYmICFmaW5kQnlLZXkpIHtcbiAgICAgICAgcmV0dXJuIHNyYy5pbmRleE9mKGZpbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzcmMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoKGZpbmRCeUtleSAmJiBzcmNbaV1bZmluZEJ5S2V5XSA9PSBmaW5kKSB8fCAoIWZpbmRCeUtleSAmJiBzcmNbaV0gPT09IGZpbmQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbn1cblxuLyoqXG4gKiBjb252ZXJ0IGFycmF5LWxpa2Ugb2JqZWN0cyB0byByZWFsIGFycmF5c1xuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybnMge0FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5KG9iaikge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmosIDApO1xufVxuXG4vKipcbiAqIHVuaXF1ZSBhcnJheSB3aXRoIG9iamVjdHMgYmFzZWQgb24gYSBrZXkgKGxpa2UgJ2lkJykgb3IganVzdCBieSB0aGUgYXJyYXkncyB2YWx1ZVxuICogQHBhcmFtIHtBcnJheX0gc3JjIFt7aWQ6MX0se2lkOjJ9LHtpZDoxfV1cbiAqIEBwYXJhbSB7U3RyaW5nfSBba2V5XVxuICogQHBhcmFtIHtCb29sZWFufSBbc29ydD1GYWxzZV1cbiAqIEByZXR1cm5zIHtBcnJheX0gW3tpZDoxfSx7aWQ6Mn1dXG4gKi9cbmZ1bmN0aW9uIHVuaXF1ZUFycmF5KHNyYywga2V5LCBzb3J0KSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBzcmMubGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWwgPSBrZXkgPyBzcmNbaV1ba2V5XSA6IHNyY1tpXTtcbiAgICAgICAgaWYgKGluQXJyYXkodmFsdWVzLCB2YWwpIDwgMCkge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHNyY1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVzW2ldID0gdmFsO1xuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgaWYgKHNvcnQpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNvcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNvcnQoZnVuY3Rpb24gc29ydFVuaXF1ZUFycmF5KGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYVtrZXldID4gYltrZXldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbn1cblxuLyoqXG4gKiBnZXQgdGhlIHByZWZpeGVkIHByb3BlcnR5XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAqIEByZXR1cm5zIHtTdHJpbmd8VW5kZWZpbmVkfSBwcmVmaXhlZFxuICovXG5mdW5jdGlvbiBwcmVmaXhlZChvYmosIHByb3BlcnR5KSB7XG4gICAgdmFyIHByZWZpeCwgcHJvcDtcbiAgICB2YXIgY2FtZWxQcm9wID0gcHJvcGVydHlbMF0udG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgVkVORE9SX1BSRUZJWEVTLmxlbmd0aCkge1xuICAgICAgICBwcmVmaXggPSBWRU5ET1JfUFJFRklYRVNbaV07XG4gICAgICAgIHByb3AgPSAocHJlZml4KSA/IHByZWZpeCArIGNhbWVsUHJvcCA6IHByb3BlcnR5O1xuXG4gICAgICAgIGlmIChwcm9wIGluIG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIGdldCBhIHVuaXF1ZSBpZFxuICogQHJldHVybnMge251bWJlcn0gdW5pcXVlSWRcbiAqL1xudmFyIF91bmlxdWVJZCA9IDE7XG5mdW5jdGlvbiB1bmlxdWVJZCgpIHtcbiAgICByZXR1cm4gX3VuaXF1ZUlkKys7XG59XG5cbi8qKlxuICogZ2V0IHRoZSB3aW5kb3cgb2JqZWN0IG9mIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtEb2N1bWVudFZpZXd8V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3dGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICB2YXIgZG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50IHx8IGVsZW1lbnQ7XG4gICAgcmV0dXJuIChkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cpO1xufVxuXG52YXIgTU9CSUxFX1JFR0VYID0gL21vYmlsZXx0YWJsZXR8aXAoYWR8aG9uZXxvZCl8YW5kcm9pZC9pO1xuXG52YXIgU1VQUE9SVF9UT1VDSCA9ICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpO1xudmFyIFNVUFBPUlRfUE9JTlRFUl9FVkVOVFMgPSBwcmVmaXhlZCh3aW5kb3csICdQb2ludGVyRXZlbnQnKSAhPT0gdW5kZWZpbmVkO1xudmFyIFNVUFBPUlRfT05MWV9UT1VDSCA9IFNVUFBPUlRfVE9VQ0ggJiYgTU9CSUxFX1JFR0VYLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbnZhciBJTlBVVF9UWVBFX1RPVUNIID0gJ3RvdWNoJztcbnZhciBJTlBVVF9UWVBFX1BFTiA9ICdwZW4nO1xudmFyIElOUFVUX1RZUEVfTU9VU0UgPSAnbW91c2UnO1xudmFyIElOUFVUX1RZUEVfS0lORUNUID0gJ2tpbmVjdCc7XG5cbnZhciBDT01QVVRFX0lOVEVSVkFMID0gMjU7XG5cbnZhciBJTlBVVF9TVEFSVCA9IDE7XG52YXIgSU5QVVRfTU9WRSA9IDI7XG52YXIgSU5QVVRfRU5EID0gNDtcbnZhciBJTlBVVF9DQU5DRUwgPSA4O1xuXG52YXIgRElSRUNUSU9OX05PTkUgPSAxO1xudmFyIERJUkVDVElPTl9MRUZUID0gMjtcbnZhciBESVJFQ1RJT05fUklHSFQgPSA0O1xudmFyIERJUkVDVElPTl9VUCA9IDg7XG52YXIgRElSRUNUSU9OX0RPV04gPSAxNjtcblxudmFyIERJUkVDVElPTl9IT1JJWk9OVEFMID0gRElSRUNUSU9OX0xFRlQgfCBESVJFQ1RJT05fUklHSFQ7XG52YXIgRElSRUNUSU9OX1ZFUlRJQ0FMID0gRElSRUNUSU9OX1VQIHwgRElSRUNUSU9OX0RPV047XG52YXIgRElSRUNUSU9OX0FMTCA9IERJUkVDVElPTl9IT1JJWk9OVEFMIHwgRElSRUNUSU9OX1ZFUlRJQ0FMO1xuXG52YXIgUFJPUFNfWFkgPSBbJ3gnLCAneSddO1xudmFyIFBST1BTX0NMSUVOVF9YWSA9IFsnY2xpZW50WCcsICdjbGllbnRZJ107XG5cbi8qKlxuICogY3JlYXRlIG5ldyBpbnB1dCB0eXBlIG1hbmFnZXJcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtJbnB1dH1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBJbnB1dChtYW5hZ2VyLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLmVsZW1lbnQgPSBtYW5hZ2VyLmVsZW1lbnQ7XG4gICAgdGhpcy50YXJnZXQgPSBtYW5hZ2VyLm9wdGlvbnMuaW5wdXRUYXJnZXQ7XG5cbiAgICAvLyBzbWFsbGVyIHdyYXBwZXIgYXJvdW5kIHRoZSBoYW5kbGVyLCBmb3IgdGhlIHNjb3BlIGFuZCB0aGUgZW5hYmxlZCBzdGF0ZSBvZiB0aGUgbWFuYWdlcixcbiAgICAvLyBzbyB3aGVuIGRpc2FibGVkIHRoZSBpbnB1dCBldmVudHMgYXJlIGNvbXBsZXRlbHkgYnlwYXNzZWQuXG4gICAgdGhpcy5kb21IYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgaWYgKGJvb2xPckZuKG1hbmFnZXIub3B0aW9ucy5lbmFibGUsIFttYW5hZ2VyXSkpIHtcbiAgICAgICAgICAgIHNlbGYuaGFuZGxlcihldik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5pbml0KCk7XG5cbn1cblxuSW5wdXQucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHNob3VsZCBoYW5kbGUgdGhlIGlucHV0RXZlbnQgZGF0YSBhbmQgdHJpZ2dlciB0aGUgY2FsbGJhY2tcbiAgICAgKiBAdmlydHVhbFxuICAgICAqL1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkgeyB9LFxuXG4gICAgLyoqXG4gICAgICogYmluZCB0aGUgZXZlbnRzXG4gICAgICovXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXZFbCAmJiBhZGRFdmVudExpc3RlbmVycyh0aGlzLmVsZW1lbnQsIHRoaXMuZXZFbCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldlRhcmdldCAmJiBhZGRFdmVudExpc3RlbmVycyh0aGlzLnRhcmdldCwgdGhpcy5ldlRhcmdldCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldldpbiAmJiBhZGRFdmVudExpc3RlbmVycyhnZXRXaW5kb3dGb3JFbGVtZW50KHRoaXMuZWxlbWVudCksIHRoaXMuZXZXaW4sIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVuYmluZCB0aGUgZXZlbnRzXG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXZFbCAmJiByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLmVsZW1lbnQsIHRoaXMuZXZFbCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldlRhcmdldCAmJiByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnRhcmdldCwgdGhpcy5ldlRhcmdldCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldldpbiAmJiByZW1vdmVFdmVudExpc3RlbmVycyhnZXRXaW5kb3dGb3JFbGVtZW50KHRoaXMuZWxlbWVudCksIHRoaXMuZXZXaW4sIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgfVxufTtcblxuLyoqXG4gKiBjcmVhdGUgbmV3IGlucHV0IHR5cGUgbWFuYWdlclxuICogY2FsbGVkIGJ5IHRoZSBNYW5hZ2VyIGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0hhbW1lcn0gbWFuYWdlclxuICogQHJldHVybnMge0lucHV0fVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dEluc3RhbmNlKG1hbmFnZXIpIHtcbiAgICB2YXIgVHlwZTtcbiAgICB2YXIgaW5wdXRDbGFzcyA9IG1hbmFnZXIub3B0aW9ucy5pbnB1dENsYXNzO1xuXG4gICAgaWYgKGlucHV0Q2xhc3MpIHtcbiAgICAgICAgVHlwZSA9IGlucHV0Q2xhc3M7XG4gICAgfSBlbHNlIGlmIChTVVBQT1JUX1BPSU5URVJfRVZFTlRTKSB7XG4gICAgICAgIFR5cGUgPSBQb2ludGVyRXZlbnRJbnB1dDtcbiAgICB9IGVsc2UgaWYgKFNVUFBPUlRfT05MWV9UT1VDSCkge1xuICAgICAgICBUeXBlID0gVG91Y2hJbnB1dDtcbiAgICB9IGVsc2UgaWYgKCFTVVBQT1JUX1RPVUNIKSB7XG4gICAgICAgIFR5cGUgPSBNb3VzZUlucHV0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIFR5cGUgPSBUb3VjaE1vdXNlSW5wdXQ7XG4gICAgfVxuICAgIHJldHVybiBuZXcgKFR5cGUpKG1hbmFnZXIsIGlucHV0SGFuZGxlcik7XG59XG5cbi8qKlxuICogaGFuZGxlIGlucHV0IGV2ZW50c1xuICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRUeXBlXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAqL1xuZnVuY3Rpb24gaW5wdXRIYW5kbGVyKG1hbmFnZXIsIGV2ZW50VHlwZSwgaW5wdXQpIHtcbiAgICB2YXIgcG9pbnRlcnNMZW4gPSBpbnB1dC5wb2ludGVycy5sZW5ndGg7XG4gICAgdmFyIGNoYW5nZWRQb2ludGVyc0xlbiA9IGlucHV0LmNoYW5nZWRQb2ludGVycy5sZW5ndGg7XG4gICAgdmFyIGlzRmlyc3QgPSAoZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQgJiYgKHBvaW50ZXJzTGVuIC0gY2hhbmdlZFBvaW50ZXJzTGVuID09PSAwKSk7XG4gICAgdmFyIGlzRmluYWwgPSAoZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkgJiYgKHBvaW50ZXJzTGVuIC0gY2hhbmdlZFBvaW50ZXJzTGVuID09PSAwKSk7XG5cbiAgICBpbnB1dC5pc0ZpcnN0ID0gISFpc0ZpcnN0O1xuICAgIGlucHV0LmlzRmluYWwgPSAhIWlzRmluYWw7XG5cbiAgICBpZiAoaXNGaXJzdCkge1xuICAgICAgICBtYW5hZ2VyLnNlc3Npb24gPSB7fTtcbiAgICB9XG5cbiAgICAvLyBzb3VyY2UgZXZlbnQgaXMgdGhlIG5vcm1hbGl6ZWQgdmFsdWUgb2YgdGhlIGRvbUV2ZW50c1xuICAgIC8vIGxpa2UgJ3RvdWNoc3RhcnQsIG1vdXNldXAsIHBvaW50ZXJkb3duJ1xuICAgIGlucHV0LmV2ZW50VHlwZSA9IGV2ZW50VHlwZTtcblxuICAgIC8vIGNvbXB1dGUgc2NhbGUsIHJvdGF0aW9uIGV0Y1xuICAgIGNvbXB1dGVJbnB1dERhdGEobWFuYWdlciwgaW5wdXQpO1xuXG4gICAgLy8gZW1pdCBzZWNyZXQgZXZlbnRcbiAgICBtYW5hZ2VyLmVtaXQoJ2hhbW1lci5pbnB1dCcsIGlucHV0KTtcblxuICAgIG1hbmFnZXIucmVjb2duaXplKGlucHV0KTtcbiAgICBtYW5hZ2VyLnNlc3Npb24ucHJldklucHV0ID0gaW5wdXQ7XG59XG5cbi8qKlxuICogZXh0ZW5kIHRoZSBkYXRhIHdpdGggc29tZSB1c2FibGUgcHJvcGVydGllcyBsaWtlIHNjYWxlLCByb3RhdGUsIHZlbG9jaXR5IGV0Y1xuICogQHBhcmFtIHtPYmplY3R9IG1hbmFnZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICovXG5mdW5jdGlvbiBjb21wdXRlSW5wdXREYXRhKG1hbmFnZXIsIGlucHV0KSB7XG4gICAgdmFyIHNlc3Npb24gPSBtYW5hZ2VyLnNlc3Npb247XG4gICAgdmFyIHBvaW50ZXJzID0gaW5wdXQucG9pbnRlcnM7XG4gICAgdmFyIHBvaW50ZXJzTGVuZ3RoID0gcG9pbnRlcnMubGVuZ3RoO1xuXG4gICAgLy8gc3RvcmUgdGhlIGZpcnN0IGlucHV0IHRvIGNhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYW5kIGRpcmVjdGlvblxuICAgIGlmICghc2Vzc2lvbi5maXJzdElucHV0KSB7XG4gICAgICAgIHNlc3Npb24uZmlyc3RJbnB1dCA9IHNpbXBsZUNsb25lSW5wdXREYXRhKGlucHV0KTtcbiAgICB9XG5cbiAgICAvLyB0byBjb21wdXRlIHNjYWxlIGFuZCByb3RhdGlvbiB3ZSBuZWVkIHRvIHN0b3JlIHRoZSBtdWx0aXBsZSB0b3VjaGVzXG4gICAgaWYgKHBvaW50ZXJzTGVuZ3RoID4gMSAmJiAhc2Vzc2lvbi5maXJzdE11bHRpcGxlKSB7XG4gICAgICAgIHNlc3Npb24uZmlyc3RNdWx0aXBsZSA9IHNpbXBsZUNsb25lSW5wdXREYXRhKGlucHV0KTtcbiAgICB9IGVsc2UgaWYgKHBvaW50ZXJzTGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHNlc3Npb24uZmlyc3RNdWx0aXBsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBmaXJzdElucHV0ID0gc2Vzc2lvbi5maXJzdElucHV0O1xuICAgIHZhciBmaXJzdE11bHRpcGxlID0gc2Vzc2lvbi5maXJzdE11bHRpcGxlO1xuICAgIHZhciBvZmZzZXRDZW50ZXIgPSBmaXJzdE11bHRpcGxlID8gZmlyc3RNdWx0aXBsZS5jZW50ZXIgOiBmaXJzdElucHV0LmNlbnRlcjtcblxuICAgIHZhciBjZW50ZXIgPSBpbnB1dC5jZW50ZXIgPSBnZXRDZW50ZXIocG9pbnRlcnMpO1xuICAgIGlucHV0LnRpbWVTdGFtcCA9IG5vdygpO1xuICAgIGlucHV0LmRlbHRhVGltZSA9IGlucHV0LnRpbWVTdGFtcCAtIGZpcnN0SW5wdXQudGltZVN0YW1wO1xuXG4gICAgaW5wdXQuYW5nbGUgPSBnZXRBbmdsZShvZmZzZXRDZW50ZXIsIGNlbnRlcik7XG4gICAgaW5wdXQuZGlzdGFuY2UgPSBnZXREaXN0YW5jZShvZmZzZXRDZW50ZXIsIGNlbnRlcik7XG5cbiAgICBjb21wdXRlRGVsdGFYWShzZXNzaW9uLCBpbnB1dCk7XG4gICAgaW5wdXQub2Zmc2V0RGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uKGlucHV0LmRlbHRhWCwgaW5wdXQuZGVsdGFZKTtcblxuICAgIHZhciBvdmVyYWxsVmVsb2NpdHkgPSBnZXRWZWxvY2l0eShpbnB1dC5kZWx0YVRpbWUsIGlucHV0LmRlbHRhWCwgaW5wdXQuZGVsdGFZKTtcbiAgICBpbnB1dC5vdmVyYWxsVmVsb2NpdHlYID0gb3ZlcmFsbFZlbG9jaXR5Lng7XG4gICAgaW5wdXQub3ZlcmFsbFZlbG9jaXR5WSA9IG92ZXJhbGxWZWxvY2l0eS55O1xuICAgIGlucHV0Lm92ZXJhbGxWZWxvY2l0eSA9IChhYnMob3ZlcmFsbFZlbG9jaXR5LngpID4gYWJzKG92ZXJhbGxWZWxvY2l0eS55KSkgPyBvdmVyYWxsVmVsb2NpdHkueCA6IG92ZXJhbGxWZWxvY2l0eS55O1xuXG4gICAgaW5wdXQuc2NhbGUgPSBmaXJzdE11bHRpcGxlID8gZ2V0U2NhbGUoZmlyc3RNdWx0aXBsZS5wb2ludGVycywgcG9pbnRlcnMpIDogMTtcbiAgICBpbnB1dC5yb3RhdGlvbiA9IGZpcnN0TXVsdGlwbGUgPyBnZXRSb3RhdGlvbihmaXJzdE11bHRpcGxlLnBvaW50ZXJzLCBwb2ludGVycykgOiAwO1xuXG4gICAgaW5wdXQubWF4UG9pbnRlcnMgPSAhc2Vzc2lvbi5wcmV2SW5wdXQgPyBpbnB1dC5wb2ludGVycy5sZW5ndGggOiAoKGlucHV0LnBvaW50ZXJzLmxlbmd0aCA+XG4gICAgICAgIHNlc3Npb24ucHJldklucHV0Lm1heFBvaW50ZXJzKSA/IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA6IHNlc3Npb24ucHJldklucHV0Lm1heFBvaW50ZXJzKTtcblxuICAgIGNvbXB1dGVJbnRlcnZhbElucHV0RGF0YShzZXNzaW9uLCBpbnB1dCk7XG5cbiAgICAvLyBmaW5kIHRoZSBjb3JyZWN0IHRhcmdldFxuICAgIHZhciB0YXJnZXQgPSBtYW5hZ2VyLmVsZW1lbnQ7XG4gICAgaWYgKGhhc1BhcmVudChpbnB1dC5zcmNFdmVudC50YXJnZXQsIHRhcmdldCkpIHtcbiAgICAgICAgdGFyZ2V0ID0gaW5wdXQuc3JjRXZlbnQudGFyZ2V0O1xuICAgIH1cbiAgICBpbnB1dC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVEZWx0YVhZKHNlc3Npb24sIGlucHV0KSB7XG4gICAgdmFyIGNlbnRlciA9IGlucHV0LmNlbnRlcjtcbiAgICB2YXIgb2Zmc2V0ID0gc2Vzc2lvbi5vZmZzZXREZWx0YSB8fCB7fTtcbiAgICB2YXIgcHJldkRlbHRhID0gc2Vzc2lvbi5wcmV2RGVsdGEgfHwge307XG4gICAgdmFyIHByZXZJbnB1dCA9IHNlc3Npb24ucHJldklucHV0IHx8IHt9O1xuXG4gICAgaWYgKGlucHV0LmV2ZW50VHlwZSA9PT0gSU5QVVRfU1RBUlQgfHwgcHJldklucHV0LmV2ZW50VHlwZSA9PT0gSU5QVVRfRU5EKSB7XG4gICAgICAgIHByZXZEZWx0YSA9IHNlc3Npb24ucHJldkRlbHRhID0ge1xuICAgICAgICAgICAgeDogcHJldklucHV0LmRlbHRhWCB8fCAwLFxuICAgICAgICAgICAgeTogcHJldklucHV0LmRlbHRhWSB8fCAwXG4gICAgICAgIH07XG5cbiAgICAgICAgb2Zmc2V0ID0gc2Vzc2lvbi5vZmZzZXREZWx0YSA9IHtcbiAgICAgICAgICAgIHg6IGNlbnRlci54LFxuICAgICAgICAgICAgeTogY2VudGVyLnlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpbnB1dC5kZWx0YVggPSBwcmV2RGVsdGEueCArIChjZW50ZXIueCAtIG9mZnNldC54KTtcbiAgICBpbnB1dC5kZWx0YVkgPSBwcmV2RGVsdGEueSArIChjZW50ZXIueSAtIG9mZnNldC55KTtcbn1cblxuLyoqXG4gKiB2ZWxvY2l0eSBpcyBjYWxjdWxhdGVkIGV2ZXJ5IHggbXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXNzaW9uXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUludGVydmFsSW5wdXREYXRhKHNlc3Npb24sIGlucHV0KSB7XG4gICAgdmFyIGxhc3QgPSBzZXNzaW9uLmxhc3RJbnRlcnZhbCB8fCBpbnB1dCxcbiAgICAgICAgZGVsdGFUaW1lID0gaW5wdXQudGltZVN0YW1wIC0gbGFzdC50aW1lU3RhbXAsXG4gICAgICAgIHZlbG9jaXR5LCB2ZWxvY2l0eVgsIHZlbG9jaXR5WSwgZGlyZWN0aW9uO1xuXG4gICAgaWYgKGlucHV0LmV2ZW50VHlwZSAhPSBJTlBVVF9DQU5DRUwgJiYgKGRlbHRhVGltZSA+IENPTVBVVEVfSU5URVJWQUwgfHwgbGFzdC52ZWxvY2l0eSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICB2YXIgZGVsdGFYID0gaW5wdXQuZGVsdGFYIC0gbGFzdC5kZWx0YVg7XG4gICAgICAgIHZhciBkZWx0YVkgPSBpbnB1dC5kZWx0YVkgLSBsYXN0LmRlbHRhWTtcblxuICAgICAgICB2YXIgdiA9IGdldFZlbG9jaXR5KGRlbHRhVGltZSwgZGVsdGFYLCBkZWx0YVkpO1xuICAgICAgICB2ZWxvY2l0eVggPSB2Lng7XG4gICAgICAgIHZlbG9jaXR5WSA9IHYueTtcbiAgICAgICAgdmVsb2NpdHkgPSAoYWJzKHYueCkgPiBhYnModi55KSkgPyB2LnggOiB2Lnk7XG4gICAgICAgIGRpcmVjdGlvbiA9IGdldERpcmVjdGlvbihkZWx0YVgsIGRlbHRhWSk7XG5cbiAgICAgICAgc2Vzc2lvbi5sYXN0SW50ZXJ2YWwgPSBpbnB1dDtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1c2UgbGF0ZXN0IHZlbG9jaXR5IGluZm8gaWYgaXQgZG9lc24ndCBvdmVydGFrZSBhIG1pbmltdW0gcGVyaW9kXG4gICAgICAgIHZlbG9jaXR5ID0gbGFzdC52ZWxvY2l0eTtcbiAgICAgICAgdmVsb2NpdHlYID0gbGFzdC52ZWxvY2l0eVg7XG4gICAgICAgIHZlbG9jaXR5WSA9IGxhc3QudmVsb2NpdHlZO1xuICAgICAgICBkaXJlY3Rpb24gPSBsYXN0LmRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICBpbnB1dC52ZWxvY2l0eSA9IHZlbG9jaXR5O1xuICAgIGlucHV0LnZlbG9jaXR5WCA9IHZlbG9jaXR5WDtcbiAgICBpbnB1dC52ZWxvY2l0eVkgPSB2ZWxvY2l0eVk7XG4gICAgaW5wdXQuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xufVxuXG4vKipcbiAqIGNyZWF0ZSBhIHNpbXBsZSBjbG9uZSBmcm9tIHRoZSBpbnB1dCB1c2VkIGZvciBzdG9yYWdlIG9mIGZpcnN0SW5wdXQgYW5kIGZpcnN0TXVsdGlwbGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICogQHJldHVybnMge09iamVjdH0gY2xvbmVkSW5wdXREYXRhXG4gKi9cbmZ1bmN0aW9uIHNpbXBsZUNsb25lSW5wdXREYXRhKGlucHV0KSB7XG4gICAgLy8gbWFrZSBhIHNpbXBsZSBjb3B5IG9mIHRoZSBwb2ludGVycyBiZWNhdXNlIHdlIHdpbGwgZ2V0IGEgcmVmZXJlbmNlIGlmIHdlIGRvbid0XG4gICAgLy8gd2Ugb25seSBuZWVkIGNsaWVudFhZIGZvciB0aGUgY2FsY3VsYXRpb25zXG4gICAgdmFyIHBvaW50ZXJzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgaW5wdXQucG9pbnRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHBvaW50ZXJzW2ldID0ge1xuICAgICAgICAgICAgY2xpZW50WDogcm91bmQoaW5wdXQucG9pbnRlcnNbaV0uY2xpZW50WCksXG4gICAgICAgICAgICBjbGllbnRZOiByb3VuZChpbnB1dC5wb2ludGVyc1tpXS5jbGllbnRZKVxuICAgICAgICB9O1xuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGltZVN0YW1wOiBub3coKSxcbiAgICAgICAgcG9pbnRlcnM6IHBvaW50ZXJzLFxuICAgICAgICBjZW50ZXI6IGdldENlbnRlcihwb2ludGVycyksXG4gICAgICAgIGRlbHRhWDogaW5wdXQuZGVsdGFYLFxuICAgICAgICBkZWx0YVk6IGlucHV0LmRlbHRhWVxuICAgIH07XG59XG5cbi8qKlxuICogZ2V0IHRoZSBjZW50ZXIgb2YgYWxsIHRoZSBwb2ludGVyc1xuICogQHBhcmFtIHtBcnJheX0gcG9pbnRlcnNcbiAqIEByZXR1cm4ge09iamVjdH0gY2VudGVyIGNvbnRhaW5zIGB4YCBhbmQgYHlgIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Q2VudGVyKHBvaW50ZXJzKSB7XG4gICAgdmFyIHBvaW50ZXJzTGVuZ3RoID0gcG9pbnRlcnMubGVuZ3RoO1xuXG4gICAgLy8gbm8gbmVlZCB0byBsb29wIHdoZW4gb25seSBvbmUgdG91Y2hcbiAgICBpZiAocG9pbnRlcnNMZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHJvdW5kKHBvaW50ZXJzWzBdLmNsaWVudFgpLFxuICAgICAgICAgICAgeTogcm91bmQocG9pbnRlcnNbMF0uY2xpZW50WSlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgeCA9IDAsIHkgPSAwLCBpID0gMDtcbiAgICB3aGlsZSAoaSA8IHBvaW50ZXJzTGVuZ3RoKSB7XG4gICAgICAgIHggKz0gcG9pbnRlcnNbaV0uY2xpZW50WDtcbiAgICAgICAgeSArPSBwb2ludGVyc1tpXS5jbGllbnRZO1xuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcm91bmQoeCAvIHBvaW50ZXJzTGVuZ3RoKSxcbiAgICAgICAgeTogcm91bmQoeSAvIHBvaW50ZXJzTGVuZ3RoKVxuICAgIH07XG59XG5cbi8qKlxuICogY2FsY3VsYXRlIHRoZSB2ZWxvY2l0eSBiZXR3ZWVuIHR3byBwb2ludHMuIHVuaXQgaXMgaW4gcHggcGVyIG1zLlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhVGltZVxuICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gKiBAcmV0dXJuIHtPYmplY3R9IHZlbG9jaXR5IGB4YCBhbmQgYHlgXG4gKi9cbmZ1bmN0aW9uIGdldFZlbG9jaXR5KGRlbHRhVGltZSwgeCwgeSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHggLyBkZWx0YVRpbWUgfHwgMCxcbiAgICAgICAgeTogeSAvIGRlbHRhVGltZSB8fCAwXG4gICAgfTtcbn1cblxuLyoqXG4gKiBnZXQgdGhlIGRpcmVjdGlvbiBiZXR3ZWVuIHR3byBwb2ludHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiBAcGFyYW0ge051bWJlcn0geVxuICogQHJldHVybiB7TnVtYmVyfSBkaXJlY3Rpb25cbiAqL1xuZnVuY3Rpb24gZ2V0RGlyZWN0aW9uKHgsIHkpIHtcbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgICByZXR1cm4gRElSRUNUSU9OX05PTkU7XG4gICAgfVxuXG4gICAgaWYgKGFicyh4KSA+PSBhYnMoeSkpIHtcbiAgICAgICAgcmV0dXJuIHggPCAwID8gRElSRUNUSU9OX0xFRlQgOiBESVJFQ1RJT05fUklHSFQ7XG4gICAgfVxuICAgIHJldHVybiB5IDwgMCA/IERJUkVDVElPTl9VUCA6IERJUkVDVElPTl9ET1dOO1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgYWJzb2x1dGUgZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzXG4gKiBAcGFyYW0ge09iamVjdH0gcDEge3gsIHl9XG4gKiBAcGFyYW0ge09iamVjdH0gcDIge3gsIHl9XG4gKiBAcGFyYW0ge0FycmF5fSBbcHJvcHNdIGNvbnRhaW5pbmcgeCBhbmQgeSBrZXlzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGRpc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGdldERpc3RhbmNlKHAxLCBwMiwgcHJvcHMpIHtcbiAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgIHByb3BzID0gUFJPUFNfWFk7XG4gICAgfVxuICAgIHZhciB4ID0gcDJbcHJvcHNbMF1dIC0gcDFbcHJvcHNbMF1dLFxuICAgICAgICB5ID0gcDJbcHJvcHNbMV1dIC0gcDFbcHJvcHNbMV1dO1xuXG4gICAgcmV0dXJuIE1hdGguc3FydCgoeCAqIHgpICsgKHkgKiB5KSk7XG59XG5cbi8qKlxuICogY2FsY3VsYXRlIHRoZSBhbmdsZSBiZXR3ZWVuIHR3byBjb29yZGluYXRlc1xuICogQHBhcmFtIHtPYmplY3R9IHAxXG4gKiBAcGFyYW0ge09iamVjdH0gcDJcbiAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wc10gY29udGFpbmluZyB4IGFuZCB5IGtleXNcbiAqIEByZXR1cm4ge051bWJlcn0gYW5nbGVcbiAqL1xuZnVuY3Rpb24gZ2V0QW5nbGUocDEsIHAyLCBwcm9wcykge1xuICAgIGlmICghcHJvcHMpIHtcbiAgICAgICAgcHJvcHMgPSBQUk9QU19YWTtcbiAgICB9XG4gICAgdmFyIHggPSBwMltwcm9wc1swXV0gLSBwMVtwcm9wc1swXV0sXG4gICAgICAgIHkgPSBwMltwcm9wc1sxXV0gLSBwMVtwcm9wc1sxXV07XG4gICAgcmV0dXJuIE1hdGguYXRhbjIoeSwgeCkgKiAxODAgLyBNYXRoLlBJO1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgcm90YXRpb24gZGVncmVlcyBiZXR3ZWVuIHR3byBwb2ludGVyc2V0c1xuICogQHBhcmFtIHtBcnJheX0gc3RhcnQgYXJyYXkgb2YgcG9pbnRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGVuZCBhcnJheSBvZiBwb2ludGVyc1xuICogQHJldHVybiB7TnVtYmVyfSByb3RhdGlvblxuICovXG5mdW5jdGlvbiBnZXRSb3RhdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGdldEFuZ2xlKGVuZFsxXSwgZW5kWzBdLCBQUk9QU19DTElFTlRfWFkpICsgZ2V0QW5nbGUoc3RhcnRbMV0sIHN0YXJ0WzBdLCBQUk9QU19DTElFTlRfWFkpO1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgc2NhbGUgZmFjdG9yIGJldHdlZW4gdHdvIHBvaW50ZXJzZXRzXG4gKiBubyBzY2FsZSBpcyAxLCBhbmQgZ29lcyBkb3duIHRvIDAgd2hlbiBwaW5jaGVkIHRvZ2V0aGVyLCBhbmQgYmlnZ2VyIHdoZW4gcGluY2hlZCBvdXRcbiAqIEBwYXJhbSB7QXJyYXl9IHN0YXJ0IGFycmF5IG9mIHBvaW50ZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBlbmQgYXJyYXkgb2YgcG9pbnRlcnNcbiAqIEByZXR1cm4ge051bWJlcn0gc2NhbGVcbiAqL1xuZnVuY3Rpb24gZ2V0U2NhbGUoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBnZXREaXN0YW5jZShlbmRbMF0sIGVuZFsxXSwgUFJPUFNfQ0xJRU5UX1hZKSAvIGdldERpc3RhbmNlKHN0YXJ0WzBdLCBzdGFydFsxXSwgUFJPUFNfQ0xJRU5UX1hZKTtcbn1cblxudmFyIE1PVVNFX0lOUFVUX01BUCA9IHtcbiAgICBtb3VzZWRvd246IElOUFVUX1NUQVJULFxuICAgIG1vdXNlbW92ZTogSU5QVVRfTU9WRSxcbiAgICBtb3VzZXVwOiBJTlBVVF9FTkRcbn07XG5cbnZhciBNT1VTRV9FTEVNRU5UX0VWRU5UUyA9ICdtb3VzZWRvd24nO1xudmFyIE1PVVNFX1dJTkRPV19FVkVOVFMgPSAnbW91c2Vtb3ZlIG1vdXNldXAnO1xuXG4vKipcbiAqIE1vdXNlIGV2ZW50cyBpbnB1dFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBJbnB1dFxuICovXG5mdW5jdGlvbiBNb3VzZUlucHV0KCkge1xuICAgIHRoaXMuZXZFbCA9IE1PVVNFX0VMRU1FTlRfRVZFTlRTO1xuICAgIHRoaXMuZXZXaW4gPSBNT1VTRV9XSU5ET1dfRVZFTlRTO1xuXG4gICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7IC8vIG1vdXNlZG93biBzdGF0ZVxuXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChNb3VzZUlucHV0LCBJbnB1dCwge1xuICAgIC8qKlxuICAgICAqIGhhbmRsZSBtb3VzZSBldmVudHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZcbiAgICAgKi9cbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBNRWhhbmRsZXIoZXYpIHtcbiAgICAgICAgdmFyIGV2ZW50VHlwZSA9IE1PVVNFX0lOUFVUX01BUFtldi50eXBlXTtcblxuICAgICAgICAvLyBvbiBzdGFydCB3ZSB3YW50IHRvIGhhdmUgdGhlIGxlZnQgbW91c2UgYnV0dG9uIGRvd25cbiAgICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUICYmIGV2LmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5wcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9NT1ZFICYmIGV2LndoaWNoICE9PSAxKSB7XG4gICAgICAgICAgICBldmVudFR5cGUgPSBJTlBVVF9FTkQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtb3VzZSBtdXN0IGJlIGRvd25cbiAgICAgICAgaWYgKCF0aGlzLnByZXNzZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9FTkQpIHtcbiAgICAgICAgICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIGV2ZW50VHlwZSwge1xuICAgICAgICAgICAgcG9pbnRlcnM6IFtldl0sXG4gICAgICAgICAgICBjaGFuZ2VkUG9pbnRlcnM6IFtldl0sXG4gICAgICAgICAgICBwb2ludGVyVHlwZTogSU5QVVRfVFlQRV9NT1VTRSxcbiAgICAgICAgICAgIHNyY0V2ZW50OiBldlxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxudmFyIFBPSU5URVJfSU5QVVRfTUFQID0ge1xuICAgIHBvaW50ZXJkb3duOiBJTlBVVF9TVEFSVCxcbiAgICBwb2ludGVybW92ZTogSU5QVVRfTU9WRSxcbiAgICBwb2ludGVydXA6IElOUFVUX0VORCxcbiAgICBwb2ludGVyY2FuY2VsOiBJTlBVVF9DQU5DRUwsXG4gICAgcG9pbnRlcm91dDogSU5QVVRfQ0FOQ0VMXG59O1xuXG4vLyBpbiBJRTEwIHRoZSBwb2ludGVyIHR5cGVzIGlzIGRlZmluZWQgYXMgYW4gZW51bVxudmFyIElFMTBfUE9JTlRFUl9UWVBFX0VOVU0gPSB7XG4gICAgMjogSU5QVVRfVFlQRV9UT1VDSCxcbiAgICAzOiBJTlBVVF9UWVBFX1BFTixcbiAgICA0OiBJTlBVVF9UWVBFX01PVVNFLFxuICAgIDU6IElOUFVUX1RZUEVfS0lORUNUIC8vIHNlZSBodHRwczovL3R3aXR0ZXIuY29tL2phY29icm9zc2kvc3RhdHVzLzQ4MDU5NjQzODQ4OTg5MDgxNlxufTtcblxudmFyIFBPSU5URVJfRUxFTUVOVF9FVkVOVFMgPSAncG9pbnRlcmRvd24nO1xudmFyIFBPSU5URVJfV0lORE9XX0VWRU5UUyA9ICdwb2ludGVybW92ZSBwb2ludGVydXAgcG9pbnRlcmNhbmNlbCc7XG5cbi8vIElFMTAgaGFzIHByZWZpeGVkIHN1cHBvcnQsIGFuZCBjYXNlLXNlbnNpdGl2ZVxuaWYgKHdpbmRvdy5NU1BvaW50ZXJFdmVudCAmJiAhd2luZG93LlBvaW50ZXJFdmVudCkge1xuICAgIFBPSU5URVJfRUxFTUVOVF9FVkVOVFMgPSAnTVNQb2ludGVyRG93bic7XG4gICAgUE9JTlRFUl9XSU5ET1dfRVZFTlRTID0gJ01TUG9pbnRlck1vdmUgTVNQb2ludGVyVXAgTVNQb2ludGVyQ2FuY2VsJztcbn1cblxuLyoqXG4gKiBQb2ludGVyIGV2ZW50cyBpbnB1dFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBJbnB1dFxuICovXG5mdW5jdGlvbiBQb2ludGVyRXZlbnRJbnB1dCgpIHtcbiAgICB0aGlzLmV2RWwgPSBQT0lOVEVSX0VMRU1FTlRfRVZFTlRTO1xuICAgIHRoaXMuZXZXaW4gPSBQT0lOVEVSX1dJTkRPV19FVkVOVFM7XG5cbiAgICBJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy5zdG9yZSA9ICh0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wb2ludGVyRXZlbnRzID0gW10pO1xufVxuXG5pbmhlcml0KFBvaW50ZXJFdmVudElucHV0LCBJbnB1dCwge1xuICAgIC8qKlxuICAgICAqIGhhbmRsZSBtb3VzZSBldmVudHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZcbiAgICAgKi9cbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBQRWhhbmRsZXIoZXYpIHtcbiAgICAgICAgdmFyIHN0b3JlID0gdGhpcy5zdG9yZTtcbiAgICAgICAgdmFyIHJlbW92ZVBvaW50ZXIgPSBmYWxzZTtcblxuICAgICAgICB2YXIgZXZlbnRUeXBlTm9ybWFsaXplZCA9IGV2LnR5cGUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdtcycsICcnKTtcbiAgICAgICAgdmFyIGV2ZW50VHlwZSA9IFBPSU5URVJfSU5QVVRfTUFQW2V2ZW50VHlwZU5vcm1hbGl6ZWRdO1xuICAgICAgICB2YXIgcG9pbnRlclR5cGUgPSBJRTEwX1BPSU5URVJfVFlQRV9FTlVNW2V2LnBvaW50ZXJUeXBlXSB8fCBldi5wb2ludGVyVHlwZTtcblxuICAgICAgICB2YXIgaXNUb3VjaCA9IChwb2ludGVyVHlwZSA9PSBJTlBVVF9UWVBFX1RPVUNIKTtcblxuICAgICAgICAvLyBnZXQgaW5kZXggb2YgdGhlIGV2ZW50IGluIHRoZSBzdG9yZVxuICAgICAgICB2YXIgc3RvcmVJbmRleCA9IGluQXJyYXkoc3RvcmUsIGV2LnBvaW50ZXJJZCwgJ3BvaW50ZXJJZCcpO1xuXG4gICAgICAgIC8vIHN0YXJ0IGFuZCBtb3VzZSBtdXN0IGJlIGRvd25cbiAgICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUICYmIChldi5idXR0b24gPT09IDAgfHwgaXNUb3VjaCkpIHtcbiAgICAgICAgICAgIGlmIChzdG9yZUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgIHN0b3JlLnB1c2goZXYpO1xuICAgICAgICAgICAgICAgIHN0b3JlSW5kZXggPSBzdG9yZS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgICAgICByZW1vdmVQb2ludGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGl0IG5vdCBmb3VuZCwgc28gdGhlIHBvaW50ZXIgaGFzbid0IGJlZW4gZG93biAoc28gaXQncyBwcm9iYWJseSBhIGhvdmVyKVxuICAgICAgICBpZiAoc3RvcmVJbmRleCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgZXZlbnQgaW4gdGhlIHN0b3JlXG4gICAgICAgIHN0b3JlW3N0b3JlSW5kZXhdID0gZXY7XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIGV2ZW50VHlwZSwge1xuICAgICAgICAgICAgcG9pbnRlcnM6IHN0b3JlLFxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiBbZXZdLFxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IHBvaW50ZXJUeXBlLFxuICAgICAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyZW1vdmVQb2ludGVyKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgZnJvbSB0aGUgc3RvcmVcbiAgICAgICAgICAgIHN0b3JlLnNwbGljZShzdG9yZUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG52YXIgU0lOR0xFX1RPVUNIX0lOUFVUX01BUCA9IHtcbiAgICB0b3VjaHN0YXJ0OiBJTlBVVF9TVEFSVCxcbiAgICB0b3VjaG1vdmU6IElOUFVUX01PVkUsXG4gICAgdG91Y2hlbmQ6IElOUFVUX0VORCxcbiAgICB0b3VjaGNhbmNlbDogSU5QVVRfQ0FOQ0VMXG59O1xuXG52YXIgU0lOR0xFX1RPVUNIX1RBUkdFVF9FVkVOVFMgPSAndG91Y2hzdGFydCc7XG52YXIgU0lOR0xFX1RPVUNIX1dJTkRPV19FVkVOVFMgPSAndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwnO1xuXG4vKipcbiAqIFRvdWNoIGV2ZW50cyBpbnB1dFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBJbnB1dFxuICovXG5mdW5jdGlvbiBTaW5nbGVUb3VjaElucHV0KCkge1xuICAgIHRoaXMuZXZUYXJnZXQgPSBTSU5HTEVfVE9VQ0hfVEFSR0VUX0VWRU5UUztcbiAgICB0aGlzLmV2V2luID0gU0lOR0xFX1RPVUNIX1dJTkRPV19FVkVOVFM7XG4gICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG5cbiAgICBJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KFNpbmdsZVRvdWNoSW5wdXQsIElucHV0LCB7XG4gICAgaGFuZGxlcjogZnVuY3Rpb24gVEVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciB0eXBlID0gU0lOR0xFX1RPVUNIX0lOUFVUX01BUFtldi50eXBlXTtcblxuICAgICAgICAvLyBzaG91bGQgd2UgaGFuZGxlIHRoZSB0b3VjaCBldmVudHM/XG4gICAgICAgIGlmICh0eXBlID09PSBJTlBVVF9TVEFSVCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG91Y2hlcyA9IG5vcm1hbGl6ZVNpbmdsZVRvdWNoZXMuY2FsbCh0aGlzLCBldiwgdHlwZSk7XG5cbiAgICAgICAgLy8gd2hlbiBkb25lLCByZXNldCB0aGUgc3RhcnRlZCBzdGF0ZVxuICAgICAgICBpZiAodHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmIHRvdWNoZXNbMF0ubGVuZ3RoIC0gdG91Y2hlc1sxXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIHR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiB0b3VjaGVzWzBdLFxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiB0b3VjaGVzWzFdLFxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogQHRoaXMge1RvdWNoSW5wdXR9XG4gKiBAcGFyYW0ge09iamVjdH0gZXZcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eXBlIGZsYWdcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR8QXJyYXl9IFthbGwsIGNoYW5nZWRdXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNpbmdsZVRvdWNoZXMoZXYsIHR5cGUpIHtcbiAgICB2YXIgYWxsID0gdG9BcnJheShldi50b3VjaGVzKTtcbiAgICB2YXIgY2hhbmdlZCA9IHRvQXJyYXkoZXYuY2hhbmdlZFRvdWNoZXMpO1xuXG4gICAgaWYgKHR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xuICAgICAgICBhbGwgPSB1bmlxdWVBcnJheShhbGwuY29uY2F0KGNoYW5nZWQpLCAnaWRlbnRpZmllcicsIHRydWUpO1xuICAgIH1cblxuICAgIHJldHVybiBbYWxsLCBjaGFuZ2VkXTtcbn1cblxudmFyIFRPVUNIX0lOUFVUX01BUCA9IHtcbiAgICB0b3VjaHN0YXJ0OiBJTlBVVF9TVEFSVCxcbiAgICB0b3VjaG1vdmU6IElOUFVUX01PVkUsXG4gICAgdG91Y2hlbmQ6IElOUFVUX0VORCxcbiAgICB0b3VjaGNhbmNlbDogSU5QVVRfQ0FOQ0VMXG59O1xuXG52YXIgVE9VQ0hfVEFSR0VUX0VWRU5UUyA9ICd0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCc7XG5cbi8qKlxuICogTXVsdGktdXNlciB0b3VjaCBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gVG91Y2hJbnB1dCgpIHtcbiAgICB0aGlzLmV2VGFyZ2V0ID0gVE9VQ0hfVEFSR0VUX0VWRU5UUztcbiAgICB0aGlzLnRhcmdldElkcyA9IHt9O1xuXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChUb3VjaElucHV0LCBJbnB1dCwge1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIE1URWhhbmRsZXIoZXYpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBUT1VDSF9JTlBVVF9NQVBbZXYudHlwZV07XG4gICAgICAgIHZhciB0b3VjaGVzID0gZ2V0VG91Y2hlcy5jYWxsKHRoaXMsIGV2LCB0eXBlKTtcbiAgICAgICAgaWYgKCF0b3VjaGVzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgdHlwZSwge1xuICAgICAgICAgICAgcG9pbnRlcnM6IHRvdWNoZXNbMF0sXG4gICAgICAgICAgICBjaGFuZ2VkUG9pbnRlcnM6IHRvdWNoZXNbMV0sXG4gICAgICAgICAgICBwb2ludGVyVHlwZTogSU5QVVRfVFlQRV9UT1VDSCxcbiAgICAgICAgICAgIHNyY0V2ZW50OiBldlxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBAdGhpcyB7VG91Y2hJbnB1dH1cbiAqIEBwYXJhbSB7T2JqZWN0fSBldlxuICogQHBhcmFtIHtOdW1iZXJ9IHR5cGUgZmxhZ1xuICogQHJldHVybnMge3VuZGVmaW5lZHxBcnJheX0gW2FsbCwgY2hhbmdlZF1cbiAqL1xuZnVuY3Rpb24gZ2V0VG91Y2hlcyhldiwgdHlwZSkge1xuICAgIHZhciBhbGxUb3VjaGVzID0gdG9BcnJheShldi50b3VjaGVzKTtcbiAgICB2YXIgdGFyZ2V0SWRzID0gdGhpcy50YXJnZXRJZHM7XG5cbiAgICAvLyB3aGVuIHRoZXJlIGlzIG9ubHkgb25lIHRvdWNoLCB0aGUgcHJvY2VzcyBjYW4gYmUgc2ltcGxpZmllZFxuICAgIGlmICh0eXBlICYgKElOUFVUX1NUQVJUIHwgSU5QVVRfTU9WRSkgJiYgYWxsVG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGFyZ2V0SWRzW2FsbFRvdWNoZXNbMF0uaWRlbnRpZmllcl0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gW2FsbFRvdWNoZXMsIGFsbFRvdWNoZXNdO1xuICAgIH1cblxuICAgIHZhciBpLFxuICAgICAgICB0YXJnZXRUb3VjaGVzLFxuICAgICAgICBjaGFuZ2VkVG91Y2hlcyA9IHRvQXJyYXkoZXYuY2hhbmdlZFRvdWNoZXMpLFxuICAgICAgICBjaGFuZ2VkVGFyZ2V0VG91Y2hlcyA9IFtdLFxuICAgICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldDtcblxuICAgIC8vIGdldCB0YXJnZXQgdG91Y2hlcyBmcm9tIHRvdWNoZXNcbiAgICB0YXJnZXRUb3VjaGVzID0gYWxsVG91Y2hlcy5maWx0ZXIoZnVuY3Rpb24odG91Y2gpIHtcbiAgICAgICAgcmV0dXJuIGhhc1BhcmVudCh0b3VjaC50YXJnZXQsIHRhcmdldCk7XG4gICAgfSk7XG5cbiAgICAvLyBjb2xsZWN0IHRvdWNoZXNcbiAgICBpZiAodHlwZSA9PT0gSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgdGFyZ2V0VG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRhcmdldElkc1t0YXJnZXRUb3VjaGVzW2ldLmlkZW50aWZpZXJdID0gdHJ1ZTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZpbHRlciBjaGFuZ2VkIHRvdWNoZXMgdG8gb25seSBjb250YWluIHRvdWNoZXMgdGhhdCBleGlzdCBpbiB0aGUgY29sbGVjdGVkIHRhcmdldCBpZHNcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGNoYW5nZWRUb3VjaGVzLmxlbmd0aCkge1xuICAgICAgICBpZiAodGFyZ2V0SWRzW2NoYW5nZWRUb3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgICAgICBjaGFuZ2VkVGFyZ2V0VG91Y2hlcy5wdXNoKGNoYW5nZWRUb3VjaGVzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFudXAgcmVtb3ZlZCB0b3VjaGVzXG4gICAgICAgIGlmICh0eXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRJZHNbY2hhbmdlZFRvdWNoZXNbaV0uaWRlbnRpZmllcl07XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cblxuICAgIGlmICghY2hhbmdlZFRhcmdldFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gW1xuICAgICAgICAvLyBtZXJnZSB0YXJnZXRUb3VjaGVzIHdpdGggY2hhbmdlZFRhcmdldFRvdWNoZXMgc28gaXQgY29udGFpbnMgQUxMIHRvdWNoZXMsIGluY2x1ZGluZyAnZW5kJyBhbmQgJ2NhbmNlbCdcbiAgICAgICAgdW5pcXVlQXJyYXkodGFyZ2V0VG91Y2hlcy5jb25jYXQoY2hhbmdlZFRhcmdldFRvdWNoZXMpLCAnaWRlbnRpZmllcicsIHRydWUpLFxuICAgICAgICBjaGFuZ2VkVGFyZ2V0VG91Y2hlc1xuICAgIF07XG59XG5cbi8qKlxuICogQ29tYmluZWQgdG91Y2ggYW5kIG1vdXNlIGlucHV0XG4gKlxuICogVG91Y2ggaGFzIGEgaGlnaGVyIHByaW9yaXR5IHRoZW4gbW91c2UsIGFuZCB3aGlsZSB0b3VjaGluZyBubyBtb3VzZSBldmVudHMgYXJlIGFsbG93ZWQuXG4gKiBUaGlzIGJlY2F1c2UgdG91Y2ggZGV2aWNlcyBhbHNvIGVtaXQgbW91c2UgZXZlbnRzIHdoaWxlIGRvaW5nIGEgdG91Y2guXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBJbnB1dFxuICovXG5cbnZhciBERURVUF9USU1FT1VUID0gMjUwMDtcbnZhciBERURVUF9ESVNUQU5DRSA9IDI1O1xuXG5mdW5jdGlvbiBUb3VjaE1vdXNlSW5wdXQoKSB7XG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHZhciBoYW5kbGVyID0gYmluZEZuKHRoaXMuaGFuZGxlciwgdGhpcyk7XG4gICAgdGhpcy50b3VjaCA9IG5ldyBUb3VjaElucHV0KHRoaXMubWFuYWdlciwgaGFuZGxlcik7XG4gICAgdGhpcy5tb3VzZSA9IG5ldyBNb3VzZUlucHV0KHRoaXMubWFuYWdlciwgaGFuZGxlcik7XG5cbiAgICB0aGlzLnByaW1hcnlUb3VjaCA9IG51bGw7XG4gICAgdGhpcy5sYXN0VG91Y2hlcyA9IFtdO1xufVxuXG5pbmhlcml0KFRvdWNoTW91c2VJbnB1dCwgSW5wdXQsIHtcbiAgICAvKipcbiAgICAgKiBoYW5kbGUgbW91c2UgYW5kIHRvdWNoIGV2ZW50c1xuICAgICAqIEBwYXJhbSB7SGFtbWVyfSBtYW5hZ2VyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlucHV0RXZlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gVE1FaGFuZGxlcihtYW5hZ2VyLCBpbnB1dEV2ZW50LCBpbnB1dERhdGEpIHtcbiAgICAgICAgdmFyIGlzVG91Y2ggPSAoaW5wdXREYXRhLnBvaW50ZXJUeXBlID09IElOUFVUX1RZUEVfVE9VQ0gpLFxuICAgICAgICAgICAgaXNNb3VzZSA9IChpbnB1dERhdGEucG9pbnRlclR5cGUgPT0gSU5QVVRfVFlQRV9NT1VTRSk7XG5cbiAgICAgICAgaWYgKGlzTW91c2UgJiYgaW5wdXREYXRhLnNvdXJjZUNhcGFiaWxpdGllcyAmJiBpbnB1dERhdGEuc291cmNlQ2FwYWJpbGl0aWVzLmZpcmVzVG91Y2hFdmVudHMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdoZW4gd2UncmUgaW4gYSB0b3VjaCBldmVudCwgcmVjb3JkIHRvdWNoZXMgdG8gIGRlLWR1cGUgc3ludGhldGljIG1vdXNlIGV2ZW50XG4gICAgICAgIGlmIChpc1RvdWNoKSB7XG4gICAgICAgICAgICByZWNvcmRUb3VjaGVzLmNhbGwodGhpcywgaW5wdXRFdmVudCwgaW5wdXREYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01vdXNlICYmIGlzU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBpbnB1dERhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhbGxiYWNrKG1hbmFnZXIsIGlucHV0RXZlbnQsIGlucHV0RGF0YSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXJzXG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy50b3VjaC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMubW91c2UuZGVzdHJveSgpO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiByZWNvcmRUb3VjaGVzKGV2ZW50VHlwZSwgZXZlbnREYXRhKSB7XG4gICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUKSB7XG4gICAgICAgIHRoaXMucHJpbWFyeVRvdWNoID0gZXZlbnREYXRhLmNoYW5nZWRQb2ludGVyc1swXS5pZGVudGlmaWVyO1xuICAgICAgICBzZXRMYXN0VG91Y2guY2FsbCh0aGlzLCBldmVudERhdGEpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgICAgc2V0TGFzdFRvdWNoLmNhbGwodGhpcywgZXZlbnREYXRhKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldExhc3RUb3VjaChldmVudERhdGEpIHtcbiAgICB2YXIgdG91Y2ggPSBldmVudERhdGEuY2hhbmdlZFBvaW50ZXJzWzBdO1xuXG4gICAgaWYgKHRvdWNoLmlkZW50aWZpZXIgPT09IHRoaXMucHJpbWFyeVRvdWNoKSB7XG4gICAgICAgIHZhciBsYXN0VG91Y2ggPSB7eDogdG91Y2guY2xpZW50WCwgeTogdG91Y2guY2xpZW50WX07XG4gICAgICAgIHRoaXMubGFzdFRvdWNoZXMucHVzaChsYXN0VG91Y2gpO1xuICAgICAgICB2YXIgbHRzID0gdGhpcy5sYXN0VG91Y2hlcztcbiAgICAgICAgdmFyIHJlbW92ZUxhc3RUb3VjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGkgPSBsdHMuaW5kZXhPZihsYXN0VG91Y2gpO1xuICAgICAgICAgICAgaWYgKGkgPiAtMSkge1xuICAgICAgICAgICAgICAgIGx0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHNldFRpbWVvdXQocmVtb3ZlTGFzdFRvdWNoLCBERURVUF9USU1FT1VUKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzU3ludGhldGljRXZlbnQoZXZlbnREYXRhKSB7XG4gICAgdmFyIHggPSBldmVudERhdGEuc3JjRXZlbnQuY2xpZW50WCwgeSA9IGV2ZW50RGF0YS5zcmNFdmVudC5jbGllbnRZO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sYXN0VG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdCA9IHRoaXMubGFzdFRvdWNoZXNbaV07XG4gICAgICAgIHZhciBkeCA9IE1hdGguYWJzKHggLSB0LngpLCBkeSA9IE1hdGguYWJzKHkgLSB0LnkpO1xuICAgICAgICBpZiAoZHggPD0gREVEVVBfRElTVEFOQ0UgJiYgZHkgPD0gREVEVVBfRElTVEFOQ0UpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxudmFyIFBSRUZJWEVEX1RPVUNIX0FDVElPTiA9IHByZWZpeGVkKFRFU1RfRUxFTUVOVC5zdHlsZSwgJ3RvdWNoQWN0aW9uJyk7XG52YXIgTkFUSVZFX1RPVUNIX0FDVElPTiA9IFBSRUZJWEVEX1RPVUNIX0FDVElPTiAhPT0gdW5kZWZpbmVkO1xuXG4vLyBtYWdpY2FsIHRvdWNoQWN0aW9uIHZhbHVlXG52YXIgVE9VQ0hfQUNUSU9OX0NPTVBVVEUgPSAnY29tcHV0ZSc7XG52YXIgVE9VQ0hfQUNUSU9OX0FVVE8gPSAnYXV0byc7XG52YXIgVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTiA9ICdtYW5pcHVsYXRpb24nOyAvLyBub3QgaW1wbGVtZW50ZWRcbnZhciBUT1VDSF9BQ1RJT05fTk9ORSA9ICdub25lJztcbnZhciBUT1VDSF9BQ1RJT05fUEFOX1ggPSAncGFuLXgnO1xudmFyIFRPVUNIX0FDVElPTl9QQU5fWSA9ICdwYW4teSc7XG52YXIgVE9VQ0hfQUNUSU9OX01BUCA9IGdldFRvdWNoQWN0aW9uUHJvcHMoKTtcblxuLyoqXG4gKiBUb3VjaCBBY3Rpb25cbiAqIHNldHMgdGhlIHRvdWNoQWN0aW9uIHByb3BlcnR5IG9yIHVzZXMgdGhlIGpzIGFsdGVybmF0aXZlXG4gKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFRvdWNoQWN0aW9uKG1hbmFnZXIsIHZhbHVlKSB7XG4gICAgdGhpcy5tYW5hZ2VyID0gbWFuYWdlcjtcbiAgICB0aGlzLnNldCh2YWx1ZSk7XG59XG5cblRvdWNoQWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBzZXQgdGhlIHRvdWNoQWN0aW9uIHZhbHVlIG9uIHRoZSBlbGVtZW50IG9yIGVuYWJsZSB0aGUgcG9seWZpbGxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICAgKi9cbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIC8vIGZpbmQgb3V0IHRoZSB0b3VjaC1hY3Rpb24gYnkgdGhlIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIGlmICh2YWx1ZSA9PSBUT1VDSF9BQ1RJT05fQ09NUFVURSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmNvbXB1dGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChOQVRJVkVfVE9VQ0hfQUNUSU9OICYmIHRoaXMubWFuYWdlci5lbGVtZW50LnN0eWxlICYmIFRPVUNIX0FDVElPTl9NQVBbdmFsdWVdKSB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZWxlbWVudC5zdHlsZVtQUkVGSVhFRF9UT1VDSF9BQ1RJT05dID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3Rpb25zID0gdmFsdWUudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGp1c3QgcmUtc2V0IHRoZSB0b3VjaEFjdGlvbiB2YWx1ZVxuICAgICAqL1xuICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2V0KHRoaXMubWFuYWdlci5vcHRpb25zLnRvdWNoQWN0aW9uKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY29tcHV0ZSB0aGUgdmFsdWUgZm9yIHRoZSB0b3VjaEFjdGlvbiBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcmVjb2duaXplcidzIHNldHRpbmdzXG4gICAgICogQHJldHVybnMge1N0cmluZ30gdmFsdWVcbiAgICAgKi9cbiAgICBjb21wdXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBbXTtcbiAgICAgICAgZWFjaCh0aGlzLm1hbmFnZXIucmVjb2duaXplcnMsIGZ1bmN0aW9uKHJlY29nbml6ZXIpIHtcbiAgICAgICAgICAgIGlmIChib29sT3JGbihyZWNvZ25pemVyLm9wdGlvbnMuZW5hYmxlLCBbcmVjb2duaXplcl0pKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnMuY29uY2F0KHJlY29nbml6ZXIuZ2V0VG91Y2hBY3Rpb24oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xlYW5Ub3VjaEFjdGlvbnMoYWN0aW9ucy5qb2luKCcgJykpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgb24gZWFjaCBpbnB1dCBjeWNsZSBhbmQgcHJvdmlkZXMgdGhlIHByZXZlbnRpbmcgb2YgdGhlIGJyb3dzZXIgYmVoYXZpb3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKi9cbiAgICBwcmV2ZW50RGVmYXVsdHM6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBzcmNFdmVudCA9IGlucHV0LnNyY0V2ZW50O1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gaW5wdXQub2Zmc2V0RGlyZWN0aW9uO1xuXG4gICAgICAgIC8vIGlmIHRoZSB0b3VjaCBhY3Rpb24gZGlkIHByZXZlbnRlZCBvbmNlIHRoaXMgc2Vzc2lvblxuICAgICAgICBpZiAodGhpcy5tYW5hZ2VyLnNlc3Npb24ucHJldmVudGVkKSB7XG4gICAgICAgICAgICBzcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIHZhciBoYXNOb25lID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX05PTkUpICYmICFUT1VDSF9BQ1RJT05fTUFQW1RPVUNIX0FDVElPTl9OT05FXTtcbiAgICAgICAgdmFyIGhhc1BhblkgPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fUEFOX1kpICYmICFUT1VDSF9BQ1RJT05fTUFQW1RPVUNIX0FDVElPTl9QQU5fWV07XG4gICAgICAgIHZhciBoYXNQYW5YID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9YKSAmJiAhVE9VQ0hfQUNUSU9OX01BUFtUT1VDSF9BQ1RJT05fUEFOX1hdO1xuXG4gICAgICAgIGlmIChoYXNOb25lKSB7XG4gICAgICAgICAgICAvL2RvIG5vdCBwcmV2ZW50IGRlZmF1bHRzIGlmIHRoaXMgaXMgYSB0YXAgZ2VzdHVyZVxuXG4gICAgICAgICAgICB2YXIgaXNUYXBQb2ludGVyID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSAxO1xuICAgICAgICAgICAgdmFyIGlzVGFwTW92ZW1lbnQgPSBpbnB1dC5kaXN0YW5jZSA8IDI7XG4gICAgICAgICAgICB2YXIgaXNUYXBUb3VjaFRpbWUgPSBpbnB1dC5kZWx0YVRpbWUgPCAyNTA7XG5cbiAgICAgICAgICAgIGlmIChpc1RhcFBvaW50ZXIgJiYgaXNUYXBNb3ZlbWVudCAmJiBpc1RhcFRvdWNoVGltZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNQYW5YICYmIGhhc1BhblkpIHtcbiAgICAgICAgICAgIC8vIGBwYW4teCBwYW4teWAgbWVhbnMgYnJvd3NlciBoYW5kbGVzIGFsbCBzY3JvbGxpbmcvcGFubmluZywgZG8gbm90IHByZXZlbnRcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNOb25lIHx8XG4gICAgICAgICAgICAoaGFzUGFuWSAmJiBkaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkgfHxcbiAgICAgICAgICAgIChoYXNQYW5YICYmIGRpcmVjdGlvbiAmIERJUkVDVElPTl9WRVJUSUNBTCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByZXZlbnRTcmMoc3JjRXZlbnQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNhbGwgcHJldmVudERlZmF1bHQgdG8gcHJldmVudCB0aGUgYnJvd3NlcidzIGRlZmF1bHQgYmVoYXZpb3IgKHNjcm9sbGluZyBpbiBtb3N0IGNhc2VzKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzcmNFdmVudFxuICAgICAqL1xuICAgIHByZXZlbnRTcmM6IGZ1bmN0aW9uKHNyY0V2ZW50KSB7XG4gICAgICAgIHRoaXMubWFuYWdlci5zZXNzaW9uLnByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgIHNyY0V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiB3aGVuIHRoZSB0b3VjaEFjdGlvbnMgYXJlIGNvbGxlY3RlZCB0aGV5IGFyZSBub3QgYSB2YWxpZCB2YWx1ZSwgc28gd2UgbmVlZCB0byBjbGVhbiB0aGluZ3MgdXAuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBhY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gY2xlYW5Ub3VjaEFjdGlvbnMoYWN0aW9ucykge1xuICAgIC8vIG5vbmVcbiAgICBpZiAoaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX05PTkUpKSB7XG4gICAgICAgIHJldHVybiBUT1VDSF9BQ1RJT05fTk9ORTtcbiAgICB9XG5cbiAgICB2YXIgaGFzUGFuWCA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWCk7XG4gICAgdmFyIGhhc1BhblkgPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fUEFOX1kpO1xuXG4gICAgLy8gaWYgYm90aCBwYW4teCBhbmQgcGFuLXkgYXJlIHNldCAoZGlmZmVyZW50IHJlY29nbml6ZXJzXG4gICAgLy8gZm9yIGRpZmZlcmVudCBkaXJlY3Rpb25zLCBlLmcuIGhvcml6b250YWwgcGFuIGJ1dCB2ZXJ0aWNhbCBzd2lwZT8pXG4gICAgLy8gd2UgbmVlZCBub25lIChhcyBvdGhlcndpc2Ugd2l0aCBwYW4teCBwYW4teSBjb21iaW5lZCBub25lIG9mIHRoZXNlXG4gICAgLy8gcmVjb2duaXplcnMgd2lsbCB3b3JrLCBzaW5jZSB0aGUgYnJvd3NlciB3b3VsZCBoYW5kbGUgYWxsIHBhbm5pbmdcbiAgICBpZiAoaGFzUGFuWCAmJiBoYXNQYW5ZKSB7XG4gICAgICAgIHJldHVybiBUT1VDSF9BQ1RJT05fTk9ORTtcbiAgICB9XG5cbiAgICAvLyBwYW4teCBPUiBwYW4teVxuICAgIGlmIChoYXNQYW5YIHx8IGhhc1BhblkpIHtcbiAgICAgICAgcmV0dXJuIGhhc1BhblggPyBUT1VDSF9BQ1RJT05fUEFOX1ggOiBUT1VDSF9BQ1RJT05fUEFOX1k7XG4gICAgfVxuXG4gICAgLy8gbWFuaXB1bGF0aW9uXG4gICAgaWYgKGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT04pKSB7XG4gICAgICAgIHJldHVybiBUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OO1xuICAgIH1cblxuICAgIHJldHVybiBUT1VDSF9BQ1RJT05fQVVUTztcbn1cblxuZnVuY3Rpb24gZ2V0VG91Y2hBY3Rpb25Qcm9wcygpIHtcbiAgICBpZiAoIU5BVElWRV9UT1VDSF9BQ1RJT04pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdG91Y2hNYXAgPSB7fTtcbiAgICB2YXIgY3NzU3VwcG9ydHMgPSB3aW5kb3cuQ1NTICYmIHdpbmRvdy5DU1Muc3VwcG9ydHM7XG4gICAgWydhdXRvJywgJ21hbmlwdWxhdGlvbicsICdwYW4teScsICdwYW4teCcsICdwYW4teCBwYW4teScsICdub25lJ10uZm9yRWFjaChmdW5jdGlvbih2YWwpIHtcblxuICAgICAgICAvLyBJZiBjc3Muc3VwcG9ydHMgaXMgbm90IHN1cHBvcnRlZCBidXQgdGhlcmUgaXMgbmF0aXZlIHRvdWNoLWFjdGlvbiBhc3N1bWUgaXQgc3VwcG9ydHNcbiAgICAgICAgLy8gYWxsIHZhbHVlcy4gVGhpcyBpcyB0aGUgY2FzZSBmb3IgSUUgMTAgYW5kIDExLlxuICAgICAgICB0b3VjaE1hcFt2YWxdID0gY3NzU3VwcG9ydHMgPyB3aW5kb3cuQ1NTLnN1cHBvcnRzKCd0b3VjaC1hY3Rpb24nLCB2YWwpIDogdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gdG91Y2hNYXA7XG59XG5cbi8qKlxuICogUmVjb2duaXplciBmbG93IGV4cGxhaW5lZDsgKlxuICogQWxsIHJlY29nbml6ZXJzIGhhdmUgdGhlIGluaXRpYWwgc3RhdGUgb2YgUE9TU0lCTEUgd2hlbiBhIGlucHV0IHNlc3Npb24gc3RhcnRzLlxuICogVGhlIGRlZmluaXRpb24gb2YgYSBpbnB1dCBzZXNzaW9uIGlzIGZyb20gdGhlIGZpcnN0IGlucHV0IHVudGlsIHRoZSBsYXN0IGlucHV0LCB3aXRoIGFsbCBpdCdzIG1vdmVtZW50IGluIGl0LiAqXG4gKiBFeGFtcGxlIHNlc3Npb24gZm9yIG1vdXNlLWlucHV0OiBtb3VzZWRvd24gLT4gbW91c2Vtb3ZlIC0+IG1vdXNldXBcbiAqXG4gKiBPbiBlYWNoIHJlY29nbml6aW5nIGN5Y2xlIChzZWUgTWFuYWdlci5yZWNvZ25pemUpIHRoZSAucmVjb2duaXplKCkgbWV0aG9kIGlzIGV4ZWN1dGVkXG4gKiB3aGljaCBkZXRlcm1pbmVzIHdpdGggc3RhdGUgaXQgc2hvdWxkIGJlLlxuICpcbiAqIElmIHRoZSByZWNvZ25pemVyIGhhcyB0aGUgc3RhdGUgRkFJTEVELCBDQU5DRUxMRUQgb3IgUkVDT0dOSVpFRCAoZXF1YWxzIEVOREVEKSwgaXQgaXMgcmVzZXQgdG9cbiAqIFBPU1NJQkxFIHRvIGdpdmUgaXQgYW5vdGhlciBjaGFuZ2Ugb24gdGhlIG5leHQgY3ljbGUuXG4gKlxuICogICAgICAgICAgICAgICBQb3NzaWJsZVxuICogICAgICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICstLS0tLSstLS0tLS0tLS0tLS0tLS0rXG4gKiAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgICAgICstLS0tLSstLS0tLSsgICAgICAgICAgICAgICB8XG4gKiAgICAgIHwgICAgICAgICAgIHwgICAgICAgICAgICAgICB8XG4gKiAgIEZhaWxlZCAgICAgIENhbmNlbGxlZCAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0rLS0tLS0tK1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICAgIFJlY29nbml6ZWQgICAgICAgQmVnYW5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbmdlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVuZGVkL1JlY29nbml6ZWRcbiAqL1xudmFyIFNUQVRFX1BPU1NJQkxFID0gMTtcbnZhciBTVEFURV9CRUdBTiA9IDI7XG52YXIgU1RBVEVfQ0hBTkdFRCA9IDQ7XG52YXIgU1RBVEVfRU5ERUQgPSA4O1xudmFyIFNUQVRFX1JFQ09HTklaRUQgPSBTVEFURV9FTkRFRDtcbnZhciBTVEFURV9DQU5DRUxMRUQgPSAxNjtcbnZhciBTVEFURV9GQUlMRUQgPSAzMjtcblxuLyoqXG4gKiBSZWNvZ25pemVyXG4gKiBFdmVyeSByZWNvZ25pemVyIG5lZWRzIHRvIGV4dGVuZCBmcm9tIHRoaXMgY2xhc3MuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIFJlY29nbml6ZXIob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IGFzc2lnbih7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyB8fCB7fSk7XG5cbiAgICB0aGlzLmlkID0gdW5pcXVlSWQoKTtcblxuICAgIHRoaXMubWFuYWdlciA9IG51bGw7XG5cbiAgICAvLyBkZWZhdWx0IGlzIGVuYWJsZSB0cnVlXG4gICAgdGhpcy5vcHRpb25zLmVuYWJsZSA9IGlmVW5kZWZpbmVkKHRoaXMub3B0aW9ucy5lbmFibGUsIHRydWUpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1BPU1NJQkxFO1xuXG4gICAgdGhpcy5zaW11bHRhbmVvdXMgPSB7fTtcbiAgICB0aGlzLnJlcXVpcmVGYWlsID0gW107XG59XG5cblJlY29nbml6ZXIucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIEB2aXJ0dWFsXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBkZWZhdWx0czoge30sXG5cbiAgICAvKipcbiAgICAgKiBzZXQgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7UmVjb2duaXplcn1cbiAgICAgKi9cbiAgICBzZXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gYWxzbyB1cGRhdGUgdGhlIHRvdWNoQWN0aW9uLCBpbiBjYXNlIHNvbWV0aGluZyBjaGFuZ2VkIGFib3V0IHRoZSBkaXJlY3Rpb25zL2VuYWJsZWQgc3RhdGVcbiAgICAgICAgdGhpcy5tYW5hZ2VyICYmIHRoaXMubWFuYWdlci50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlY29nbml6ZSBzaW11bHRhbmVvdXMgd2l0aCBhbiBvdGhlciByZWNvZ25pemVyLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICByZWNvZ25pemVXaXRoOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKG90aGVyUmVjb2duaXplciwgJ3JlY29nbml6ZVdpdGgnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2ltdWx0YW5lb3VzID0gdGhpcy5zaW11bHRhbmVvdXM7XG4gICAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcbiAgICAgICAgaWYgKCFzaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXSkge1xuICAgICAgICAgICAgc2ltdWx0YW5lb3VzW290aGVyUmVjb2duaXplci5pZF0gPSBvdGhlclJlY29nbml6ZXI7XG4gICAgICAgICAgICBvdGhlclJlY29nbml6ZXIucmVjb2duaXplV2l0aCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZHJvcCB0aGUgc2ltdWx0YW5lb3VzIGxpbmsuIGl0IGRvZXNudCByZW1vdmUgdGhlIGxpbmsgb24gdGhlIG90aGVyIHJlY29nbml6ZXIuXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcn0gdGhpc1xuICAgICAqL1xuICAgIGRyb3BSZWNvZ25pemVXaXRoOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKG90aGVyUmVjb2duaXplciwgJ2Ryb3BSZWNvZ25pemVXaXRoJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgICBkZWxldGUgdGhpcy5zaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlY29nbml6ZXIgY2FuIG9ubHkgcnVuIHdoZW4gYW4gb3RoZXIgaXMgZmFpbGluZ1xuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICByZXF1aXJlRmFpbHVyZTogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdyZXF1aXJlRmFpbHVyZScsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXF1aXJlRmFpbCA9IHRoaXMucmVxdWlyZUZhaWw7XG4gICAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcbiAgICAgICAgaWYgKGluQXJyYXkocmVxdWlyZUZhaWwsIG90aGVyUmVjb2duaXplcikgPT09IC0xKSB7XG4gICAgICAgICAgICByZXF1aXJlRmFpbC5wdXNoKG90aGVyUmVjb2duaXplcik7XG4gICAgICAgICAgICBvdGhlclJlY29nbml6ZXIucmVxdWlyZUZhaWx1cmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGRyb3AgdGhlIHJlcXVpcmVGYWlsdXJlIGxpbmsuIGl0IGRvZXMgbm90IHJlbW92ZSB0aGUgbGluayBvbiB0aGUgb3RoZXIgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgZHJvcFJlcXVpcmVGYWlsdXJlOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKG90aGVyUmVjb2duaXplciwgJ2Ryb3BSZXF1aXJlRmFpbHVyZScsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5BcnJheSh0aGlzLnJlcXVpcmVGYWlsLCBvdGhlclJlY29nbml6ZXIpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5yZXF1aXJlRmFpbC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBoYXMgcmVxdWlyZSBmYWlsdXJlcyBib29sZWFuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgaGFzUmVxdWlyZUZhaWx1cmVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWlyZUZhaWwubGVuZ3RoID4gMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogaWYgdGhlIHJlY29nbml6ZXIgY2FuIHJlY29nbml6ZSBzaW11bHRhbmVvdXMgd2l0aCBhbiBvdGhlciByZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBjYW5SZWNvZ25pemVXaXRoOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5zaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogWW91IHNob3VsZCB1c2UgYHRyeUVtaXRgIGluc3RlYWQgb2YgYGVtaXRgIGRpcmVjdGx5IHRvIGNoZWNrXG4gICAgICogdGhhdCBhbGwgdGhlIG5lZWRlZCByZWNvZ25pemVycyBoYXMgZmFpbGVkIGJlZm9yZSBlbWl0dGluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKi9cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgZnVuY3Rpb24gZW1pdChldmVudCkge1xuICAgICAgICAgICAgc2VsZi5tYW5hZ2VyLmVtaXQoZXZlbnQsIGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vICdwYW5zdGFydCcgYW5kICdwYW5tb3ZlJ1xuICAgICAgICBpZiAoc3RhdGUgPCBTVEFURV9FTkRFRCkge1xuICAgICAgICAgICAgZW1pdChzZWxmLm9wdGlvbnMuZXZlbnQgKyBzdGF0ZVN0cihzdGF0ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW1pdChzZWxmLm9wdGlvbnMuZXZlbnQpOyAvLyBzaW1wbGUgJ2V2ZW50TmFtZScgZXZlbnRzXG5cbiAgICAgICAgaWYgKGlucHV0LmFkZGl0aW9uYWxFdmVudCkgeyAvLyBhZGRpdGlvbmFsIGV2ZW50KHBhbmxlZnQsIHBhbnJpZ2h0LCBwaW5jaGluLCBwaW5jaG91dC4uLilcbiAgICAgICAgICAgIGVtaXQoaW5wdXQuYWRkaXRpb25hbEV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHBhbmVuZCBhbmQgcGFuY2FuY2VsXG4gICAgICAgIGlmIChzdGF0ZSA+PSBTVEFURV9FTkRFRCkge1xuICAgICAgICAgICAgZW1pdChzZWxmLm9wdGlvbnMuZXZlbnQgKyBzdGF0ZVN0cihzdGF0ZSkpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIHRoYXQgYWxsIHRoZSByZXF1aXJlIGZhaWx1cmUgcmVjb2duaXplcnMgaGFzIGZhaWxlZCxcbiAgICAgKiBpZiB0cnVlLCBpdCBlbWl0cyBhIGdlc3R1cmUgZXZlbnQsXG4gICAgICogb3RoZXJ3aXNlLCBzZXR1cCB0aGUgc3RhdGUgdG8gRkFJTEVELlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuICAgIHRyeUVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLmNhbkVtaXQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXQncyBmYWlsaW5nIGFueXdheVxuICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfRkFJTEVEO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYW4gd2UgZW1pdD9cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBjYW5FbWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMucmVxdWlyZUZhaWwubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoISh0aGlzLnJlcXVpcmVGYWlsW2ldLnN0YXRlICYgKFNUQVRFX0ZBSUxFRCB8IFNUQVRFX1BPU1NJQkxFKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZSB0aGUgcmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcbiAgICAgKi9cbiAgICByZWNvZ25pemU6IGZ1bmN0aW9uKGlucHV0RGF0YSkge1xuICAgICAgICAvLyBtYWtlIGEgbmV3IGNvcHkgb2YgdGhlIGlucHV0RGF0YVxuICAgICAgICAvLyBzbyB3ZSBjYW4gY2hhbmdlIHRoZSBpbnB1dERhdGEgd2l0aG91dCBtZXNzaW5nIHVwIHRoZSBvdGhlciByZWNvZ25pemVyc1xuICAgICAgICB2YXIgaW5wdXREYXRhQ2xvbmUgPSBhc3NpZ24oe30sIGlucHV0RGF0YSk7XG5cbiAgICAgICAgLy8gaXMgaXMgZW5hYmxlZCBhbmQgYWxsb3cgcmVjb2duaXppbmc/XG4gICAgICAgIGlmICghYm9vbE9yRm4odGhpcy5vcHRpb25zLmVuYWJsZSwgW3RoaXMsIGlucHV0RGF0YUNsb25lXSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9GQUlMRUQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXNldCB3aGVuIHdlJ3ZlIHJlYWNoZWQgdGhlIGVuZFxuICAgICAgICBpZiAodGhpcy5zdGF0ZSAmIChTVEFURV9SRUNPR05JWkVEIHwgU1RBVEVfQ0FOQ0VMTEVEIHwgU1RBVEVfRkFJTEVEKSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1BPU1NJQkxFO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMucHJvY2VzcyhpbnB1dERhdGFDbG9uZSk7XG5cbiAgICAgICAgLy8gdGhlIHJlY29nbml6ZXIgaGFzIHJlY29nbml6ZWQgYSBnZXN0dXJlXG4gICAgICAgIC8vIHNvIHRyaWdnZXIgYW4gZXZlbnRcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgJiAoU1RBVEVfQkVHQU4gfCBTVEFURV9DSEFOR0VEIHwgU1RBVEVfRU5ERUQgfCBTVEFURV9DQU5DRUxMRUQpKSB7XG4gICAgICAgICAgICB0aGlzLnRyeUVtaXQoaW5wdXREYXRhQ2xvbmUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiB0aGUgc3RhdGUgb2YgdGhlIHJlY29nbml6ZXJcbiAgICAgKiB0aGUgYWN0dWFsIHJlY29nbml6aW5nIGhhcHBlbnMgaW4gdGhpcyBtZXRob2RcbiAgICAgKiBAdmlydHVhbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcbiAgICAgKiBAcmV0dXJucyB7Q29uc3R9IFNUQVRFXG4gICAgICovXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXREYXRhKSB7IH0sIC8vIGpzaGludCBpZ25vcmU6bGluZVxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIHRoZSBwcmVmZXJyZWQgdG91Y2gtYWN0aW9uXG4gICAgICogQHZpcnR1YWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkgeyB9LFxuXG4gICAgLyoqXG4gICAgICogY2FsbGVkIHdoZW4gdGhlIGdlc3R1cmUgaXNuJ3QgYWxsb3dlZCB0byByZWNvZ25pemVcbiAgICAgKiBsaWtlIHdoZW4gYW5vdGhlciBpcyBiZWluZyByZWNvZ25pemVkIG9yIGl0IGlzIGRpc2FibGVkXG4gICAgICogQHZpcnR1YWxcbiAgICAgKi9cbiAgICByZXNldDogZnVuY3Rpb24oKSB7IH1cbn07XG5cbi8qKlxuICogZ2V0IGEgdXNhYmxlIHN0cmluZywgdXNlZCBhcyBldmVudCBwb3N0Zml4XG4gKiBAcGFyYW0ge0NvbnN0fSBzdGF0ZVxuICogQHJldHVybnMge1N0cmluZ30gc3RhdGVcbiAqL1xuZnVuY3Rpb24gc3RhdGVTdHIoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgJiBTVEFURV9DQU5DRUxMRUQpIHtcbiAgICAgICAgcmV0dXJuICdjYW5jZWwnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUgJiBTVEFURV9FTkRFRCkge1xuICAgICAgICByZXR1cm4gJ2VuZCc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZSAmIFNUQVRFX0NIQU5HRUQpIHtcbiAgICAgICAgcmV0dXJuICdtb3ZlJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlICYgU1RBVEVfQkVHQU4pIHtcbiAgICAgICAgcmV0dXJuICdzdGFydCc7XG4gICAgfVxuICAgIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBkaXJlY3Rpb24gY29ucyB0byBzdHJpbmdcbiAqIEBwYXJhbSB7Q29uc3R9IGRpcmVjdGlvblxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZGlyZWN0aW9uU3RyKGRpcmVjdGlvbikge1xuICAgIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX0RPV04pIHtcbiAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fVVApIHtcbiAgICAgICAgcmV0dXJuICd1cCc7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX0xFRlQpIHtcbiAgICAgICAgcmV0dXJuICdsZWZ0JztcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fUklHSFQpIHtcbiAgICAgICAgcmV0dXJuICdyaWdodCc7XG4gICAgfVxuICAgIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBnZXQgYSByZWNvZ25pemVyIGJ5IG5hbWUgaWYgaXQgaXMgYm91bmQgdG8gYSBtYW5hZ2VyXG4gKiBAcGFyYW0ge1JlY29nbml6ZXJ8U3RyaW5nfSBvdGhlclJlY29nbml6ZXJcbiAqIEBwYXJhbSB7UmVjb2duaXplcn0gcmVjb2duaXplclxuICogQHJldHVybnMge1JlY29nbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCByZWNvZ25pemVyKSB7XG4gICAgdmFyIG1hbmFnZXIgPSByZWNvZ25pemVyLm1hbmFnZXI7XG4gICAgaWYgKG1hbmFnZXIpIHtcbiAgICAgICAgcmV0dXJuIG1hbmFnZXIuZ2V0KG90aGVyUmVjb2duaXplcik7XG4gICAgfVxuICAgIHJldHVybiBvdGhlclJlY29nbml6ZXI7XG59XG5cbi8qKlxuICogVGhpcyByZWNvZ25pemVyIGlzIGp1c3QgdXNlZCBhcyBhIGJhc2UgZm9yIHRoZSBzaW1wbGUgYXR0cmlidXRlIHJlY29nbml6ZXJzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIEF0dHJSZWNvZ25pemVyKCkge1xuICAgIFJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChBdHRyUmVjb2duaXplciwgUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgQXR0clJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMVxuICAgICAgICAgKi9cbiAgICAgICAgcG9pbnRlcnM6IDFcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBjaGVjayBpZiBpdCB0aGUgcmVjb2duaXplciByZWNlaXZlcyB2YWxpZCBpbnB1dCwgbGlrZSBpbnB1dC5kaXN0YW5jZSA+IDEwLlxuICAgICAqIEBtZW1iZXJvZiBBdHRyUmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSByZWNvZ25pemVkXG4gICAgICovXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBvcHRpb25Qb2ludGVycyA9IHRoaXMub3B0aW9ucy5wb2ludGVycztcbiAgICAgICAgcmV0dXJuIG9wdGlvblBvaW50ZXJzID09PSAwIHx8IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gb3B0aW9uUG9pbnRlcnM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgdGhlIGlucHV0IGFuZCByZXR1cm4gdGhlIHN0YXRlIGZvciB0aGUgcmVjb2duaXplclxuICAgICAqIEBtZW1iZXJvZiBBdHRyUmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqIEByZXR1cm5zIHsqfSBTdGF0ZVxuICAgICAqL1xuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHZhciBldmVudFR5cGUgPSBpbnB1dC5ldmVudFR5cGU7XG5cbiAgICAgICAgdmFyIGlzUmVjb2duaXplZCA9IHN0YXRlICYgKFNUQVRFX0JFR0FOIHwgU1RBVEVfQ0hBTkdFRCk7XG4gICAgICAgIHZhciBpc1ZhbGlkID0gdGhpcy5hdHRyVGVzdChpbnB1dCk7XG5cbiAgICAgICAgLy8gb24gY2FuY2VsIGlucHV0IGFuZCB3ZSd2ZSByZWNvZ25pemVkIGJlZm9yZSwgcmV0dXJuIFNUQVRFX0NBTkNFTExFRFxuICAgICAgICBpZiAoaXNSZWNvZ25pemVkICYmIChldmVudFR5cGUgJiBJTlBVVF9DQU5DRUwgfHwgIWlzVmFsaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9DQU5DRUxMRUQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNSZWNvZ25pemVkIHx8IGlzVmFsaWQpIHtcbiAgICAgICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9FTkQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9FTkRFRDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIShzdGF0ZSAmIFNUQVRFX0JFR0FOKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBTVEFURV9CRUdBTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX0NIQU5HRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBQYW5cbiAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBkb3duIGFuZCBtb3ZlZCBpbiB0aGUgYWxsb3dlZCBkaXJlY3Rpb24uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFBhblJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMucFggPSBudWxsO1xuICAgIHRoaXMucFkgPSBudWxsO1xufVxuXG5pbmhlcml0KFBhblJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQYW5SZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICdwYW4nLFxuICAgICAgICB0aHJlc2hvbGQ6IDEwLFxuICAgICAgICBwb2ludGVyczogMSxcbiAgICAgICAgZGlyZWN0aW9uOiBESVJFQ1RJT05fQUxMXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247XG4gICAgICAgIHZhciBhY3Rpb25zID0gW107XG4gICAgICAgIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKFRPVUNIX0FDVElPTl9QQU5fWSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9WRVJUSUNBTCkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKFRPVUNIX0FDVElPTl9QQU5fWCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGlvbnM7XG4gICAgfSxcblxuICAgIGRpcmVjdGlvblRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB2YXIgaGFzTW92ZWQgPSB0cnVlO1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBpbnB1dC5kaXN0YW5jZTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlucHV0LmRpcmVjdGlvbjtcbiAgICAgICAgdmFyIHggPSBpbnB1dC5kZWx0YVg7XG4gICAgICAgIHZhciB5ID0gaW5wdXQuZGVsdGFZO1xuXG4gICAgICAgIC8vIGxvY2sgdG8gYXhpcz9cbiAgICAgICAgaWYgKCEoZGlyZWN0aW9uICYgb3B0aW9ucy5kaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICh4ID09PSAwKSA/IERJUkVDVElPTl9OT05FIDogKHggPCAwKSA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUO1xuICAgICAgICAgICAgICAgIGhhc01vdmVkID0geCAhPSB0aGlzLnBYO1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoaW5wdXQuZGVsdGFYKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gKHkgPT09IDApID8gRElSRUNUSU9OX05PTkUgOiAoeSA8IDApID8gRElSRUNUSU9OX1VQIDogRElSRUNUSU9OX0RPV047XG4gICAgICAgICAgICAgICAgaGFzTW92ZWQgPSB5ICE9IHRoaXMucFk7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhpbnB1dC5kZWx0YVkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlucHV0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICAgICAgcmV0dXJuIGhhc01vdmVkICYmIGRpc3RhbmNlID4gb3B0aW9ucy50aHJlc2hvbGQgJiYgZGlyZWN0aW9uICYgb3B0aW9ucy5kaXJlY3Rpb247XG4gICAgfSxcblxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gQXR0clJlY29nbml6ZXIucHJvdG90eXBlLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXG4gICAgICAgICAgICAodGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOIHx8ICghKHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTikgJiYgdGhpcy5kaXJlY3Rpb25UZXN0KGlucHV0KSkpO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuXG4gICAgICAgIHRoaXMucFggPSBpbnB1dC5kZWx0YVg7XG4gICAgICAgIHRoaXMucFkgPSBpbnB1dC5kZWx0YVk7XG5cbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGRpcmVjdGlvblN0cihpbnB1dC5kaXJlY3Rpb24pO1xuXG4gICAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGlucHV0LmFkZGl0aW9uYWxFdmVudCA9IHRoaXMub3B0aW9ucy5ldmVudCArIGRpcmVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdXBlci5lbWl0LmNhbGwodGhpcywgaW5wdXQpO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFBpbmNoXG4gKiBSZWNvZ25pemVkIHdoZW4gdHdvIG9yIG1vcmUgcG9pbnRlcnMgYXJlIG1vdmluZyB0b3dhcmQgKHpvb20taW4pIG9yIGF3YXkgZnJvbSBlYWNoIG90aGVyICh6b29tLW91dCkuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFBpbmNoUmVjb2duaXplcigpIHtcbiAgICBBdHRyUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KFBpbmNoUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFBpbmNoUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAncGluY2gnLFxuICAgICAgICB0aHJlc2hvbGQ6IDAsXG4gICAgICAgIHBvaW50ZXJzOiAyXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fTk9ORV07XG4gICAgfSxcblxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3VwZXIuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiZcbiAgICAgICAgICAgIChNYXRoLmFicyhpbnB1dC5zY2FsZSAtIDEpID4gdGhpcy5vcHRpb25zLnRocmVzaG9sZCB8fCB0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4pO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQuc2NhbGUgIT09IDEpIHtcbiAgICAgICAgICAgIHZhciBpbk91dCA9IGlucHV0LnNjYWxlIDwgMSA/ICdpbicgOiAnb3V0JztcbiAgICAgICAgICAgIGlucHV0LmFkZGl0aW9uYWxFdmVudCA9IHRoaXMub3B0aW9ucy5ldmVudCArIGluT3V0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N1cGVyLmVtaXQuY2FsbCh0aGlzLCBpbnB1dCk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogUHJlc3NcbiAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBkb3duIGZvciB4IG1zIHdpdGhvdXQgYW55IG1vdmVtZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFByZXNzUmVjb2duaXplcigpIHtcbiAgICBSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLl90aW1lciA9IG51bGw7XG4gICAgdGhpcy5faW5wdXQgPSBudWxsO1xufVxuXG5pbmhlcml0KFByZXNzUmVjb2duaXplciwgUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUHJlc3NSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICdwcmVzcycsXG4gICAgICAgIHBvaW50ZXJzOiAxLFxuICAgICAgICB0aW1lOiAyNTEsIC8vIG1pbmltYWwgdGltZSBvZiB0aGUgcG9pbnRlciB0byBiZSBwcmVzc2VkXG4gICAgICAgIHRocmVzaG9sZDogOSAvLyBhIG1pbmltYWwgbW92ZW1lbnQgaXMgb2ssIGJ1dCBrZWVwIGl0IGxvd1xuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX0FVVE9dO1xuICAgIH0sXG5cbiAgICBwcm9jZXNzOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgdmFyIHZhbGlkUG9pbnRlcnMgPSBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvbnMucG9pbnRlcnM7XG4gICAgICAgIHZhciB2YWxpZE1vdmVtZW50ID0gaW5wdXQuZGlzdGFuY2UgPCBvcHRpb25zLnRocmVzaG9sZDtcbiAgICAgICAgdmFyIHZhbGlkVGltZSA9IGlucHV0LmRlbHRhVGltZSA+IG9wdGlvbnMudGltZTtcblxuICAgICAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuXG4gICAgICAgIC8vIHdlIG9ubHkgYWxsb3cgbGl0dGxlIG1vdmVtZW50XG4gICAgICAgIC8vIGFuZCB3ZSd2ZSByZWFjaGVkIGFuIGVuZCBldmVudCwgc28gYSB0YXAgaXMgcG9zc2libGVcbiAgICAgICAgaWYgKCF2YWxpZE1vdmVtZW50IHx8ICF2YWxpZFBvaW50ZXJzIHx8IChpbnB1dC5ldmVudFR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSAmJiAhdmFsaWRUaW1lKSkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX1NUQVJUKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXRDb250ZXh0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9SRUNPR05JWkVEO1xuICAgICAgICAgICAgICAgIHRoaXMudHJ5RW1pdCgpO1xuICAgICAgICAgICAgfSwgb3B0aW9ucy50aW1lLCB0aGlzKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9FTkQpIHtcbiAgICAgICAgICAgIHJldHVybiBTVEFURV9SRUNPR05JWkVEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfSxcblxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IFNUQVRFX1JFQ09HTklaRUQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnB1dCAmJiAoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfRU5EKSkge1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50ICsgJ3VwJywgaW5wdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faW5wdXQudGltZVN0YW1wID0gbm93KCk7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQsIHRoaXMuX2lucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG4vKipcbiAqIFJvdGF0ZVxuICogUmVjb2duaXplZCB3aGVuIHR3byBvciBtb3JlIHBvaW50ZXIgYXJlIG1vdmluZyBpbiBhIGNpcmN1bGFyIG1vdGlvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gUm90YXRlUmVjb2duaXplcigpIHtcbiAgICBBdHRyUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KFJvdGF0ZVJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBSb3RhdGVSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICdyb3RhdGUnLFxuICAgICAgICB0aHJlc2hvbGQ6IDAsXG4gICAgICAgIHBvaW50ZXJzOiAyXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fTk9ORV07XG4gICAgfSxcblxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3VwZXIuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiZcbiAgICAgICAgICAgIChNYXRoLmFicyhpbnB1dC5yb3RhdGlvbikgPiB0aGlzLm9wdGlvbnMudGhyZXNob2xkIHx8IHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTik7XG4gICAgfVxufSk7XG5cbi8qKlxuICogU3dpcGVcbiAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBtb3ZpbmcgZmFzdCAodmVsb2NpdHkpLCB3aXRoIGVub3VnaCBkaXN0YW5jZSBpbiB0aGUgYWxsb3dlZCBkaXJlY3Rpb24uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFN3aXBlUmVjb2duaXplcigpIHtcbiAgICBBdHRyUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KFN3aXBlUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFN3aXBlUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAnc3dpcGUnLFxuICAgICAgICB0aHJlc2hvbGQ6IDEwLFxuICAgICAgICB2ZWxvY2l0eTogMC4zLFxuICAgICAgICBkaXJlY3Rpb246IERJUkVDVElPTl9IT1JJWk9OVEFMIHwgRElSRUNUSU9OX1ZFUlRJQ0FMLFxuICAgICAgICBwb2ludGVyczogMVxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQYW5SZWNvZ25pemVyLnByb3RvdHlwZS5nZXRUb3VjaEFjdGlvbi5jYWxsKHRoaXMpO1xuICAgIH0sXG5cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247XG4gICAgICAgIHZhciB2ZWxvY2l0eTtcblxuICAgICAgICBpZiAoZGlyZWN0aW9uICYgKERJUkVDVElPTl9IT1JJWk9OVEFMIHwgRElSRUNUSU9OX1ZFUlRJQ0FMKSkge1xuICAgICAgICAgICAgdmVsb2NpdHkgPSBpbnB1dC5vdmVyYWxsVmVsb2NpdHk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gaW5wdXQub3ZlcmFsbFZlbG9jaXR5WDtcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fVkVSVElDQUwpIHtcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gaW5wdXQub3ZlcmFsbFZlbG9jaXR5WTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9zdXBlci5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJlxuICAgICAgICAgICAgZGlyZWN0aW9uICYgaW5wdXQub2Zmc2V0RGlyZWN0aW9uICYmXG4gICAgICAgICAgICBpbnB1dC5kaXN0YW5jZSA+IHRoaXMub3B0aW9ucy50aHJlc2hvbGQgJiZcbiAgICAgICAgICAgIGlucHV0Lm1heFBvaW50ZXJzID09IHRoaXMub3B0aW9ucy5wb2ludGVycyAmJlxuICAgICAgICAgICAgYWJzKHZlbG9jaXR5KSA+IHRoaXMub3B0aW9ucy52ZWxvY2l0eSAmJiBpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9FTkQ7XG4gICAgfSxcblxuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkaXJlY3Rpb25TdHIoaW5wdXQub2Zmc2V0RGlyZWN0aW9uKTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50ICsgZGlyZWN0aW9uLCBpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQsIGlucHV0KTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBBIHRhcCBpcyBlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBkb2luZyBhIHNtYWxsIHRhcC9jbGljay4gTXVsdGlwbGUgdGFwcyBhcmUgcmVjb2duaXplZCBpZiB0aGV5IG9jY3VyXG4gKiBiZXR3ZWVuIHRoZSBnaXZlbiBpbnRlcnZhbCBhbmQgcG9zaXRpb24uIFRoZSBkZWxheSBvcHRpb24gY2FuIGJlIHVzZWQgdG8gcmVjb2duaXplIG11bHRpLXRhcHMgd2l0aG91dCBmaXJpbmdcbiAqIGEgc2luZ2xlIHRhcC5cbiAqXG4gKiBUaGUgZXZlbnREYXRhIGZyb20gdGhlIGVtaXR0ZWQgZXZlbnQgY29udGFpbnMgdGhlIHByb3BlcnR5IGB0YXBDb3VudGAsIHdoaWNoIGNvbnRhaW5zIHRoZSBhbW91bnQgb2ZcbiAqIG11bHRpLXRhcHMgYmVpbmcgcmVjb2duaXplZC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBUYXBSZWNvZ25pemVyKCkge1xuICAgIFJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIC8vIHByZXZpb3VzIHRpbWUgYW5kIGNlbnRlcixcbiAgICAvLyB1c2VkIGZvciB0YXAgY291bnRpbmdcbiAgICB0aGlzLnBUaW1lID0gZmFsc2U7XG4gICAgdGhpcy5wQ2VudGVyID0gZmFsc2U7XG5cbiAgICB0aGlzLl90aW1lciA9IG51bGw7XG4gICAgdGhpcy5faW5wdXQgPSBudWxsO1xuICAgIHRoaXMuY291bnQgPSAwO1xufVxuXG5pbmhlcml0KFRhcFJlY29nbml6ZXIsIFJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFBpbmNoUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAndGFwJyxcbiAgICAgICAgcG9pbnRlcnM6IDEsXG4gICAgICAgIHRhcHM6IDEsXG4gICAgICAgIGludGVydmFsOiAzMDAsIC8vIG1heCB0aW1lIGJldHdlZW4gdGhlIG11bHRpLXRhcCB0YXBzXG4gICAgICAgIHRpbWU6IDI1MCwgLy8gbWF4IHRpbWUgb2YgdGhlIHBvaW50ZXIgdG8gYmUgZG93biAobGlrZSBmaW5nZXIgb24gdGhlIHNjcmVlbilcbiAgICAgICAgdGhyZXNob2xkOiA5LCAvLyBhIG1pbmltYWwgbW92ZW1lbnQgaXMgb2ssIGJ1dCBrZWVwIGl0IGxvd1xuICAgICAgICBwb3NUaHJlc2hvbGQ6IDEwIC8vIGEgbXVsdGktdGFwIGNhbiBiZSBhIGJpdCBvZmYgdGhlIGluaXRpYWwgcG9zaXRpb25cbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9NQU5JUFVMQVRJT05dO1xuICAgIH0sXG5cbiAgICBwcm9jZXNzOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICB2YXIgdmFsaWRQb2ludGVycyA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gb3B0aW9ucy5wb2ludGVycztcbiAgICAgICAgdmFyIHZhbGlkTW92ZW1lbnQgPSBpbnB1dC5kaXN0YW5jZSA8IG9wdGlvbnMudGhyZXNob2xkO1xuICAgICAgICB2YXIgdmFsaWRUb3VjaFRpbWUgPSBpbnB1dC5kZWx0YVRpbWUgPCBvcHRpb25zLnRpbWU7XG5cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgIGlmICgoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQpICYmICh0aGlzLmNvdW50ID09PSAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFpbFRpbWVvdXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdlIG9ubHkgYWxsb3cgbGl0dGxlIG1vdmVtZW50XG4gICAgICAgIC8vIGFuZCB3ZSd2ZSByZWFjaGVkIGFuIGVuZCBldmVudCwgc28gYSB0YXAgaXMgcG9zc2libGVcbiAgICAgICAgaWYgKHZhbGlkTW92ZW1lbnQgJiYgdmFsaWRUb3VjaFRpbWUgJiYgdmFsaWRQb2ludGVycykge1xuICAgICAgICAgICAgaWYgKGlucHV0LmV2ZW50VHlwZSAhPSBJTlBVVF9FTkQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mYWlsVGltZW91dCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdmFsaWRJbnRlcnZhbCA9IHRoaXMucFRpbWUgPyAoaW5wdXQudGltZVN0YW1wIC0gdGhpcy5wVGltZSA8IG9wdGlvbnMuaW50ZXJ2YWwpIDogdHJ1ZTtcbiAgICAgICAgICAgIHZhciB2YWxpZE11bHRpVGFwID0gIXRoaXMucENlbnRlciB8fCBnZXREaXN0YW5jZSh0aGlzLnBDZW50ZXIsIGlucHV0LmNlbnRlcikgPCBvcHRpb25zLnBvc1RocmVzaG9sZDtcblxuICAgICAgICAgICAgdGhpcy5wVGltZSA9IGlucHV0LnRpbWVTdGFtcDtcbiAgICAgICAgICAgIHRoaXMucENlbnRlciA9IGlucHV0LmNlbnRlcjtcblxuICAgICAgICAgICAgaWYgKCF2YWxpZE11bHRpVGFwIHx8ICF2YWxpZEludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudCA9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgKz0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcblxuICAgICAgICAgICAgLy8gaWYgdGFwIGNvdW50IG1hdGNoZXMgd2UgaGF2ZSByZWNvZ25pemVkIGl0LFxuICAgICAgICAgICAgLy8gZWxzZSBpdCBoYXMgYmVnYW4gcmVjb2duaXppbmcuLi5cbiAgICAgICAgICAgIHZhciB0YXBDb3VudCA9IHRoaXMuY291bnQgJSBvcHRpb25zLnRhcHM7XG4gICAgICAgICAgICBpZiAodGFwQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBubyBmYWlsaW5nIHJlcXVpcmVtZW50cywgaW1tZWRpYXRlbHkgdHJpZ2dlciB0aGUgdGFwIGV2ZW50XG4gICAgICAgICAgICAgICAgLy8gb3Igd2FpdCBhcyBsb25nIGFzIHRoZSBtdWx0aXRhcCBpbnRlcnZhbCB0byB0cmlnZ2VyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc1JlcXVpcmVGYWlsdXJlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVEFURV9SRUNPR05JWkVEO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dENvbnRleHQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJ5RW1pdCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBvcHRpb25zLmludGVydmFsLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNUQVRFX0JFR0FOO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH0sXG5cbiAgICBmYWlsVGltZW91dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dENvbnRleHQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfRkFJTEVEO1xuICAgICAgICB9LCB0aGlzLm9wdGlvbnMuaW50ZXJ2YWwsIHRoaXMpO1xuICAgICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH0sXG5cbiAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gICAgfSxcblxuICAgIGVtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PSBTVEFURV9SRUNPR05JWkVEKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dC50YXBDb3VudCA9IHRoaXMuY291bnQ7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQsIHRoaXMuX2lucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG4vKipcbiAqIFNpbXBsZSB3YXkgdG8gY3JlYXRlIGEgbWFuYWdlciB3aXRoIGEgZGVmYXVsdCBzZXQgb2YgcmVjb2duaXplcnMuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSGFtbWVyKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnJlY29nbml6ZXJzID0gaWZVbmRlZmluZWQob3B0aW9ucy5yZWNvZ25pemVycywgSGFtbWVyLmRlZmF1bHRzLnByZXNldCk7XG4gICAgcmV0dXJuIG5ldyBNYW5hZ2VyKGVsZW1lbnQsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIEBjb25zdCB7c3RyaW5nfVxuICovXG5IYW1tZXIuVkVSU0lPTiA9ICcyLjAuNyc7XG5cbi8qKlxuICogZGVmYXVsdCBzZXR0aW5nc1xuICogQG5hbWVzcGFjZVxuICovXG5IYW1tZXIuZGVmYXVsdHMgPSB7XG4gICAgLyoqXG4gICAgICogc2V0IGlmIERPTSBldmVudHMgYXJlIGJlaW5nIHRyaWdnZXJlZC5cbiAgICAgKiBCdXQgdGhpcyBpcyBzbG93ZXIgYW5kIHVudXNlZCBieSBzaW1wbGUgaW1wbGVtZW50YXRpb25zLCBzbyBkaXNhYmxlZCBieSBkZWZhdWx0LlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgZG9tRXZlbnRzOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBmb3IgdGhlIHRvdWNoQWN0aW9uIHByb3BlcnR5L2ZhbGxiYWNrLlxuICAgICAqIFdoZW4gc2V0IHRvIGBjb21wdXRlYCBpdCB3aWxsIG1hZ2ljYWxseSBzZXQgdGhlIGNvcnJlY3QgdmFsdWUgYmFzZWQgb24gdGhlIGFkZGVkIHJlY29nbml6ZXJzLlxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQGRlZmF1bHQgY29tcHV0ZVxuICAgICAqL1xuICAgIHRvdWNoQWN0aW9uOiBUT1VDSF9BQ1RJT05fQ09NUFVURSxcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBlbmFibGU6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBFWFBFUklNRU5UQUwgRkVBVFVSRSAtLSBjYW4gYmUgcmVtb3ZlZC9jaGFuZ2VkXG4gICAgICogQ2hhbmdlIHRoZSBwYXJlbnQgaW5wdXQgdGFyZ2V0IGVsZW1lbnQuXG4gICAgICogSWYgTnVsbCwgdGhlbiBpdCBpcyBiZWluZyBzZXQgdGhlIHRvIG1haW4gZWxlbWVudC5cbiAgICAgKiBAdHlwZSB7TnVsbHxFdmVudFRhcmdldH1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgaW5wdXRUYXJnZXQ6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBmb3JjZSBhbiBpbnB1dCBjbGFzc1xuICAgICAqIEB0eXBlIHtOdWxsfEZ1bmN0aW9ufVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBpbnB1dENsYXNzOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCByZWNvZ25pemVyIHNldHVwIHdoZW4gY2FsbGluZyBgSGFtbWVyKClgXG4gICAgICogV2hlbiBjcmVhdGluZyBhIG5ldyBNYW5hZ2VyIHRoZXNlIHdpbGwgYmUgc2tpcHBlZC5cbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgcHJlc2V0OiBbXG4gICAgICAgIC8vIFJlY29nbml6ZXJDbGFzcywgb3B0aW9ucywgW3JlY29nbml6ZVdpdGgsIC4uLl0sIFtyZXF1aXJlRmFpbHVyZSwgLi4uXVxuICAgICAgICBbUm90YXRlUmVjb2duaXplciwge2VuYWJsZTogZmFsc2V9XSxcbiAgICAgICAgW1BpbmNoUmVjb2duaXplciwge2VuYWJsZTogZmFsc2V9LCBbJ3JvdGF0ZSddXSxcbiAgICAgICAgW1N3aXBlUmVjb2duaXplciwge2RpcmVjdGlvbjogRElSRUNUSU9OX0hPUklaT05UQUx9XSxcbiAgICAgICAgW1BhblJlY29nbml6ZXIsIHtkaXJlY3Rpb246IERJUkVDVElPTl9IT1JJWk9OVEFMfSwgWydzd2lwZSddXSxcbiAgICAgICAgW1RhcFJlY29nbml6ZXJdLFxuICAgICAgICBbVGFwUmVjb2duaXplciwge2V2ZW50OiAnZG91YmxldGFwJywgdGFwczogMn0sIFsndGFwJ11dLFxuICAgICAgICBbUHJlc3NSZWNvZ25pemVyXVxuICAgIF0sXG5cbiAgICAvKipcbiAgICAgKiBTb21lIENTUyBwcm9wZXJ0aWVzIGNhbiBiZSB1c2VkIHRvIGltcHJvdmUgdGhlIHdvcmtpbmcgb2YgSGFtbWVyLlxuICAgICAqIEFkZCB0aGVtIHRvIHRoaXMgbWV0aG9kIGFuZCB0aGV5IHdpbGwgYmUgc2V0IHdoZW4gY3JlYXRpbmcgYSBuZXcgTWFuYWdlci5cbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICovXG4gICAgY3NzUHJvcHM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGVzIHRleHQgc2VsZWN0aW9uIHRvIGltcHJvdmUgdGhlIGRyYWdnaW5nIGdlc3R1cmUuIE1haW5seSBmb3IgZGVza3RvcCBicm93c2Vycy5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGUgdGhlIFdpbmRvd3MgUGhvbmUgZ3JpcHBlcnMgd2hlbiBwcmVzc2luZyBhbiBlbGVtZW50LlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIHRvdWNoU2VsZWN0OiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGVzIHRoZSBkZWZhdWx0IGNhbGxvdXQgc2hvd24gd2hlbiB5b3UgdG91Y2ggYW5kIGhvbGQgYSB0b3VjaCB0YXJnZXQuXG4gICAgICAgICAqIE9uIGlPUywgd2hlbiB5b3UgdG91Y2ggYW5kIGhvbGQgYSB0b3VjaCB0YXJnZXQgc3VjaCBhcyBhIGxpbmssIFNhZmFyaSBkaXNwbGF5c1xuICAgICAgICAgKiBhIGNhbGxvdXQgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbGluay4gVGhpcyBwcm9wZXJ0eSBhbGxvd3MgeW91IHRvIGRpc2FibGUgdGhhdCBjYWxsb3V0LlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIHRvdWNoQ2FsbG91dDogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB6b29taW5nIGlzIGVuYWJsZWQuIFVzZWQgYnkgSUUxMD5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICBjb250ZW50Wm9vbWluZzogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpZXMgdGhhdCBhbiBlbnRpcmUgZWxlbWVudCBzaG91bGQgYmUgZHJhZ2dhYmxlIGluc3RlYWQgb2YgaXRzIGNvbnRlbnRzLiBNYWlubHkgZm9yIGRlc2t0b3AgYnJvd3NlcnMuXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgdXNlckRyYWc6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogT3ZlcnJpZGVzIHRoZSBoaWdobGlnaHQgY29sb3Igc2hvd24gd2hlbiB0aGUgdXNlciB0YXBzIGEgbGluayBvciBhIEphdmFTY3JpcHRcbiAgICAgICAgICogY2xpY2thYmxlIGVsZW1lbnQgaW4gaU9TLiBUaGlzIHByb3BlcnR5IG9iZXlzIHRoZSBhbHBoYSB2YWx1ZSwgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAncmdiYSgwLDAsMCwwKSdcbiAgICAgICAgICovXG4gICAgICAgIHRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLDAsMCwwKSdcbiAgICB9XG59O1xuXG52YXIgU1RPUCA9IDE7XG52YXIgRk9SQ0VEX1NUT1AgPSAyO1xuXG4vKipcbiAqIE1hbmFnZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNYW5hZ2VyKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBhc3NpZ24oe30sIEhhbW1lci5kZWZhdWx0cywgb3B0aW9ucyB8fCB7fSk7XG5cbiAgICB0aGlzLm9wdGlvbnMuaW5wdXRUYXJnZXQgPSB0aGlzLm9wdGlvbnMuaW5wdXRUYXJnZXQgfHwgZWxlbWVudDtcblxuICAgIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICB0aGlzLnNlc3Npb24gPSB7fTtcbiAgICB0aGlzLnJlY29nbml6ZXJzID0gW107XG4gICAgdGhpcy5vbGRDc3NQcm9wcyA9IHt9O1xuXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmlucHV0ID0gY3JlYXRlSW5wdXRJbnN0YW5jZSh0aGlzKTtcbiAgICB0aGlzLnRvdWNoQWN0aW9uID0gbmV3IFRvdWNoQWN0aW9uKHRoaXMsIHRoaXMub3B0aW9ucy50b3VjaEFjdGlvbik7XG5cbiAgICB0b2dnbGVDc3NQcm9wcyh0aGlzLCB0cnVlKTtcblxuICAgIGVhY2godGhpcy5vcHRpb25zLnJlY29nbml6ZXJzLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHZhciByZWNvZ25pemVyID0gdGhpcy5hZGQobmV3IChpdGVtWzBdKShpdGVtWzFdKSk7XG4gICAgICAgIGl0ZW1bMl0gJiYgcmVjb2duaXplci5yZWNvZ25pemVXaXRoKGl0ZW1bMl0pO1xuICAgICAgICBpdGVtWzNdICYmIHJlY29nbml6ZXIucmVxdWlyZUZhaWx1cmUoaXRlbVszXSk7XG4gICAgfSwgdGhpcyk7XG59XG5cbk1hbmFnZXIucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHNldCBvcHRpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7TWFuYWdlcn1cbiAgICAgKi9cbiAgICBzZXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gT3B0aW9ucyB0aGF0IG5lZWQgYSBsaXR0bGUgbW9yZSBzZXR1cFxuICAgICAgICBpZiAob3B0aW9ucy50b3VjaEFjdGlvbikge1xuICAgICAgICAgICAgdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pbnB1dFRhcmdldCkge1xuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgZXhpc3RpbmcgZXZlbnQgbGlzdGVuZXJzIGFuZCByZWluaXRpYWxpemVcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5pbnB1dC50YXJnZXQgPSBvcHRpb25zLmlucHV0VGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy5pbnB1dC5pbml0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHN0b3AgcmVjb2duaXppbmcgZm9yIHRoaXMgc2Vzc2lvbi5cbiAgICAgKiBUaGlzIHNlc3Npb24gd2lsbCBiZSBkaXNjYXJkZWQsIHdoZW4gYSBuZXcgW2lucHV0XXN0YXJ0IGV2ZW50IGlzIGZpcmVkLlxuICAgICAqIFdoZW4gZm9yY2VkLCB0aGUgcmVjb2duaXplciBjeWNsZSBpcyBzdG9wcGVkIGltbWVkaWF0ZWx5LlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ZvcmNlXVxuICAgICAqL1xuICAgIHN0b3A6IGZ1bmN0aW9uKGZvcmNlKSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvbi5zdG9wcGVkID0gZm9yY2UgPyBGT1JDRURfU1RPUCA6IFNUT1A7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJ1biB0aGUgcmVjb2duaXplcnMhXG4gICAgICogY2FsbGVkIGJ5IHRoZSBpbnB1dEhhbmRsZXIgZnVuY3Rpb24gb24gZXZlcnkgbW92ZW1lbnQgb2YgdGhlIHBvaW50ZXJzICh0b3VjaGVzKVxuICAgICAqIGl0IHdhbGtzIHRocm91Z2ggYWxsIHRoZSByZWNvZ25pemVycyBhbmQgdHJpZXMgdG8gZGV0ZWN0IHRoZSBnZXN0dXJlIHRoYXQgaXMgYmVpbmcgbWFkZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcbiAgICAgKi9cbiAgICByZWNvZ25pemU6IGZ1bmN0aW9uKGlucHV0RGF0YSkge1xuICAgICAgICB2YXIgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbjtcbiAgICAgICAgaWYgKHNlc3Npb24uc3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcnVuIHRoZSB0b3VjaC1hY3Rpb24gcG9seWZpbGxcbiAgICAgICAgdGhpcy50b3VjaEFjdGlvbi5wcmV2ZW50RGVmYXVsdHMoaW5wdXREYXRhKTtcblxuICAgICAgICB2YXIgcmVjb2duaXplcjtcbiAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcblxuICAgICAgICAvLyB0aGlzIGhvbGRzIHRoZSByZWNvZ25pemVyIHRoYXQgaXMgYmVpbmcgcmVjb2duaXplZC5cbiAgICAgICAgLy8gc28gdGhlIHJlY29nbml6ZXIncyBzdGF0ZSBuZWVkcyB0byBiZSBCRUdBTiwgQ0hBTkdFRCwgRU5ERUQgb3IgUkVDT0dOSVpFRFxuICAgICAgICAvLyBpZiBubyByZWNvZ25pemVyIGlzIGRldGVjdGluZyBhIHRoaW5nLCBpdCBpcyBzZXQgdG8gYG51bGxgXG4gICAgICAgIHZhciBjdXJSZWNvZ25pemVyID0gc2Vzc2lvbi5jdXJSZWNvZ25pemVyO1xuXG4gICAgICAgIC8vIHJlc2V0IHdoZW4gdGhlIGxhc3QgcmVjb2duaXplciBpcyByZWNvZ25pemVkXG4gICAgICAgIC8vIG9yIHdoZW4gd2UncmUgaW4gYSBuZXcgc2Vzc2lvblxuICAgICAgICBpZiAoIWN1clJlY29nbml6ZXIgfHwgKGN1clJlY29nbml6ZXIgJiYgY3VyUmVjb2duaXplci5zdGF0ZSAmIFNUQVRFX1JFQ09HTklaRUQpKSB7XG4gICAgICAgICAgICBjdXJSZWNvZ25pemVyID0gc2Vzc2lvbi5jdXJSZWNvZ25pemVyID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCByZWNvZ25pemVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlY29nbml6ZXIgPSByZWNvZ25pemVyc1tpXTtcblxuICAgICAgICAgICAgLy8gZmluZCBvdXQgaWYgd2UgYXJlIGFsbG93ZWQgdHJ5IHRvIHJlY29nbml6ZSB0aGUgaW5wdXQgZm9yIHRoaXMgb25lLlxuICAgICAgICAgICAgLy8gMS4gICBhbGxvdyBpZiB0aGUgc2Vzc2lvbiBpcyBOT1QgZm9yY2VkIHN0b3BwZWQgKHNlZSB0aGUgLnN0b3AoKSBtZXRob2QpXG4gICAgICAgICAgICAvLyAyLiAgIGFsbG93IGlmIHdlIHN0aWxsIGhhdmVuJ3QgcmVjb2duaXplZCBhIGdlc3R1cmUgaW4gdGhpcyBzZXNzaW9uLCBvciB0aGUgdGhpcyByZWNvZ25pemVyIGlzIHRoZSBvbmVcbiAgICAgICAgICAgIC8vICAgICAgdGhhdCBpcyBiZWluZyByZWNvZ25pemVkLlxuICAgICAgICAgICAgLy8gMy4gICBhbGxvdyBpZiB0aGUgcmVjb2duaXplciBpcyBhbGxvd2VkIHRvIHJ1biBzaW11bHRhbmVvdXMgd2l0aCB0aGUgY3VycmVudCByZWNvZ25pemVkIHJlY29nbml6ZXIuXG4gICAgICAgICAgICAvLyAgICAgIHRoaXMgY2FuIGJlIHNldHVwIHdpdGggdGhlIGByZWNvZ25pemVXaXRoKClgIG1ldGhvZCBvbiB0aGUgcmVjb2duaXplci5cbiAgICAgICAgICAgIGlmIChzZXNzaW9uLnN0b3BwZWQgIT09IEZPUkNFRF9TVE9QICYmICggLy8gMVxuICAgICAgICAgICAgICAgICAgICAhY3VyUmVjb2duaXplciB8fCByZWNvZ25pemVyID09IGN1clJlY29nbml6ZXIgfHwgLy8gMlxuICAgICAgICAgICAgICAgICAgICByZWNvZ25pemVyLmNhblJlY29nbml6ZVdpdGgoY3VyUmVjb2duaXplcikpKSB7IC8vIDNcbiAgICAgICAgICAgICAgICByZWNvZ25pemVyLnJlY29nbml6ZShpbnB1dERhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWNvZ25pemVyLnJlc2V0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZSByZWNvZ25pemVyIGhhcyBiZWVuIHJlY29nbml6aW5nIHRoZSBpbnB1dCBhcyBhIHZhbGlkIGdlc3R1cmUsIHdlIHdhbnQgdG8gc3RvcmUgdGhpcyBvbmUgYXMgdGhlXG4gICAgICAgICAgICAvLyBjdXJyZW50IGFjdGl2ZSByZWNvZ25pemVyLiBidXQgb25seSBpZiB3ZSBkb24ndCBhbHJlYWR5IGhhdmUgYW4gYWN0aXZlIHJlY29nbml6ZXJcbiAgICAgICAgICAgIGlmICghY3VyUmVjb2duaXplciAmJiByZWNvZ25pemVyLnN0YXRlICYgKFNUQVRFX0JFR0FOIHwgU1RBVEVfQ0hBTkdFRCB8IFNUQVRFX0VOREVEKSkge1xuICAgICAgICAgICAgICAgIGN1clJlY29nbml6ZXIgPSBzZXNzaW9uLmN1clJlY29nbml6ZXIgPSByZWNvZ25pemVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGdldCBhIHJlY29nbml6ZXIgYnkgaXRzIGV2ZW50IG5hbWUuXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfFN0cmluZ30gcmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfE51bGx9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbihyZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChyZWNvZ25pemVyIGluc3RhbmNlb2YgUmVjb2duaXplcikge1xuICAgICAgICAgICAgcmV0dXJuIHJlY29nbml6ZXI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVjb2duaXplcnMgPSB0aGlzLnJlY29nbml6ZXJzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlY29nbml6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAocmVjb2duaXplcnNbaV0ub3B0aW9ucy5ldmVudCA9PSByZWNvZ25pemVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29nbml6ZXJzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBhZGQgYSByZWNvZ25pemVyIHRvIHRoZSBtYW5hZ2VyXG4gICAgICogZXhpc3RpbmcgcmVjb2duaXplcnMgd2l0aCB0aGUgc2FtZSBldmVudCBuYW1lIHdpbGwgYmUgcmVtb3ZlZFxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gcmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfE1hbmFnZXJ9XG4gICAgICovXG4gICAgYWRkOiBmdW5jdGlvbihyZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhyZWNvZ25pemVyLCAnYWRkJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVtb3ZlIGV4aXN0aW5nXG4gICAgICAgIHZhciBleGlzdGluZyA9IHRoaXMuZ2V0KHJlY29nbml6ZXIub3B0aW9ucy5ldmVudCk7XG4gICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoZXhpc3RpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZWNvZ25pemVycy5wdXNoKHJlY29nbml6ZXIpO1xuICAgICAgICByZWNvZ25pemVyLm1hbmFnZXIgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMudG91Y2hBY3Rpb24udXBkYXRlKCk7XG4gICAgICAgIHJldHVybiByZWNvZ25pemVyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZW1vdmUgYSByZWNvZ25pemVyIGJ5IG5hbWUgb3IgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ8U3RyaW5nfSByZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge01hbmFnZXJ9XG4gICAgICovXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihyZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhyZWNvZ25pemVyLCAncmVtb3ZlJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVjb2duaXplciA9IHRoaXMuZ2V0KHJlY29nbml6ZXIpO1xuXG4gICAgICAgIC8vIGxldCdzIG1ha2Ugc3VyZSB0aGlzIHJlY29nbml6ZXIgZXhpc3RzXG4gICAgICAgIGlmIChyZWNvZ25pemVyKSB7XG4gICAgICAgICAgICB2YXIgcmVjb2duaXplcnMgPSB0aGlzLnJlY29nbml6ZXJzO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gaW5BcnJheShyZWNvZ25pemVycywgcmVjb2duaXplcik7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZWNvZ25pemVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMudG91Y2hBY3Rpb24udXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYmluZCBldmVudFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAgICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gdGhpc1xuICAgICAqL1xuICAgIG9uOiBmdW5jdGlvbihldmVudHMsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycztcbiAgICAgICAgZWFjaChzcGxpdFN0cihldmVudHMpLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaGFuZGxlcnNbZXZlbnRdID0gaGFuZGxlcnNbZXZlbnRdIHx8IFtdO1xuICAgICAgICAgICAgaGFuZGxlcnNbZXZlbnRdLnB1c2goaGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdW5iaW5kIGV2ZW50LCBsZWF2ZSBlbWl0IGJsYW5rIHRvIHJlbW92ZSBhbGwgaGFuZGxlcnNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2hhbmRsZXJdXG4gICAgICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gdGhpc1xuICAgICAqL1xuICAgIG9mZjogZnVuY3Rpb24oZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycztcbiAgICAgICAgZWFjaChzcGxpdFN0cihldmVudHMpLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKCFoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGhhbmRsZXJzW2V2ZW50XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnNbZXZlbnRdICYmIGhhbmRsZXJzW2V2ZW50XS5zcGxpY2UoaW5BcnJheShoYW5kbGVyc1tldmVudF0sIGhhbmRsZXIpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBlbWl0IGV2ZW50IHRvIHRoZSBsaXN0ZW5lcnNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIGVtaXQ6IGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgIC8vIHdlIGFsc28gd2FudCB0byB0cmlnZ2VyIGRvbSBldmVudHNcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kb21FdmVudHMpIHtcbiAgICAgICAgICAgIHRyaWdnZXJEb21FdmVudChldmVudCwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBubyBoYW5kbGVycywgc28gc2tpcCBpdCBhbGxcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc1tldmVudF0gJiYgdGhpcy5oYW5kbGVyc1tldmVudF0uc2xpY2UoKTtcbiAgICAgICAgaWYgKCFoYW5kbGVycyB8fCAhaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhLnR5cGUgPSBldmVudDtcbiAgICAgICAgZGF0YS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZGF0YS5zcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGhhbmRsZXJzW2ldKGRhdGEpO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGRlc3Ryb3kgdGhlIG1hbmFnZXIgYW5kIHVuYmluZHMgYWxsIGV2ZW50c1xuICAgICAqIGl0IGRvZXNuJ3QgdW5iaW5kIGRvbSBldmVudHMsIHRoYXQgaXMgdGhlIHVzZXIgb3duIHJlc3BvbnNpYmlsaXR5XG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCAmJiB0b2dnbGVDc3NQcm9wcyh0aGlzLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuICAgICAgICB0aGlzLnNlc3Npb24gPSB7fTtcbiAgICAgICAgdGhpcy5pbnB1dC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgfVxufTtcblxuLyoqXG4gKiBhZGQvcmVtb3ZlIHRoZSBjc3MgcHJvcGVydGllcyBhcyBkZWZpbmVkIGluIG1hbmFnZXIub3B0aW9ucy5jc3NQcm9wc1xuICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGFkZFxuICovXG5mdW5jdGlvbiB0b2dnbGVDc3NQcm9wcyhtYW5hZ2VyLCBhZGQpIHtcbiAgICB2YXIgZWxlbWVudCA9IG1hbmFnZXIuZWxlbWVudDtcbiAgICBpZiAoIWVsZW1lbnQuc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcHJvcDtcbiAgICBlYWNoKG1hbmFnZXIub3B0aW9ucy5jc3NQcm9wcywgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgcHJvcCA9IHByZWZpeGVkKGVsZW1lbnQuc3R5bGUsIG5hbWUpO1xuICAgICAgICBpZiAoYWRkKSB7XG4gICAgICAgICAgICBtYW5hZ2VyLm9sZENzc1Byb3BzW3Byb3BdID0gZWxlbWVudC5zdHlsZVtwcm9wXTtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBtYW5hZ2VyLm9sZENzc1Byb3BzW3Byb3BdIHx8ICcnO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgbWFuYWdlci5vbGRDc3NQcm9wcyA9IHt9O1xuICAgIH1cbn1cblxuLyoqXG4gKiB0cmlnZ2VyIGRvbSBldmVudFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICovXG5mdW5jdGlvbiB0cmlnZ2VyRG9tRXZlbnQoZXZlbnQsIGRhdGEpIHtcbiAgICB2YXIgZ2VzdHVyZUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZ2VzdHVyZUV2ZW50LmluaXRFdmVudChldmVudCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgZ2VzdHVyZUV2ZW50Lmdlc3R1cmUgPSBkYXRhO1xuICAgIGRhdGEudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZ2VzdHVyZUV2ZW50KTtcbn1cblxuYXNzaWduKEhhbW1lciwge1xuICAgIElOUFVUX1NUQVJUOiBJTlBVVF9TVEFSVCxcbiAgICBJTlBVVF9NT1ZFOiBJTlBVVF9NT1ZFLFxuICAgIElOUFVUX0VORDogSU5QVVRfRU5ELFxuICAgIElOUFVUX0NBTkNFTDogSU5QVVRfQ0FOQ0VMLFxuXG4gICAgU1RBVEVfUE9TU0lCTEU6IFNUQVRFX1BPU1NJQkxFLFxuICAgIFNUQVRFX0JFR0FOOiBTVEFURV9CRUdBTixcbiAgICBTVEFURV9DSEFOR0VEOiBTVEFURV9DSEFOR0VELFxuICAgIFNUQVRFX0VOREVEOiBTVEFURV9FTkRFRCxcbiAgICBTVEFURV9SRUNPR05JWkVEOiBTVEFURV9SRUNPR05JWkVELFxuICAgIFNUQVRFX0NBTkNFTExFRDogU1RBVEVfQ0FOQ0VMTEVELFxuICAgIFNUQVRFX0ZBSUxFRDogU1RBVEVfRkFJTEVELFxuXG4gICAgRElSRUNUSU9OX05PTkU6IERJUkVDVElPTl9OT05FLFxuICAgIERJUkVDVElPTl9MRUZUOiBESVJFQ1RJT05fTEVGVCxcbiAgICBESVJFQ1RJT05fUklHSFQ6IERJUkVDVElPTl9SSUdIVCxcbiAgICBESVJFQ1RJT05fVVA6IERJUkVDVElPTl9VUCxcbiAgICBESVJFQ1RJT05fRE9XTjogRElSRUNUSU9OX0RPV04sXG4gICAgRElSRUNUSU9OX0hPUklaT05UQUw6IERJUkVDVElPTl9IT1JJWk9OVEFMLFxuICAgIERJUkVDVElPTl9WRVJUSUNBTDogRElSRUNUSU9OX1ZFUlRJQ0FMLFxuICAgIERJUkVDVElPTl9BTEw6IERJUkVDVElPTl9BTEwsXG5cbiAgICBNYW5hZ2VyOiBNYW5hZ2VyLFxuICAgIElucHV0OiBJbnB1dCxcbiAgICBUb3VjaEFjdGlvbjogVG91Y2hBY3Rpb24sXG5cbiAgICBUb3VjaElucHV0OiBUb3VjaElucHV0LFxuICAgIE1vdXNlSW5wdXQ6IE1vdXNlSW5wdXQsXG4gICAgUG9pbnRlckV2ZW50SW5wdXQ6IFBvaW50ZXJFdmVudElucHV0LFxuICAgIFRvdWNoTW91c2VJbnB1dDogVG91Y2hNb3VzZUlucHV0LFxuICAgIFNpbmdsZVRvdWNoSW5wdXQ6IFNpbmdsZVRvdWNoSW5wdXQsXG5cbiAgICBSZWNvZ25pemVyOiBSZWNvZ25pemVyLFxuICAgIEF0dHJSZWNvZ25pemVyOiBBdHRyUmVjb2duaXplcixcbiAgICBUYXA6IFRhcFJlY29nbml6ZXIsXG4gICAgUGFuOiBQYW5SZWNvZ25pemVyLFxuICAgIFN3aXBlOiBTd2lwZVJlY29nbml6ZXIsXG4gICAgUGluY2g6IFBpbmNoUmVjb2duaXplcixcbiAgICBSb3RhdGU6IFJvdGF0ZVJlY29nbml6ZXIsXG4gICAgUHJlc3M6IFByZXNzUmVjb2duaXplcixcblxuICAgIG9uOiBhZGRFdmVudExpc3RlbmVycyxcbiAgICBvZmY6IHJlbW92ZUV2ZW50TGlzdGVuZXJzLFxuICAgIGVhY2g6IGVhY2gsXG4gICAgbWVyZ2U6IG1lcmdlLFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIGFzc2lnbjogYXNzaWduLFxuICAgIGluaGVyaXQ6IGluaGVyaXQsXG4gICAgYmluZEZuOiBiaW5kRm4sXG4gICAgcHJlZml4ZWQ6IHByZWZpeGVkXG59KTtcblxuLy8gdGhpcyBwcmV2ZW50cyBlcnJvcnMgd2hlbiBIYW1tZXIgaXMgbG9hZGVkIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTURcbi8vICBzdHlsZSBsb2FkZXIgYnV0IGJ5IHNjcmlwdCB0YWcsIG5vdCBieSB0aGUgbG9hZGVyLlxudmFyIGZyZWVHbG9iYWwgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9KSk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuZnJlZUdsb2JhbC5IYW1tZXIgPSBIYW1tZXI7XG5cbmlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBIYW1tZXI7XG4gICAgfSk7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEhhbW1lcjtcbn0gZWxzZSB7XG4gICAgd2luZG93W2V4cG9ydE5hbWVdID0gSGFtbWVyO1xufVxuXG59KSh3aW5kb3csIGRvY3VtZW50LCAnSGFtbWVyJyk7XG5cbn0se31dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQXBwZWFyID0gZnVuY3Rpb24gQXBwZWFyKHBhcmFtcykge1xuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXBwZWFyKTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChwYXJhbXMuJGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55IDwgNzAgJiYgcGFyYW1zLiRjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueSA+IC1wYXJhbXMuJGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQpIHtcbiAgICAgIHBhcmFtcy4kYW5pbWF0ZS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChwYXJhbXMuYW5pbWF0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXMuJGFuaW1hdGUuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLmFuaW1hdGlvbik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHBlYXI7XG5cbn0se31dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgSGFtbWVyID0gcmVxdWlyZSgnaGFtbWVyanMnKTtcblxudmFyIENhcm91c2VsID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDYXJvdXNlbChwYXJhbXMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhcm91c2VsKTtcblxuICAgIHRoaXMuaW5kZXggPSAwO1xuXG4gICAgdGhpcy4kY29udHJvbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29sb3JzX19jb250cm9scycpO1xuICAgIHRoaXMuJGltYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb2xvcnNfX2ltYWdlQ29udGFpbmVyJyk7XG4gICAgdGhpcy4kaW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29sb3JzX19pbWFnZXMnKTtcbiAgICB0aGlzLiRkaWFtb25kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbG9yc19fZGlhbW9uZCcpO1xuICAgIHRoaXMuJGRpYW1vbmRUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbG9yc19fbnVtYmVyJyk7XG4gICAgdGhpcy4kdGV4dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29sb3JzX190ZXh0Q29udGFpbmVyJyk7XG5cbiAgICB0aGlzLnF1YW50aXR5ID0gdGhpcy4kaW1hZ2VzLmxlbmd0aDtcbiAgICB0aGlzLnN3aXBlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5jb2xvcnMgPSBbJyNGRkZGRkYnLCAnIzU2RkZBNycsICcjNTZGMEZGJywgJyNGRjcwMjknLCAnI0ZGRDUwMCddO1xuXG4gICAgdGhpcy5zd2lwZXMgPSBuZXcgSGFtbWVyKHRoaXMuJGltYWdlKTtcblxuICAgIHRoaXMuc3dpcGVzLm9uKCdwYW5sZWZ0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfdGhpcy5pbmRleCArIDEgPD0gX3RoaXMucXVhbnRpdHkgLSAxICYmIF90aGlzLnN3aXBlZCA9PSBmYWxzZSkge1xuICAgICAgICBfdGhpcy5pbmRleCsrO1xuICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5zd2lwZXMub24oJ3BhbnJpZ2h0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfdGhpcy5pbmRleCAtIDEgPj0gMCAmJiBfdGhpcy5zd2lwZWQgPT0gZmFsc2UpIHtcbiAgICAgICAgX3RoaXMuaW5kZXgtLTtcbiAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuY2hhbmdlU2xpZGUoKTtcblxuICAgIHRoaXMuJGNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2Fyb3VzZWwsIFt7XG4gICAga2V5OiAnY2hhbmdlU2xpZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VTbGlkZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLnN3aXBlZCA9IHRydWU7XG5cbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb2xvcnNfX2NvbnRyb2xzLS1hY3RpdmUnKS5jbGFzc0xpc3QucmVtb3ZlKCdjb2xvcnNfX2NvbnRyb2xzLS1hY3RpdmUnKTtcbiAgICAgIHRoaXMuJGNvbnRyb2xzW3RoaXMuaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2NvbG9yc19fY29udHJvbHMtLWFjdGl2ZScpO1xuXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29sb3JzX19pbWFnZUNvbnRhaW5lci0tYWN0aXZlJykuY2xhc3NMaXN0LnJlbW92ZSgnY29sb3JzX19pbWFnZUNvbnRhaW5lci0tYWN0aXZlJyk7XG4gICAgICB0aGlzLiRpbWFnZXNbdGhpcy5pbmRleF0uY2xhc3NMaXN0LmFkZCgnY29sb3JzX19pbWFnZUNvbnRhaW5lci0tYWN0aXZlJyk7XG5cbiAgICAgIHRoaXMuJGRpYW1vbmRUZXh0LmlubmVySFRNTCA9IHRoaXMuaW5kZXggKyAxO1xuXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29sb3JzX190ZXh0Q29udGFpbmVyLS1hY3RpdmUnKS5jbGFzc0xpc3QucmVtb3ZlKCdjb2xvcnNfX3RleHRDb250YWluZXItLWFjdGl2ZScpO1xuICAgICAgdGhpcy4kdGV4dHNbdGhpcy5pbmRleF0uY2xhc3NMaXN0LmFkZCgnY29sb3JzX190ZXh0Q29udGFpbmVyLS1hY3RpdmUnKTtcblxuICAgICAgdGhpcy4kZGlhbW9uZC5zdHlsZS5ib3JkZXJDb2xvciA9IHRoaXMuY29sb3JzW3RoaXMuaW5kZXhdO1xuXG4gICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zd2lwZWQgPSBmYWxzZTtcbiAgICAgIH0sIDE1MDApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDYXJvdXNlbDtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYXJvdXNlbDtcblxufSx7XCJoYW1tZXJqc1wiOjF9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFNjcm9sbEFwcGVhcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2Nyb2xsQXBwZWFyaW5nKHBhcmFtcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2Nyb2xsQXBwZWFyaW5nKTtcblxuICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgIHRoaXMuJGVsZW1lbnRzID0gbmV3IE9iamVjdCgpO1xuICAgIHRoaXMucmVmcmVzaFByb3BlcnRpZXMoKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgICB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuaW5pdCgpO1xuICAgIH0sIDUwMCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2Nyb2xsQXBwZWFyaW5nLCBbe1xuICAgIGtleTogJ2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdGhpcy5yZWZyZXNoUHJvcGVydGllcygpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuY2hlY2soKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVmcmVzaFByb3BlcnRpZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWZyZXNoUHJvcGVydGllcygpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRzLmhpZGRlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgdGhpcy5wYXJhbXMuaGlkZGVuKTtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NoZWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2soKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy4kZWxlbWVudHMuaGlkZGVuLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHRlbXBvcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgICBpZiAodGVtcG9zIC0gX3RoaXMyLmhlaWdodCA8PSAwKSBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UoX3RoaXMyLnBhcmFtcy5oaWRkZW4sIF90aGlzMi5wYXJhbXMuYXBwZWFyZWQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjcm9sbEFwcGVhcmluZztcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY3JvbGxBcHBlYXJpbmc7XG5cbn0se31dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU2Nyb2xsQXBwZWFyaW5nID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL3Njcm9sbGFwcGVhcmluZycpO1xudmFyIEFwcGVhciA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9hcHBlYXInKTtcbnZhciBDYXJvdXNlbCA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9jYXJvdXNlbCcpO1xuXG52YXIgYW5pbWF0aW9uID0gbmV3IFNjcm9sbEFwcGVhcmluZyh7XG4gIGhpZGRlbjogJ2hpZGRlbicsXG4gIGFwcGVhcmVkOiAnYXBwZWFyZWQnXG59KTtcblxudmFyIGFwcGVhcmluZyA9IG5ldyBBcHBlYXIoe1xuICAkY29udGFpbmVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYm94JyksXG4gICRhbmltYXRlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYmFja2dyb3VuZF9fY2lyY2xlJyksXG4gIGFuaW1hdGlvbjogJ29wYWNpdHknXG59KTtcblxudmFyIHNsaWRlciA9IG5ldyBDYXJvdXNlbCh7XG4gICRjb250YWluZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb2xvcnMnKVxufSk7XG5cbn0se1wiLi9jb21wb25lbnRzL2FwcGVhclwiOjIsXCIuL2NvbXBvbmVudHMvY2Fyb3VzZWxcIjozLFwiLi9jb21wb25lbnRzL3Njcm9sbGFwcGVhcmluZ1wiOjR9XX0se30sWzVdKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSXVMaTl1YjJSbFgyMXZaSFZzWlhNdmFHRnRiV1Z5YW5NdmFHRnRiV1Z5TG1weklpd2lMaTR2YzNKakwycHpMMk52YlhCdmJtVnVkSE12WVhCd1pXRnlMbXB6SWl3aUxpNHZjM0pqTDJwekwyTnZiWEJ2Ym1WdWRITXZZMkZ5YjNWelpXd3Vhbk1pTENJdUxpOXpjbU12YW5NdlkyOXRjRzl1Wlc1MGN5OXpZM0p2Ykd4aGNIQmxZWEpwYm1jdWFuTWlMQ0l1TGk5emNtTXZhbk12YldGcGJpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096czdTVU51YkVaTkxFMHNSMEZEU2l4blFrRkJXU3hOUVVGYUxFVkJRVzlDTzBGQlFVRTdPMEZCUTJ4Q0xGTkJRVThzWjBKQlFWQXNRMEZCZDBJc1VVRkJlRUlzUlVGQmEwTXNXVUZCVFR0QlFVTjBReXhSUVVGSExFOUJRVThzVlVGQlVDeERRVUZyUWl4eFFrRkJiRUlzUjBGQk1FTXNRMEZCTVVNc1IwRkJPRU1zUlVGQk9VTXNTVUZCYjBRc1QwRkJUeXhWUVVGUUxFTkJRV3RDTEhGQ1FVRnNRaXhIUVVFd1F5eERRVUV4UXl4SFFVRTRReXhEUVVGRkxFOUJRVThzVlVGQlVDeERRVUZyUWl4eFFrRkJiRUlzUjBGQk1FTXNUVUZCYWtvc1JVRkJkMG83UVVGRGRFb3NZVUZCVHl4UlFVRlFMRU5CUVdkQ0xFOUJRV2hDTEVOQlFYbENMRzFDUVVGWE8wRkJRMnhETEdkQ1FVRlJMRk5CUVZJc1EwRkJhMElzUjBGQmJFSXNRMEZCYzBJc1QwRkJUeXhUUVVFM1FqdEJRVU5FTEU5QlJrUTdRVUZIUkN4TFFVcEVMRTFCUzBrN1FVRkRSaXhoUVVGUExGRkJRVkFzUTBGQlowSXNUMEZCYUVJc1EwRkJlVUlzYlVKQlFWYzdRVUZEYkVNc1owSkJRVkVzVTBGQlVpeERRVUZyUWl4TlFVRnNRaXhEUVVGNVFpeFBRVUZQTEZOQlFXaERPMEZCUTBRc1QwRkdSRHRCUVVkRU8wRkJRMFlzUjBGWVJEdEJRVmxFTEVNN08wRkJSMGdzVDBGQlR5eFBRVUZRTEVkQlFXbENMRTFCUVdwQ096czdPenM3T3pzN1FVTnFRa0VzU1VGQlRTeFRRVUZUTEZGQlFWRXNWVUZCVWl4RFFVRm1PenRKUVVWTkxGRTdRVUZEU2l4dlFrRkJXU3hOUVVGYUxFVkJRVzlDTzBGQlFVRTdPMEZCUVVFN08wRkJRMnhDTEZOQlFVc3NTMEZCVEN4SFFVRmhMRU5CUVdJN08wRkJSVUVzVTBGQlN5eFRRVUZNTEVkQlFXbENMRk5CUVZNc1owSkJRVlFzUTBGQk1FSXNiVUpCUVRGQ0xFTkJRV3BDTzBGQlEwRXNVMEZCU3l4UFFVRk1MRWRCUVdVc1UwRkJVeXhuUWtGQlZDeERRVUV3UWl4NVFrRkJNVUlzUTBGQlpqdEJRVU5CTEZOQlFVc3NUVUZCVEN4SFFVRmpMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeHBRa0ZCZGtJc1EwRkJaRHRCUVVOQkxGTkJRVXNzVVVGQlRDeEhRVUZuUWl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzYTBKQlFYWkNMRU5CUVdoQ08wRkJRMEVzVTBGQlN5eFpRVUZNTEVkQlFXOUNMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeHBRa0ZCZGtJc1EwRkJjRUk3UVVGRFFTeFRRVUZMTEUxQlFVd3NSMEZCWXl4VFFVRlRMR2RDUVVGVUxFTkJRVEJDTEhkQ1FVRXhRaXhEUVVGa096dEJRVVZCTEZOQlFVc3NVVUZCVEN4SFFVRm5RaXhMUVVGTExFOUJRVXdzUTBGQllTeE5RVUUzUWp0QlFVTkJMRk5CUVVzc1RVRkJUQ3hIUVVGakxFdEJRV1E3TzBGQlJVRXNVMEZCU3l4TlFVRk1MRWRCUVdNc1EwRkRXaXhUUVVSWkxFVkJSVm9zVTBGR1dTeEZRVWRhTEZOQlNGa3NSVUZKV2l4VFFVcFpMRVZCUzFvc1UwRk1XU3hEUVVGa096dEJRVkZCTEZOQlFVc3NUVUZCVEN4SFFVRmpMRWxCUVVrc1RVRkJTaXhEUVVGWExFdEJRVXNzVFVGQmFFSXNRMEZCWkRzN1FVRkZRU3hUUVVGTExFMUJRVXdzUTBGQldTeEZRVUZhTEVOQlFXVXNVMEZCWml4RlFVRXdRaXhoUVVGSk8wRkJRelZDTEZWQlFVY3NUVUZCU3l4TFFVRk1MRWRCUVdFc1EwRkJZaXhKUVVGclFpeE5RVUZMTEZGQlFVd3NSMEZCWjBJc1EwRkJiRU1zU1VGQmRVTXNUVUZCU3l4TlFVRk1MRWxCUVdVc1MwRkJla1FzUlVGQkswUTdRVUZETjBRc1kwRkJTeXhMUVVGTU8wRkJRMEVzWTBGQlN5eFhRVUZNTzBGQlEwUTdRVUZEUml4TFFVeEVPenRCUVU5QkxGTkJRVXNzVFVGQlRDeERRVUZaTEVWQlFWb3NRMEZCWlN4VlFVRm1MRVZCUVRKQ0xHRkJRVWs3UVVGRE4wSXNWVUZCUnl4TlFVRkxMRXRCUVV3c1IwRkJZU3hEUVVGaUxFbEJRV3RDTEVOQlFXeENMRWxCUVhkQ0xFMUJRVXNzVFVGQlRDeEpRVUZsTEV0QlFURkRMRVZCUVdkRU8wRkJRemxETEdOQlFVc3NTMEZCVER0QlFVTkJMR05CUVVzc1YwRkJURHRCUVVORU8wRkJRMFlzUzBGTVJEczdRVUZQUVN4VFFVRkxMRmRCUVV3N08wRkJSVUVzVTBGQlN5eFRRVUZNTEVOQlFXVXNUMEZCWml4RFFVRjFRaXhWUVVGRExFOUJRVVFzUlVGQlZTeExRVUZXTEVWQlFXOUNPMEZCUTNwRExHTkJRVkVzWjBKQlFWSXNRMEZCZVVJc1QwRkJla0lzUlVGQmEwTXNXVUZCVFR0QlFVTjBReXhqUVVGTExFdEJRVXdzUjBGQllTeExRVUZpTzBGQlEwRXNZMEZCU3l4WFFVRk1PMEZCUTBRc1QwRklSRHRCUVVsRUxFdEJURVE3UVVGTlJEczdPenRyUTBGRFdUdEJRVUZCT3p0QlFVVllMRmRCUVVzc1RVRkJUQ3hIUVVGakxFbEJRV1E3TzBGQlJVRXNaVUZCVXl4aFFVRlVMRU5CUVhWQ0xESkNRVUYyUWl4RlFVRnZSQ3hUUVVGd1JDeERRVUU0UkN4TlFVRTVSQ3hEUVVGeFJTd3dRa0ZCY2tVN1FVRkRRU3hYUVVGTExGTkJRVXdzUTBGQlpTeExRVUZMTEV0QlFYQkNMRVZCUVRKQ0xGTkJRVE5DTEVOQlFYRkRMRWRCUVhKRExFTkJRWGxETERCQ1FVRjZRenM3UVVGRlFTeGxRVUZUTEdGQlFWUXNRMEZCZFVJc2FVTkJRWFpDTEVWQlFUQkVMRk5CUVRGRUxFTkJRVzlGTEUxQlFYQkZMRU5CUVRKRkxHZERRVUV6UlR0QlFVTkJMRmRCUVVzc1QwRkJUQ3hEUVVGaExFdEJRVXNzUzBGQmJFSXNSVUZCZVVJc1UwRkJla0lzUTBGQmJVTXNSMEZCYmtNc1EwRkJkVU1zWjBOQlFYWkRPenRCUVVWQkxGZEJRVXNzV1VGQlRDeERRVUZyUWl4VFFVRnNRaXhIUVVFNFFpeExRVUZMTEV0QlFVd3NSMEZCWVN4RFFVRXpRenM3UVVGRlFTeGxRVUZUTEdGQlFWUXNRMEZCZFVJc1owTkJRWFpDTEVWQlFYbEVMRk5CUVhwRUxFTkJRVzFGTEUxQlFXNUZMRU5CUVRCRkxDdENRVUV4UlR0QlFVTkJMRmRCUVVzc1RVRkJUQ3hEUVVGWkxFdEJRVXNzUzBGQmFrSXNSVUZCZDBJc1UwRkJlRUlzUTBGQmEwTXNSMEZCYkVNc1EwRkJjME1zSzBKQlFYUkRPenRCUVVWQkxGZEJRVXNzVVVGQlRDeERRVUZqTEV0QlFXUXNRMEZCYjBJc1YwRkJjRUlzUjBGQmEwTXNTMEZCU3l4TlFVRk1MRU5CUVZrc1MwRkJTeXhMUVVGcVFpeERRVUZzUXpzN1FVRkZRU3hoUVVGUExGVkJRVkFzUTBGQmJVSXNXVUZCVFR0QlFVTjJRaXhsUVVGTExFMUJRVXdzUjBGQll5eExRVUZrTzBGQlEwUXNUMEZHUkN4RlFVVkhMRWxCUmtnN1FVRkhSRHM3T3pzN08wRkJSMGdzVDBGQlR5eFBRVUZRTEVkQlFXbENMRkZCUVdwQ096czdPenM3T3pzN1NVTjRSVTBzWlR0QlFVTktMREpDUVVGWkxFMUJRVm9zUlVGQmJVSTdRVUZCUVRzN1FVRkJRVHM3UVVGRGFrSXNVMEZCU3l4TlFVRk1MRWRCUVdNc1RVRkJaRHRCUVVOQkxGTkJRVXNzVTBGQlRDeEhRVUZwUWl4SlFVRkpMRTFCUVVvc1JVRkJha0k3UVVGRFFTeFRRVUZMTEdsQ1FVRk1PMEZCUTBFc1UwRkJTeXhKUVVGTU8wRkJRMEVzVjBGQlR5eFhRVUZRTEVOQlFXMUNMRmxCUVUwN1FVRkRka0lzV1VGQlN5eEpRVUZNTzBGQlEwUXNTMEZHUkN4RlFVVkhMRWRCUmtnN1FVRkhSRHM3T3pzeVFrRkRTenRCUVVOS0xGZEJRVXNzYVVKQlFVdzdRVUZEUVN4aFFVRlBMR2RDUVVGUUxFTkJRWGRDTEZGQlFYaENMRVZCUVd0RExFdEJRVXNzUzBGQlRDeEZRVUZzUXp0QlFVTkVPenM3ZDBOQlEydENPMEZCUTJwQ0xGZEJRVXNzVTBGQlRDeERRVUZsTEUxQlFXWXNSMEZCZDBJc1UwRkJVeXhuUWtGQlZDeFBRVUU0UWl4TFFVRkxMRTFCUVV3c1EwRkJXU3hOUVVFeFF5eERRVUY0UWp0QlFVTkJMRmRCUVVzc1RVRkJUQ3hIUVVGakxFOUJRVThzVjBGQmNrSTdRVUZEUkRzN096UkNRVU5OTzBGQlFVRTdPMEZCUTB3c1YwRkJTeXhUUVVGTUxFTkJRV1VzVFVGQlppeERRVUZ6UWl4UFFVRjBRaXhEUVVFclFpeHRRa0ZCVnp0QlFVTjRReXhaUVVGSkxGTkJRVk1zVVVGQlVTeHhRa0ZCVWl4SFFVRm5ReXhIUVVFM1F6dEJRVU5CTEZsQlFVY3NVMEZCVXl4UFFVRkxMRTFCUVdRc1NVRkJkMElzUTBGQk0wSXNSVUZEUlN4UlFVRlJMRk5CUVZJc1IwRkJiMElzVVVGQlVTeFRRVUZTTEVOQlFXdENMRTlCUVd4Q0xFTkJRVEJDTEU5QlFVc3NUVUZCVEN4RFFVRlpMRTFCUVhSRExFVkJRVGhETEU5QlFVc3NUVUZCVEN4RFFVRlpMRkZCUVRGRUxFTkJRWEJDTzBGQlEwZ3NUMEZLUkR0QlFVdEVPenM3T3pzN1FVRkhTQ3hQUVVGUExFOUJRVkFzUjBGQmFVSXNaVUZCYWtJN096czdPMEZETTBKQkxFbEJRVTBzYTBKQlFXdENMRkZCUVZFc09FSkJRVklzUTBGQmVFSTdRVUZEUVN4SlFVRk5MRk5CUVZNc1VVRkJVU3h4UWtGQlVpeERRVUZtTzBGQlEwRXNTVUZCVFN4WFFVRlhMRkZCUVZFc2RVSkJRVklzUTBGQmFrSTdPMEZCUlVFc1NVRkJUU3haUVVGWkxFbEJRVWtzWlVGQlNpeERRVUZ2UWp0QlFVTndReXhWUVVGVExGRkJSREpDTzBGQlJYQkRMRmxCUVZjN1FVRkdlVUlzUTBGQmNFSXNRMEZCYkVJN08wRkJTMEVzU1VGQlRTeFpRVUZaTEVsQlFVa3NUVUZCU2l4RFFVRlhPMEZCUXpOQ0xHTkJRV0VzVTBGQlV5eGhRVUZVTEVOQlFYVkNMRTFCUVhaQ0xFTkJSR003UVVGRk0wSXNXVUZCVnl4VFFVRlRMR2RDUVVGVUxFTkJRVEJDTEhGQ1FVRXhRaXhEUVVablFqdEJRVWN6UWl4aFFVRlpPMEZCU0dVc1EwRkJXQ3hEUVVGc1FqczdRVUZOUVN4SlFVRk5MRk5CUVZNc1NVRkJTU3hSUVVGS0xFTkJRV0U3UVVGRE1VSXNZMEZCV1N4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzVTBGQmRrSTdRVUZFWXl4RFFVRmlMRU5CUVdZaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaUJsS0hRc2JpeHlLWHRtZFc1amRHbHZiaUJ6S0c4c2RTbDdhV1lvSVc1YmIxMHBlMmxtS0NGMFcyOWRLWHQyWVhJZ1lUMTBlWEJsYjJZZ2NtVnhkV2x5WlQwOVhDSm1kVzVqZEdsdmJsd2lKaVp5WlhGMWFYSmxPMmxtS0NGMUppWmhLWEpsZEhWeWJpQmhLRzhzSVRBcE8ybG1LR2twY21WMGRYSnVJR2tvYnl3aE1DazdkbUZ5SUdZOWJtVjNJRVZ5Y205eUtGd2lRMkZ1Ym05MElHWnBibVFnYlc5a2RXeGxJQ2RjSWl0dksxd2lKMXdpS1R0MGFISnZkeUJtTG1OdlpHVTlYQ0pOVDBSVlRFVmZUazlVWDBaUFZVNUVYQ0lzWm4xMllYSWdiRDF1VzI5ZFBYdGxlSEJ2Y25Sek9udDlmVHQwVzI5ZFd6QmRMbU5oYkd3b2JDNWxlSEJ2Y25SekxHWjFibU4wYVc5dUtHVXBlM1poY2lCdVBYUmJiMTFiTVYxYlpWMDdjbVYwZFhKdUlITW9iajl1T21VcGZTeHNMR3d1Wlhod2IzSjBjeXhsTEhRc2JpeHlLWDF5WlhSMWNtNGdibHR2WFM1bGVIQnZjblJ6ZlhaaGNpQnBQWFI1Y0dWdlppQnlaWEYxYVhKbFBUMWNJbVoxYm1OMGFXOXVYQ0ltSm5KbGNYVnBjbVU3Wm05eUtIWmhjaUJ2UFRBN2J6eHlMbXhsYm1kMGFEdHZLeXNwY3loeVcyOWRLVHR5WlhSMWNtNGdjMzBwSWl3aUx5b2hJRWhoYlcxbGNpNUtVeUF0SUhZeUxqQXVOeUF0SURJd01UWXRNRFF0TWpKY2JpQXFJR2gwZEhBNkx5OW9ZVzF0WlhKcWN5NW5hWFJvZFdJdWFXOHZYRzRnS2x4dUlDb2dRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTJJRXB2Y21scklGUmhibWRsYkdSbGNqdGNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCTlNWUWdiR2xqWlc1elpTQXFMMXh1S0daMWJtTjBhVzl1S0hkcGJtUnZkeXdnWkc5amRXMWxiblFzSUdWNGNHOXlkRTVoYldVc0lIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBbmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQldSVTVFVDFKZlVGSkZSa2xZUlZNZ1BTQmJKeWNzSUNkM1pXSnJhWFFuTENBblRXOTZKeXdnSjAxVEp5d2dKMjF6Snl3Z0oyOG5YVHRjYm5aaGNpQlVSVk5VWDBWTVJVMUZUbFFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktUdGNibHh1ZG1GeUlGUlpVRVZmUmxWT1ExUkpUMDRnUFNBblpuVnVZM1JwYjI0bk8xeHVYRzUyWVhJZ2NtOTFibVFnUFNCTllYUm9Mbkp2ZFc1a08xeHVkbUZ5SUdGaWN5QTlJRTFoZEdndVlXSnpPMXh1ZG1GeUlHNXZkeUE5SUVSaGRHVXVibTkzTzF4dVhHNHZLaXBjYmlBcUlITmxkQ0JoSUhScGJXVnZkWFFnZDJsMGFDQmhJR2RwZG1WdUlITmpiM0JsWEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm1ibHh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhScGJXVnZkWFJjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCamIyNTBaWGgwWEc0Z0tpQkFjbVYwZFhKdWN5QjdiblZ0WW1WeWZWeHVJQ292WEc1bWRXNWpkR2x2YmlCelpYUlVhVzFsYjNWMFEyOXVkR1Y0ZENobWJpd2dkR2x0Wlc5MWRDd2dZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCelpYUlVhVzFsYjNWMEtHSnBibVJHYmlobWJpd2dZMjl1ZEdWNGRDa3NJSFJwYldWdmRYUXBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlHbG1JSFJvWlNCaGNtZDFiV1Z1ZENCcGN5QmhiaUJoY25KaGVTd2dkMlVnZDJGdWRDQjBieUJsZUdWamRYUmxJSFJvWlNCbWJpQnZiaUJsWVdOb0lHVnVkSEo1WEc0Z0tpQnBaaUJwZENCaGFXNTBJR0Z1SUdGeWNtRjVJSGRsSUdSdmJpZDBJSGRoYm5RZ2RHOGdaRzhnWVNCMGFHbHVaeTVjYmlBcUlIUm9hWE1nYVhNZ2RYTmxaQ0JpZVNCaGJHd2dkR2hsSUcxbGRHaHZaSE1nZEdoaGRDQmhZMk5sY0hRZ1lTQnphVzVuYkdVZ1lXNWtJR0Z5Y21GNUlHRnlaM1Z0Wlc1MExseHVJQ29nUUhCaGNtRnRJSHNxZkVGeWNtRjVmU0JoY21kY2JpQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQm1ibHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUZ0amIyNTBaWGgwWFZ4dUlDb2dRSEpsZEhWeWJuTWdlMEp2YjJ4bFlXNTlYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbHVkbTlyWlVGeWNtRjVRWEpuS0dGeVp5d2dabTRzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hoY21jcEtTQjdYRzRnSUNBZ0lDQWdJR1ZoWTJnb1lYSm5MQ0JqYjI1MFpYaDBXMlp1WFN3Z1kyOXVkR1Y0ZENrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ2QyRnNheUJ2WW1wbFkzUnpJR0Z1WkNCaGNuSmhlWE5jYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdlltcGNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdsMFpYSmhkRzl5WEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1kyOXVkR1Y0ZEZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJsWVdOb0tHOWlhaXdnYVhSbGNtRjBiM0lzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0IyWVhJZ2FUdGNibHh1SUNBZ0lHbG1JQ2doYjJKcUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9iMkpxTG1admNrVmhZMmdwSUh0Y2JpQWdJQ0FnSUNBZ2IySnFMbVp2Y2tWaFkyZ29hWFJsY21GMGIzSXNJR052Ym5SbGVIUXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9iMkpxTG14bGJtZDBhQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJR2tnUFNBd08xeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb2FTQThJRzlpYWk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2wwWlhKaGRHOXlMbU5oYkd3b1kyOXVkR1Y0ZEN3Z2IySnFXMmxkTENCcExDQnZZbW9wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhU3NyTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHBJR2x1SUc5aWFpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IySnFMbWhoYzA5M2JsQnliM0JsY25SNUtHa3BJQ1ltSUdsMFpYSmhkRzl5TG1OaGJHd29ZMjl1ZEdWNGRDd2diMkpxVzJsZExDQnBMQ0J2WW1vcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUhkeVlYQWdZU0J0WlhSb2IyUWdkMmwwYUNCaElHUmxjSEpsWTJGMGFXOXVJSGRoY201cGJtY2dZVzVrSUhOMFlXTnJJSFJ5WVdObFhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0J0WlhSb2IyUmNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J1WVcxbFhHNGdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdiV1Z6YzJGblpWeHVJQ29nUUhKbGRIVnlibk1nZTBaMWJtTjBhVzl1ZlNCQklHNWxkeUJtZFc1amRHbHZiaUIzY21Gd2NHbHVaeUIwYUdVZ2MzVndjR3hwWldRZ2JXVjBhRzlrTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJrWlhCeVpXTmhkR1VvYldWMGFHOWtMQ0J1WVcxbExDQnRaWE56WVdkbEtTQjdYRzRnSUNBZ2RtRnlJR1JsY0hKbFkyRjBhVzl1VFdWemMyRm5aU0E5SUNkRVJWQlNSVU5CVkVWRUlFMUZWRWhQUkRvZ0p5QXJJRzVoYldVZ0t5QW5YRnh1SnlBcklHMWxjM05oWjJVZ0t5QW5JRUZVSUZ4Y2JpYzdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWlNBOUlHNWxkeUJGY25KdmNpZ25aMlYwTFhOMFlXTnJMWFJ5WVdObEp5azdYRzRnSUNBZ0lDQWdJSFpoY2lCemRHRmpheUE5SUdVZ0ppWWdaUzV6ZEdGamF5QS9JR1V1YzNSaFkyc3VjbVZ3YkdGalpTZ3ZYbHRlWEZ3b1hTcy9XMXhjYmlSZEwyZHRMQ0FuSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQzllWEZ4eksyRjBYRnh6S3k5bmJTd2dKeWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ3ZYazlpYW1WamRDNDhZVzV2Ym5sdGIzVnpQbHhjY3lwY1hDZ3ZaMjBzSUNkN1lXNXZibmx0YjNWemZTZ3BRQ2NwSURvZ0oxVnVhMjV2ZDI0Z1UzUmhZMnNnVkhKaFkyVW5PMXh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnNiMmNnUFNCM2FXNWtiM2N1WTI5dWMyOXNaU0FtSmlBb2QybHVaRzkzTG1OdmJuTnZiR1V1ZDJGeWJpQjhmQ0IzYVc1a2IzY3VZMjl1YzI5c1pTNXNiMmNwTzF4dUlDQWdJQ0FnSUNCcFppQW9iRzluS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjJjdVkyRnNiQ2gzYVc1a2IzY3VZMjl1YzI5c1pTd2daR1Z3Y21WallYUnBiMjVOWlhOellXZGxMQ0J6ZEdGamF5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzFsZEdodlpDNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJSDA3WEc1OVhHNWNiaThxS2x4dUlDb2daWGgwWlc1a0lHOWlhbVZqZEM1Y2JpQXFJRzFsWVc1eklIUm9ZWFFnY0hKdmNHVnlkR2xsY3lCcGJpQmtaWE4wSUhkcGJHd2dZbVVnYjNabGNuZHlhWFIwWlc0Z1lua2dkR2hsSUc5dVpYTWdhVzRnYzNKakxseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSFJoY21kbGRGeHVJQ29nUUhCaGNtRnRJSHN1TGk1UFltcGxZM1I5SUc5aWFtVmpkSE5mZEc5ZllYTnphV2R1WEc0Z0tpQkFjbVYwZFhKdWN5QjdUMkpxWldOMGZTQjBZWEpuWlhSY2JpQXFMMXh1ZG1GeUlHRnpjMmxuYmp0Y2JtbG1JQ2gwZVhCbGIyWWdUMkpxWldOMExtRnpjMmxuYmlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJR0Z6YzJsbmJpQTlJR1oxYm1OMGFXOXVJR0Z6YzJsbmJpaDBZWEpuWlhRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSaGNtZGxkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lIeDhJSFJoY21kbGRDQTlQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25RMkZ1Ym05MElHTnZiblpsY25RZ2RXNWtaV1pwYm1Wa0lHOXlJRzUxYkd3Z2RHOGdiMkpxWldOMEp5azdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMllYSWdiM1YwY0hWMElEMGdUMkpxWldOMEtIUmhjbWRsZENrN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHbHVaR1Y0SUQwZ01Uc2dhVzVrWlhnZ1BDQmhjbWQxYldWdWRITXViR1Z1WjNSb095QnBibVJsZUNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjMjkxY21ObElEMGdZWEpuZFcxbGJuUnpXMmx1WkdWNFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpiM1Z5WTJVZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCemIzVnlZMlVnSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCdVpYaDBTMlY1SUdsdUlITnZkWEpqWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyOTFjbU5sTG1oaGMwOTNibEJ5YjNCbGNuUjVLRzVsZUhSTFpYa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2ZFhSd2RYUmJibVY0ZEV0bGVWMGdQU0J6YjNWeVkyVmJibVY0ZEV0bGVWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc5MWRIQjFkRHRjYmlBZ0lDQjlPMXh1ZlNCbGJITmxJSHRjYmlBZ0lDQmhjM05wWjI0Z1BTQlBZbXBsWTNRdVlYTnphV2R1TzF4dWZWeHVYRzR2S2lwY2JpQXFJR1Y0ZEdWdVpDQnZZbXBsWTNRdVhHNGdLaUJ0WldGdWN5QjBhR0YwSUhCeWIzQmxjblJwWlhNZ2FXNGdaR1Z6ZENCM2FXeHNJR0psSUc5MlpYSjNjbWwwZEdWdUlHSjVJSFJvWlNCdmJtVnpJR2x1SUhOeVl5NWNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JrWlhOMFhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdjM0pqWEc0Z0tpQkFjR0Z5WVcwZ2UwSnZiMnhsWVc1OUlGdHRaWEpuWlQxbVlXeHpaVjFjYmlBcUlFQnlaWFIxY201eklIdFBZbXBsWTNSOUlHUmxjM1JjYmlBcUwxeHVkbUZ5SUdWNGRHVnVaQ0E5SUdSbGNISmxZMkYwWlNobWRXNWpkR2x2YmlCbGVIUmxibVFvWkdWemRDd2djM0pqTENCdFpYSm5aU2tnZTF4dUlDQWdJSFpoY2lCclpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb2MzSmpLVHRjYmlBZ0lDQjJZWElnYVNBOUlEQTdYRzRnSUNBZ2QyaHBiR1VnS0drZ1BDQnJaWGx6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JVzFsY21kbElIeDhJQ2h0WlhKblpTQW1KaUJrWlhOMFcydGxlWE5iYVYxZElEMDlQU0IxYm1SbFptbHVaV1FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWlhOMFcydGxlWE5iYVYxZElEMGdjM0pqVzJ0bGVYTmJhVjFkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHa3JLenRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdSbGMzUTdYRzU5TENBblpYaDBaVzVrSnl3Z0oxVnpaU0JnWVhOemFXZHVZQzRuS1R0Y2JseHVMeW9xWEc0Z0tpQnRaWEpuWlNCMGFHVWdkbUZzZFdWeklHWnliMjBnYzNKaklHbHVJSFJvWlNCa1pYTjBMbHh1SUNvZ2JXVmhibk1nZEdoaGRDQndjbTl3WlhKMGFXVnpJSFJvWVhRZ1pYaHBjM1FnYVc0Z1pHVnpkQ0IzYVd4c0lHNXZkQ0JpWlNCdmRtVnlkM0pwZEhSbGJpQmllU0J6Y21OY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmtaWE4wWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2MzSmpYRzRnS2lCQWNtVjBkWEp1Y3lCN1QySnFaV04wZlNCa1pYTjBYRzRnS2k5Y2JuWmhjaUJ0WlhKblpTQTlJR1JsY0hKbFkyRjBaU2htZFc1amRHbHZiaUJ0WlhKblpTaGtaWE4wTENCemNtTXBJSHRjYmlBZ0lDQnlaWFIxY200Z1pYaDBaVzVrS0dSbGMzUXNJSE55WXl3Z2RISjFaU2s3WEc1OUxDQW5iV1Z5WjJVbkxDQW5WWE5sSUdCaGMzTnBaMjVnTGljcE8xeHVYRzR2S2lwY2JpQXFJSE5wYlhCc1pTQmpiR0Z6Y3lCcGJtaGxjbWwwWVc1alpWeHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWTJocGJHUmNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdKaGMyVmNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JiY0hKdmNHVnlkR2xsYzExY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVc1b1pYSnBkQ2hqYUdsc1pDd2dZbUZ6WlN3Z2NISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lIWmhjaUJpWVhObFVDQTlJR0poYzJVdWNISnZkRzkwZVhCbExGeHVJQ0FnSUNBZ0lDQmphR2xzWkZBN1hHNWNiaUFnSUNCamFHbHNaRkFnUFNCamFHbHNaQzV3Y205MGIzUjVjR1VnUFNCUFltcGxZM1F1WTNKbFlYUmxLR0poYzJWUUtUdGNiaUFnSUNCamFHbHNaRkF1WTI5dWMzUnlkV04wYjNJZ1BTQmphR2xzWkR0Y2JpQWdJQ0JqYUdsc1pGQXVYM04xY0dWeUlEMGdZbUZ6WlZBN1hHNWNiaUFnSUNCcFppQW9jSEp2Y0dWeWRHbGxjeWtnZTF4dUlDQWdJQ0FnSUNCaGMzTnBaMjRvWTJocGJHUlFMQ0J3Y205d1pYSjBhV1Z6S1R0Y2JpQWdJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2djMmx0Y0d4bElHWjFibU4wYVc5dUlHSnBibVJjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWnVYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnWTI5dWRHVjRkRnh1SUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZWeHVJQ292WEc1bWRXNWpkR2x2YmlCaWFXNWtSbTRvWm00c0lHTnZiblJsZUhRcElIdGNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnWW05MWJtUkdiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdadUxtRndjR3g1S0dOdmJuUmxlSFFzSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnZlR0Y2JuMWNibHh1THlvcVhHNGdLaUJzWlhRZ1lTQmliMjlzWldGdUlIWmhiSFZsSUdGc2MyOGdZbVVnWVNCbWRXNWpkR2x2YmlCMGFHRjBJRzExYzNRZ2NtVjBkWEp1SUdFZ1ltOXZiR1ZoYmx4dUlDb2dkR2hwY3lCbWFYSnpkQ0JwZEdWdElHbHVJR0Z5WjNNZ2QybHNiQ0JpWlNCMWMyVmtJR0Z6SUhSb1pTQmpiMjUwWlhoMFhHNGdLaUJBY0dGeVlXMGdlMEp2YjJ4bFlXNThSblZ1WTNScGIyNTlJSFpoYkZ4dUlDb2dRSEJoY21GdElIdEJjbkpoZVgwZ1cyRnlaM05kWEc0Z0tpQkFjbVYwZFhKdWN5QjdRbTl2YkdWaGJuMWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1ltOXZiRTl5Um00b2RtRnNMQ0JoY21kektTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQjJZV3dnUFQwZ1ZGbFFSVjlHVlU1RFZFbFBUaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZG1Gc0xtRndjR3g1S0dGeVozTWdQeUJoY21keld6QmRJSHg4SUhWdVpHVm1hVzVsWkNBNklIVnVaR1ZtYVc1bFpDd2dZWEpuY3lrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjJZV3c3WEc1OVhHNWNiaThxS2x4dUlDb2dkWE5sSUhSb1pTQjJZV3d5SUhkb1pXNGdkbUZzTVNCcGN5QjFibVJsWm1sdVpXUmNiaUFxSUVCd1lYSmhiU0I3S24wZ2RtRnNNVnh1SUNvZ1FIQmhjbUZ0SUhzcWZTQjJZV3d5WEc0Z0tpQkFjbVYwZFhKdWN5QjdLbjFjYmlBcUwxeHVablZ1WTNScGIyNGdhV1pWYm1SbFptbHVaV1FvZG1Gc01Td2dkbUZzTWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvZG1Gc01TQTlQVDBnZFc1a1pXWnBibVZrS1NBL0lIWmhiRElnT2lCMllXd3hPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlHRmtaRVYyWlc1MFRHbHpkR1Z1WlhJZ2QybDBhQ0J0ZFd4MGFYQnNaU0JsZG1WdWRITWdZWFFnYjI1alpWeHVJQ29nUUhCaGNtRnRJSHRGZG1WdWRGUmhjbWRsZEgwZ2RHRnlaMlYwWEc0Z0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2RIbHdaWE5jYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHaGhibVJzWlhKY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWVdSa1JYWmxiblJNYVhOMFpXNWxjbk1vZEdGeVoyVjBMQ0IwZVhCbGN5d2dhR0Z1Wkd4bGNpa2dlMXh1SUNBZ0lHVmhZMmdvYzNCc2FYUlRkSElvZEhsd1pYTXBMQ0JtZFc1amRHbHZiaWgwZVhCbEtTQjdYRzRnSUNBZ0lDQWdJSFJoY21kbGRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtIUjVjR1VzSUdoaGJtUnNaWElzSUdaaGJITmxLVHRjYmlBZ0lDQjlLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQnlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlJSGRwZEdnZ2JYVnNkR2x3YkdVZ1pYWmxiblJ6SUdGMElHOXVZMlZjYmlBcUlFQndZWEpoYlNCN1JYWmxiblJVWVhKblpYUjlJSFJoY21kbGRGeHVJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSFI1Y0dWelhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JvWVc1a2JHVnlYRzRnS2k5Y2JtWjFibU4wYVc5dUlISmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSnpLSFJoY21kbGRDd2dkSGx3WlhNc0lHaGhibVJzWlhJcElIdGNiaUFnSUNCbFlXTm9LSE53YkdsMFUzUnlLSFI1Y0dWektTd2dablZ1WTNScGIyNG9kSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQjBZWEpuWlhRdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaDBlWEJsTENCb1lXNWtiR1Z5TENCbVlXeHpaU2s3WEc0Z0lDQWdmU2s3WEc1OVhHNWNiaThxS2x4dUlDb2dabWx1WkNCcFppQmhJRzV2WkdVZ2FYTWdhVzRnZEdobElHZHBkbVZ1SUhCaGNtVnVkRnh1SUNvZ1FHMWxkR2h2WkNCb1lYTlFZWEpsYm5SY2JpQXFJRUJ3WVhKaGJTQjdTRlJOVEVWc1pXMWxiblI5SUc1dlpHVmNiaUFxSUVCd1lYSmhiU0I3U0ZSTlRFVnNaVzFsYm5SOUlIQmhjbVZ1ZEZ4dUlDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMGdabTkxYm1SY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYUdGelVHRnlaVzUwS0c1dlpHVXNJSEJoY21WdWRDa2dlMXh1SUNBZ0lIZG9hV3hsSUNodWIyUmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHViMlJsSUQwOUlIQmhjbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdibTlrWlNBOUlHNXZaR1V1Y0dGeVpXNTBUbTlrWlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dWZWeHVYRzR2S2lwY2JpQXFJSE50WVd4c0lHbHVaR1Y0VDJZZ2QzSmhjSEJsY2x4dUlDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlITjBjbHh1SUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUdacGJtUmNiaUFxSUVCeVpYUjFjbTV6SUh0Q2IyOXNaV0Z1ZlNCbWIzVnVaRnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBibE4wY2loemRISXNJR1pwYm1RcElIdGNiaUFnSUNCeVpYUjFjbTRnYzNSeUxtbHVaR1Y0VDJZb1ptbHVaQ2tnUGlBdE1UdGNibjFjYmx4dUx5b3FYRzRnS2lCemNHeHBkQ0J6ZEhKcGJtY2diMjRnZDJocGRHVnpjR0ZqWlZ4dUlDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlITjBjbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwRnljbUY1ZlNCM2IzSmtjMXh1SUNvdlhHNW1kVzVqZEdsdmJpQnpjR3hwZEZOMGNpaHpkSElwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjM1J5TG5SeWFXMG9LUzV6Y0d4cGRDZ3ZYRnh6S3k5bktUdGNibjFjYmx4dUx5b3FYRzRnS2lCbWFXNWtJR2xtSUdFZ1lYSnlZWGtnWTI5dWRHRnBibk1nZEdobElHOWlhbVZqZENCMWMybHVaeUJwYm1SbGVFOW1JRzl5SUdFZ2MybHRjR3hsSUhCdmJIbEdhV3hzWEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCemNtTmNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0JtYVc1a1hHNGdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdXMlpwYm1SQ2VVdGxlVjFjYmlBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OFRuVnRZbVZ5ZlNCbVlXeHpaU0IzYUdWdUlHNXZkQ0JtYjNWdVpDd2diM0lnZEdobElHbHVaR1Y0WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2x1UVhKeVlYa29jM0pqTENCbWFXNWtMQ0JtYVc1a1FubExaWGtwSUh0Y2JpQWdJQ0JwWmlBb2MzSmpMbWx1WkdWNFQyWWdKaVlnSVdacGJtUkNlVXRsZVNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzSmpMbWx1WkdWNFQyWW9abWx1WkNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHa2dQU0F3TzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvYVNBOElITnlZeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvWm1sdVpFSjVTMlY1SUNZbUlITnlZMXRwWFZ0bWFXNWtRbmxMWlhsZElEMDlJR1pwYm1RcElIeDhJQ2doWm1sdVpFSjVTMlY1SUNZbUlITnlZMXRwWFNBOVBUMGdabWx1WkNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2tyS3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0xURTdYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUdOdmJuWmxjblFnWVhKeVlYa3RiR2xyWlNCdlltcGxZM1J6SUhSdklISmxZV3dnWVhKeVlYbHpYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjJKcVhHNGdLaUJBY21WMGRYSnVjeUI3UVhKeVlYbDlYRzRnS2k5Y2JtWjFibU4wYVc5dUlIUnZRWEp5WVhrb2IySnFLU0I3WEc0Z0lDQWdjbVYwZFhKdUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHOWlhaXdnTUNrN1hHNTlYRzVjYmk4cUtseHVJQ29nZFc1cGNYVmxJR0Z5Y21GNUlIZHBkR2dnYjJKcVpXTjBjeUJpWVhObFpDQnZiaUJoSUd0bGVTQW9iR2xyWlNBbmFXUW5LU0J2Y2lCcWRYTjBJR0o1SUhSb1pTQmhjbkpoZVNkeklIWmhiSFZsWEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCemNtTWdXM3RwWkRveGZTeDdhV1E2TW4wc2UybGtPakY5WFZ4dUlDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlGdHJaWGxkWEc0Z0tpQkFjR0Z5WVcwZ2UwSnZiMnhsWVc1OUlGdHpiM0owUFVaaGJITmxYVnh1SUNvZ1FISmxkSFZ5Ym5NZ2UwRnljbUY1ZlNCYmUybGtPakY5TEh0cFpEb3lmVjFjYmlBcUwxeHVablZ1WTNScGIyNGdkVzVwY1hWbFFYSnlZWGtvYzNKakxDQnJaWGtzSUhOdmNuUXBJSHRjYmlBZ0lDQjJZWElnY21WemRXeDBjeUE5SUZ0ZE8xeHVJQ0FnSUhaaGNpQjJZV3gxWlhNZ1BTQmJYVHRjYmlBZ0lDQjJZWElnYVNBOUlEQTdYRzVjYmlBZ0lDQjNhR2xzWlNBb2FTQThJSE55WXk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpoYkNBOUlHdGxlU0EvSUhOeVkxdHBYVnRyWlhsZElEb2djM0pqVzJsZE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYVc1QmNuSmhlU2gyWVd4MVpYTXNJSFpoYkNrZ1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSekxuQjFjMmdvYzNKalcybGRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMllXeDFaWE5iYVYwZ1BTQjJZV3c3WEc0Z0lDQWdJQ0FnSUdrckt6dGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jMjl5ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVd0bGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwY3lBOUlISmxjM1ZzZEhNdWMyOXlkQ2dwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MGN5QTlJSEpsYzNWc2RITXVjMjl5ZENobWRXNWpkR2x2YmlCemIzSjBWVzVwY1hWbFFYSnlZWGtvWVN3Z1lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmhXMnRsZVYwZ1BpQmlXMnRsZVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUnpPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlHZGxkQ0IwYUdVZ2NISmxabWw0WldRZ2NISnZjR1Z5ZEhsY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZZbXBjYmlBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCd2NtOXdaWEowZVZ4dUlDb2dRSEpsZEhWeWJuTWdlMU4wY21sdVozeFZibVJsWm1sdVpXUjlJSEJ5WldacGVHVmtYRzRnS2k5Y2JtWjFibU4wYVc5dUlIQnlaV1pwZUdWa0tHOWlhaXdnY0hKdmNHVnlkSGtwSUh0Y2JpQWdJQ0IyWVhJZ2NISmxabWw0TENCd2NtOXdPMXh1SUNBZ0lIWmhjaUJqWVcxbGJGQnliM0FnUFNCd2NtOXdaWEowZVZzd1hTNTBiMVZ3Y0dWeVEyRnpaU2dwSUNzZ2NISnZjR1Z5ZEhrdWMyeHBZMlVvTVNrN1hHNWNiaUFnSUNCMllYSWdhU0E5SURBN1hHNGdJQ0FnZDJocGJHVWdLR2tnUENCV1JVNUVUMUpmVUZKRlJrbFlSVk11YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUhCeVpXWnBlQ0E5SUZaRlRrUlBVbDlRVWtWR1NWaEZVMXRwWFR0Y2JpQWdJQ0FnSUNBZ2NISnZjQ0E5SUNod2NtVm1hWGdwSUQ4Z2NISmxabWw0SUNzZ1kyRnRaV3hRY205d0lEb2djSEp2Y0dWeWRIazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnliM0FnYVc0Z2IySnFLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NISnZjRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcEt5czdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIxYm1SbFptbHVaV1E3WEc1OVhHNWNiaThxS2x4dUlDb2daMlYwSUdFZ2RXNXBjWFZsSUdsa1hHNGdLaUJBY21WMGRYSnVjeUI3Ym5WdFltVnlmU0IxYm1seGRXVkpaRnh1SUNvdlhHNTJZWElnWDNWdWFYRjFaVWxrSUQwZ01UdGNibVoxYm1OMGFXOXVJSFZ1YVhGMVpVbGtLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmZkVzVwY1hWbFNXUXJLenRjYm4xY2JseHVMeW9xWEc0Z0tpQm5aWFFnZEdobElIZHBibVJ2ZHlCdlltcGxZM1FnYjJZZ1lXNGdaV3hsYldWdWRGeHVJQ29nUUhCaGNtRnRJSHRJVkUxTVJXeGxiV1Z1ZEgwZ1pXeGxiV1Z1ZEZ4dUlDb2dRSEpsZEhWeWJuTWdlMFJ2WTNWdFpXNTBWbWxsZDN4WGFXNWtiM2Q5WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2RsZEZkcGJtUnZkMFp2Y2tWc1pXMWxiblFvWld4bGJXVnVkQ2tnZTF4dUlDQWdJSFpoY2lCa2IyTWdQU0JsYkdWdFpXNTBMbTkzYm1WeVJHOWpkVzFsYm5RZ2ZId2daV3hsYldWdWREdGNiaUFnSUNCeVpYUjFjbTRnS0dSdll5NWtaV1poZFd4MFZtbGxkeUI4ZkNCa2IyTXVjR0Z5Wlc1MFYybHVaRzkzSUh4OElIZHBibVJ2ZHlrN1hHNTlYRzVjYm5aaGNpQk5UMEpKVEVWZlVrVkhSVmdnUFNBdmJXOWlhV3hsZkhSaFlteGxkSHhwY0NoaFpIeG9iMjVsZkc5a0tYeGhibVJ5YjJsa0wyazdYRzVjYm5aaGNpQlRWVkJRVDFKVVgxUlBWVU5JSUQwZ0tDZHZiblJ2ZFdOb2MzUmhjblFuSUdsdUlIZHBibVJ2ZHlrN1hHNTJZWElnVTFWUVVFOVNWRjlRVDBsT1ZFVlNYMFZXUlU1VVV5QTlJSEJ5WldacGVHVmtLSGRwYm1SdmR5d2dKMUJ2YVc1MFpYSkZkbVZ1ZENjcElDRTlQU0IxYm1SbFptbHVaV1E3WEc1MllYSWdVMVZRVUU5U1ZGOVBUa3haWDFSUFZVTklJRDBnVTFWUVVFOVNWRjlVVDFWRFNDQW1KaUJOVDBKSlRFVmZVa1ZIUlZndWRHVnpkQ2h1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwS1R0Y2JseHVkbUZ5SUVsT1VGVlVYMVJaVUVWZlZFOVZRMGdnUFNBbmRHOTFZMmduTzF4dWRtRnlJRWxPVUZWVVgxUlpVRVZmVUVWT0lEMGdKM0JsYmljN1hHNTJZWElnU1U1UVZWUmZWRmxRUlY5TlQxVlRSU0E5SUNkdGIzVnpaU2M3WEc1MllYSWdTVTVRVlZSZlZGbFFSVjlMU1U1RlExUWdQU0FuYTJsdVpXTjBKenRjYmx4dWRtRnlJRU5QVFZCVlZFVmZTVTVVUlZKV1FVd2dQU0F5TlR0Y2JseHVkbUZ5SUVsT1VGVlVYMU5VUVZKVUlEMGdNVHRjYm5aaGNpQkpUbEJWVkY5TlQxWkZJRDBnTWp0Y2JuWmhjaUJKVGxCVlZGOUZUa1FnUFNBME8xeHVkbUZ5SUVsT1VGVlVYME5CVGtORlRDQTlJRGc3WEc1Y2JuWmhjaUJFU1ZKRlExUkpUMDVmVGs5T1JTQTlJREU3WEc1MllYSWdSRWxTUlVOVVNVOU9YMHhGUmxRZ1BTQXlPMXh1ZG1GeUlFUkpVa1ZEVkVsUFRsOVNTVWRJVkNBOUlEUTdYRzUyWVhJZ1JFbFNSVU5VU1U5T1gxVlFJRDBnT0R0Y2JuWmhjaUJFU1ZKRlExUkpUMDVmUkU5WFRpQTlJREUyTzF4dVhHNTJZWElnUkVsU1JVTlVTVTlPWDBoUFVrbGFUMDVVUVV3Z1BTQkVTVkpGUTFSSlQwNWZURVZHVkNCOElFUkpVa1ZEVkVsUFRsOVNTVWRJVkR0Y2JuWmhjaUJFU1ZKRlExUkpUMDVmVmtWU1ZFbERRVXdnUFNCRVNWSkZRMVJKVDA1ZlZWQWdmQ0JFU1ZKRlExUkpUMDVmUkU5WFRqdGNiblpoY2lCRVNWSkZRMVJKVDA1ZlFVeE1JRDBnUkVsU1JVTlVTVTlPWDBoUFVrbGFUMDVVUVV3Z2ZDQkVTVkpGUTFSSlQwNWZWa1ZTVkVsRFFVdzdYRzVjYm5aaGNpQlFVazlRVTE5WVdTQTlJRnNuZUNjc0lDZDVKMTA3WEc1MllYSWdVRkpQVUZOZlEweEpSVTVVWDFoWklEMGdXeWRqYkdsbGJuUllKeXdnSjJOc2FXVnVkRmtuWFR0Y2JseHVMeW9xWEc0Z0tpQmpjbVZoZEdVZ2JtVjNJR2x1Y0hWMElIUjVjR1VnYldGdVlXZGxjbHh1SUNvZ1FIQmhjbUZ0SUh0TllXNWhaMlZ5ZlNCdFlXNWhaMlZ5WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmpZV3hzWW1GamExeHVJQ29nUUhKbGRIVnlibk1nZTBsdWNIVjBmVnh1SUNvZ1FHTnZibk4wY25WamRHOXlYRzRnS2k5Y2JtWjFibU4wYVc5dUlFbHVjSFYwS0cxaGJtRm5aWElzSUdOaGJHeGlZV05yS1NCN1hHNGdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNBZ0lIUm9hWE11YldGdVlXZGxjaUE5SUcxaGJtRm5aWEk3WEc0Z0lDQWdkR2hwY3k1allXeHNZbUZqYXlBOUlHTmhiR3hpWVdOck8xeHVJQ0FnSUhSb2FYTXVaV3hsYldWdWRDQTlJRzFoYm1GblpYSXVaV3hsYldWdWREdGNiaUFnSUNCMGFHbHpMblJoY21kbGRDQTlJRzFoYm1GblpYSXViM0IwYVc5dWN5NXBibkIxZEZSaGNtZGxkRHRjYmx4dUlDQWdJQzh2SUhOdFlXeHNaWElnZDNKaGNIQmxjaUJoY205MWJtUWdkR2hsSUdoaGJtUnNaWElzSUdadmNpQjBhR1VnYzJOdmNHVWdZVzVrSUhSb1pTQmxibUZpYkdWa0lITjBZWFJsSUc5bUlIUm9aU0J0WVc1aFoyVnlMRnh1SUNBZ0lDOHZJSE52SUhkb1pXNGdaR2x6WVdKc1pXUWdkR2hsSUdsdWNIVjBJR1YyWlc1MGN5QmhjbVVnWTI5dGNHeGxkR1ZzZVNCaWVYQmhjM05sWkM1Y2JpQWdJQ0IwYUdsekxtUnZiVWhoYm1Sc1pYSWdQU0JtZFc1amRHbHZiaWhsZGlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWW05dmJFOXlSbTRvYldGdVlXZGxjaTV2Y0hScGIyNXpMbVZ1WVdKc1pTd2dXMjFoYm1GblpYSmRLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1b1lXNWtiR1Z5S0dWMktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQjBhR2x6TG1sdWFYUW9LVHRjYmx4dWZWeHVYRzVKYm5CMWRDNXdjbTkwYjNSNWNHVWdQU0I3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nYzJodmRXeGtJR2hoYm1Sc1pTQjBhR1VnYVc1d2RYUkZkbVZ1ZENCa1lYUmhJR0Z1WkNCMGNtbG5aMlZ5SUhSb1pTQmpZV3hzWW1GamExeHVJQ0FnSUNBcUlFQjJhWEowZFdGc1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxjam9nWm5WdVkzUnBiMjRvS1NCN0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJpYVc1a0lIUm9aU0JsZG1WdWRITmNiaUFnSUNBZ0tpOWNiaUFnSUNCcGJtbDBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsZGtWc0lDWW1JR0ZrWkVWMlpXNTBUR2x6ZEdWdVpYSnpLSFJvYVhNdVpXeGxiV1Z1ZEN3Z2RHaHBjeTVsZGtWc0xDQjBhR2x6TG1SdmJVaGhibVJzWlhJcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WMlZHRnlaMlYwSUNZbUlHRmtaRVYyWlc1MFRHbHpkR1Z1WlhKektIUm9hWE11ZEdGeVoyVjBMQ0IwYUdsekxtVjJWR0Z5WjJWMExDQjBhR2x6TG1SdmJVaGhibVJzWlhJcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WMlYybHVJQ1ltSUdGa1pFVjJaVzUwVEdsemRHVnVaWEp6S0dkbGRGZHBibVJ2ZDBadmNrVnNaVzFsYm5Rb2RHaHBjeTVsYkdWdFpXNTBLU3dnZEdocGN5NWxkbGRwYml3Z2RHaHBjeTVrYjIxSVlXNWtiR1Z5S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ2RXNWlhVzVrSUhSb1pTQmxkbVZ1ZEhOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JrWlhOMGNtOTVPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsZGtWc0lDWW1JSEpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWEp6S0hSb2FYTXVaV3hsYldWdWRDd2dkR2hwY3k1bGRrVnNMQ0IwYUdsekxtUnZiVWhoYm1Sc1pYSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVjJWR0Z5WjJWMElDWW1JSEpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWEp6S0hSb2FYTXVkR0Z5WjJWMExDQjBhR2x6TG1WMlZHRnlaMlYwTENCMGFHbHpMbVJ2YlVoaGJtUnNaWElwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVYyVjJsdUlDWW1JSEpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWEp6S0dkbGRGZHBibVJ2ZDBadmNrVnNaVzFsYm5Rb2RHaHBjeTVsYkdWdFpXNTBLU3dnZEdocGN5NWxkbGRwYml3Z2RHaHBjeTVrYjIxSVlXNWtiR1Z5S1R0Y2JpQWdJQ0I5WEc1OU8xeHVYRzR2S2lwY2JpQXFJR055WldGMFpTQnVaWGNnYVc1d2RYUWdkSGx3WlNCdFlXNWhaMlZ5WEc0Z0tpQmpZV3hzWldRZ1lua2dkR2hsSUUxaGJtRm5aWElnWTI5dWMzUnlkV04wYjNKY2JpQXFJRUJ3WVhKaGJTQjdTR0Z0YldWeWZTQnRZVzVoWjJWeVhHNGdLaUJBY21WMGRYSnVjeUI3U1c1d2RYUjlYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlVsdWNIVjBTVzV6ZEdGdVkyVW9iV0Z1WVdkbGNpa2dlMXh1SUNBZ0lIWmhjaUJVZVhCbE8xeHVJQ0FnSUhaaGNpQnBibkIxZEVOc1lYTnpJRDBnYldGdVlXZGxjaTV2Y0hScGIyNXpMbWx1Y0hWMFEyeGhjM003WEc1Y2JpQWdJQ0JwWmlBb2FXNXdkWFJEYkdGemN5a2dlMXh1SUNBZ0lDQWdJQ0JVZVhCbElEMGdhVzV3ZFhSRGJHRnpjenRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLRk5WVUZCUFVsUmZVRTlKVGxSRlVsOUZWa1ZPVkZNcElIdGNiaUFnSUNBZ0lDQWdWSGx3WlNBOUlGQnZhVzUwWlhKRmRtVnVkRWx1Y0hWME8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1UxVlFVRTlTVkY5UFRreFpYMVJQVlVOSUtTQjdYRzRnSUNBZ0lDQWdJRlI1Y0dVZ1BTQlViM1ZqYUVsdWNIVjBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9JVk5WVUZCUFVsUmZWRTlWUTBncElIdGNiaUFnSUNBZ0lDQWdWSGx3WlNBOUlFMXZkWE5sU1c1d2RYUTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1ZIbHdaU0E5SUZSdmRXTm9UVzkxYzJWSmJuQjFkRHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QW9WSGx3WlNrb2JXRnVZV2RsY2l3Z2FXNXdkWFJJWVc1a2JHVnlLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQm9ZVzVrYkdVZ2FXNXdkWFFnWlhabGJuUnpYRzRnS2lCQWNHRnlZVzBnZTAxaGJtRm5aWEo5SUcxaGJtRm5aWEpjYmlBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCbGRtVnVkRlI1Y0dWY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnBibkIxZEZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYm5CMWRFaGhibVJzWlhJb2JXRnVZV2RsY2l3Z1pYWmxiblJVZVhCbExDQnBibkIxZENrZ2UxeHVJQ0FnSUhaaGNpQndiMmx1ZEdWeWMweGxiaUE5SUdsdWNIVjBMbkJ2YVc1MFpYSnpMbXhsYm1kMGFEdGNiaUFnSUNCMllYSWdZMmhoYm1kbFpGQnZhVzUwWlhKelRHVnVJRDBnYVc1d2RYUXVZMmhoYm1kbFpGQnZhVzUwWlhKekxteGxibWQwYUR0Y2JpQWdJQ0IyWVhJZ2FYTkdhWEp6ZENBOUlDaGxkbVZ1ZEZSNWNHVWdKaUJKVGxCVlZGOVRWRUZTVkNBbUppQW9jRzlwYm5SbGNuTk1aVzRnTFNCamFHRnVaMlZrVUc5cGJuUmxjbk5NWlc0Z1BUMDlJREFwS1R0Y2JpQWdJQ0IyWVhJZ2FYTkdhVzVoYkNBOUlDaGxkbVZ1ZEZSNWNHVWdKaUFvU1U1UVZWUmZSVTVFSUh3Z1NVNVFWVlJmUTBGT1EwVk1LU0FtSmlBb2NHOXBiblJsY25OTVpXNGdMU0JqYUdGdVoyVmtVRzlwYm5SbGNuTk1aVzRnUFQwOUlEQXBLVHRjYmx4dUlDQWdJR2x1Y0hWMExtbHpSbWx5YzNRZ1BTQWhJV2x6Um1seWMzUTdYRzRnSUNBZ2FXNXdkWFF1YVhOR2FXNWhiQ0E5SUNFaGFYTkdhVzVoYkR0Y2JseHVJQ0FnSUdsbUlDaHBjMFpwY25OMEtTQjdYRzRnSUNBZ0lDQWdJRzFoYm1GblpYSXVjMlZ6YzJsdmJpQTlJSHQ5TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUhOdmRYSmpaU0JsZG1WdWRDQnBjeUIwYUdVZ2JtOXliV0ZzYVhwbFpDQjJZV3gxWlNCdlppQjBhR1VnWkc5dFJYWmxiblJ6WEc0Z0lDQWdMeThnYkdsclpTQW5kRzkxWTJoemRHRnlkQ3dnYlc5MWMyVjFjQ3dnY0c5cGJuUmxjbVJ2ZDI0blhHNGdJQ0FnYVc1d2RYUXVaWFpsYm5SVWVYQmxJRDBnWlhabGJuUlVlWEJsTzF4dVhHNGdJQ0FnTHk4Z1kyOXRjSFYwWlNCelkyRnNaU3dnY205MFlYUnBiMjRnWlhSalhHNGdJQ0FnWTI5dGNIVjBaVWx1Y0hWMFJHRjBZU2h0WVc1aFoyVnlMQ0JwYm5CMWRDazdYRzVjYmlBZ0lDQXZMeUJsYldsMElITmxZM0psZENCbGRtVnVkRnh1SUNBZ0lHMWhibUZuWlhJdVpXMXBkQ2duYUdGdGJXVnlMbWx1Y0hWMEp5d2dhVzV3ZFhRcE8xeHVYRzRnSUNBZ2JXRnVZV2RsY2k1eVpXTnZaMjVwZW1Vb2FXNXdkWFFwTzF4dUlDQWdJRzFoYm1GblpYSXVjMlZ6YzJsdmJpNXdjbVYyU1c1d2RYUWdQU0JwYm5CMWREdGNibjFjYmx4dUx5b3FYRzRnS2lCbGVIUmxibVFnZEdobElHUmhkR0VnZDJsMGFDQnpiMjFsSUhWellXSnNaU0J3Y205d1pYSjBhV1Z6SUd4cGEyVWdjMk5oYkdVc0lISnZkR0YwWlN3Z2RtVnNiMk5wZEhrZ1pYUmpYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYldGdVlXZGxjbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdsdWNIVjBYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnZiWEIxZEdWSmJuQjFkRVJoZEdFb2JXRnVZV2RsY2l3Z2FXNXdkWFFwSUh0Y2JpQWdJQ0IyWVhJZ2MyVnpjMmx2YmlBOUlHMWhibUZuWlhJdWMyVnpjMmx2Ymp0Y2JpQWdJQ0IyWVhJZ2NHOXBiblJsY25NZ1BTQnBibkIxZEM1d2IybHVkR1Z5Y3p0Y2JpQWdJQ0IyWVhJZ2NHOXBiblJsY25OTVpXNW5kR2dnUFNCd2IybHVkR1Z5Y3k1c1pXNW5kR2c3WEc1Y2JpQWdJQ0F2THlCemRHOXlaU0IwYUdVZ1ptbHljM1FnYVc1d2RYUWdkRzhnWTJGc1kzVnNZWFJsSUhSb1pTQmthWE4wWVc1alpTQmhibVFnWkdseVpXTjBhVzl1WEc0Z0lDQWdhV1lnS0NGelpYTnphVzl1TG1acGNuTjBTVzV3ZFhRcElIdGNiaUFnSUNBZ0lDQWdjMlZ6YzJsdmJpNW1hWEp6ZEVsdWNIVjBJRDBnYzJsdGNHeGxRMnh2Ym1WSmJuQjFkRVJoZEdFb2FXNXdkWFFwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUhSdklHTnZiWEIxZEdVZ2MyTmhiR1VnWVc1a0lISnZkR0YwYVc5dUlIZGxJRzVsWldRZ2RHOGdjM1J2Y21VZ2RHaGxJRzExYkhScGNHeGxJSFJ2ZFdOb1pYTmNiaUFnSUNCcFppQW9jRzlwYm5SbGNuTk1aVzVuZEdnZ1BpQXhJQ1ltSUNGelpYTnphVzl1TG1acGNuTjBUWFZzZEdsd2JHVXBJSHRjYmlBZ0lDQWdJQ0FnYzJWemMybHZiaTVtYVhKemRFMTFiSFJwY0d4bElEMGdjMmx0Y0d4bFEyeHZibVZKYm5CMWRFUmhkR0VvYVc1d2RYUXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9jRzlwYm5SbGNuTk1aVzVuZEdnZ1BUMDlJREVwSUh0Y2JpQWdJQ0FnSUNBZ2MyVnpjMmx2Ymk1bWFYSnpkRTExYkhScGNHeGxJRDBnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJR1pwY25OMFNXNXdkWFFnUFNCelpYTnphVzl1TG1acGNuTjBTVzV3ZFhRN1hHNGdJQ0FnZG1GeUlHWnBjbk4wVFhWc2RHbHdiR1VnUFNCelpYTnphVzl1TG1acGNuTjBUWFZzZEdsd2JHVTdYRzRnSUNBZ2RtRnlJRzltWm5ObGRFTmxiblJsY2lBOUlHWnBjbk4wVFhWc2RHbHdiR1VnUHlCbWFYSnpkRTExYkhScGNHeGxMbU5sYm5SbGNpQTZJR1pwY25OMFNXNXdkWFF1WTJWdWRHVnlPMXh1WEc0Z0lDQWdkbUZ5SUdObGJuUmxjaUE5SUdsdWNIVjBMbU5sYm5SbGNpQTlJR2RsZEVObGJuUmxjaWh3YjJsdWRHVnljeWs3WEc0Z0lDQWdhVzV3ZFhRdWRHbHRaVk4wWVcxd0lEMGdibTkzS0NrN1hHNGdJQ0FnYVc1d2RYUXVaR1ZzZEdGVWFXMWxJRDBnYVc1d2RYUXVkR2x0WlZOMFlXMXdJQzBnWm1seWMzUkpibkIxZEM1MGFXMWxVM1JoYlhBN1hHNWNiaUFnSUNCcGJuQjFkQzVoYm1kc1pTQTlJR2RsZEVGdVoyeGxLRzltWm5ObGRFTmxiblJsY2l3Z1kyVnVkR1Z5S1R0Y2JpQWdJQ0JwYm5CMWRDNWthWE4wWVc1alpTQTlJR2RsZEVScGMzUmhibU5sS0c5bVpuTmxkRU5sYm5SbGNpd2dZMlZ1ZEdWeUtUdGNibHh1SUNBZ0lHTnZiWEIxZEdWRVpXeDBZVmhaS0hObGMzTnBiMjRzSUdsdWNIVjBLVHRjYmlBZ0lDQnBibkIxZEM1dlptWnpaWFJFYVhKbFkzUnBiMjRnUFNCblpYUkVhWEpsWTNScGIyNG9hVzV3ZFhRdVpHVnNkR0ZZTENCcGJuQjFkQzVrWld4MFlWa3BPMXh1WEc0Z0lDQWdkbUZ5SUc5MlpYSmhiR3hXWld4dlkybDBlU0E5SUdkbGRGWmxiRzlqYVhSNUtHbHVjSFYwTG1SbGJIUmhWR2x0WlN3Z2FXNXdkWFF1WkdWc2RHRllMQ0JwYm5CMWRDNWtaV3gwWVZrcE8xeHVJQ0FnSUdsdWNIVjBMbTkyWlhKaGJHeFdaV3h2WTJsMGVWZ2dQU0J2ZG1WeVlXeHNWbVZzYjJOcGRIa3VlRHRjYmlBZ0lDQnBibkIxZEM1dmRtVnlZV3hzVm1Wc2IyTnBkSGxaSUQwZ2IzWmxjbUZzYkZabGJHOWphWFI1TG5rN1hHNGdJQ0FnYVc1d2RYUXViM1psY21Gc2JGWmxiRzlqYVhSNUlEMGdLR0ZpY3lodmRtVnlZV3hzVm1Wc2IyTnBkSGt1ZUNrZ1BpQmhZbk1vYjNabGNtRnNiRlpsYkc5amFYUjVMbmtwS1NBL0lHOTJaWEpoYkd4V1pXeHZZMmwwZVM1NElEb2diM1psY21Gc2JGWmxiRzlqYVhSNUxuazdYRzVjYmlBZ0lDQnBibkIxZEM1elkyRnNaU0E5SUdacGNuTjBUWFZzZEdsd2JHVWdQeUJuWlhSVFkyRnNaU2htYVhKemRFMTFiSFJwY0d4bExuQnZhVzUwWlhKekxDQndiMmx1ZEdWeWN5a2dPaUF4TzF4dUlDQWdJR2x1Y0hWMExuSnZkR0YwYVc5dUlEMGdabWx5YzNSTmRXeDBhWEJzWlNBL0lHZGxkRkp2ZEdGMGFXOXVLR1pwY25OMFRYVnNkR2x3YkdVdWNHOXBiblJsY25Nc0lIQnZhVzUwWlhKektTQTZJREE3WEc1Y2JpQWdJQ0JwYm5CMWRDNXRZWGhRYjJsdWRHVnljeUE5SUNGelpYTnphVzl1TG5CeVpYWkpibkIxZENBL0lHbHVjSFYwTG5CdmFXNTBaWEp6TG14bGJtZDBhQ0E2SUNnb2FXNXdkWFF1Y0c5cGJuUmxjbk11YkdWdVozUm9JRDVjYmlBZ0lDQWdJQ0FnYzJWemMybHZiaTV3Y21WMlNXNXdkWFF1YldGNFVHOXBiblJsY25NcElEOGdhVzV3ZFhRdWNHOXBiblJsY25NdWJHVnVaM1JvSURvZ2MyVnpjMmx2Ymk1d2NtVjJTVzV3ZFhRdWJXRjRVRzlwYm5SbGNuTXBPMXh1WEc0Z0lDQWdZMjl0Y0hWMFpVbHVkR1Z5ZG1Gc1NXNXdkWFJFWVhSaEtITmxjM05wYjI0c0lHbHVjSFYwS1R0Y2JseHVJQ0FnSUM4dklHWnBibVFnZEdobElHTnZjbkpsWTNRZ2RHRnlaMlYwWEc0Z0lDQWdkbUZ5SUhSaGNtZGxkQ0E5SUcxaGJtRm5aWEl1Wld4bGJXVnVkRHRjYmlBZ0lDQnBaaUFvYUdGelVHRnlaVzUwS0dsdWNIVjBMbk55WTBWMlpXNTBMblJoY21kbGRDd2dkR0Z5WjJWMEtTa2dlMXh1SUNBZ0lDQWdJQ0IwWVhKblpYUWdQU0JwYm5CMWRDNXpjbU5GZG1WdWRDNTBZWEpuWlhRN1hHNGdJQ0FnZlZ4dUlDQWdJR2x1Y0hWMExuUmhjbWRsZENBOUlIUmhjbWRsZER0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWTI5dGNIVjBaVVJsYkhSaFdGa29jMlZ6YzJsdmJpd2dhVzV3ZFhRcElIdGNiaUFnSUNCMllYSWdZMlZ1ZEdWeUlEMGdhVzV3ZFhRdVkyVnVkR1Z5TzF4dUlDQWdJSFpoY2lCdlptWnpaWFFnUFNCelpYTnphVzl1TG05bVpuTmxkRVJsYkhSaElIeDhJSHQ5TzF4dUlDQWdJSFpoY2lCd2NtVjJSR1ZzZEdFZ1BTQnpaWE56YVc5dUxuQnlaWFpFWld4MFlTQjhmQ0I3ZlR0Y2JpQWdJQ0IyWVhJZ2NISmxka2x1Y0hWMElEMGdjMlZ6YzJsdmJpNXdjbVYyU1c1d2RYUWdmSHdnZTMwN1hHNWNiaUFnSUNCcFppQW9hVzV3ZFhRdVpYWmxiblJVZVhCbElEMDlQU0JKVGxCVlZGOVRWRUZTVkNCOGZDQndjbVYyU1c1d2RYUXVaWFpsYm5SVWVYQmxJRDA5UFNCSlRsQlZWRjlGVGtRcElIdGNiaUFnSUNBZ0lDQWdjSEpsZGtSbGJIUmhJRDBnYzJWemMybHZiaTV3Y21WMlJHVnNkR0VnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I0T2lCd2NtVjJTVzV3ZFhRdVpHVnNkR0ZZSUh4OElEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCNU9pQndjbVYyU1c1d2RYUXVaR1ZzZEdGWklIeDhJREJjYmlBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQnZabVp6WlhRZ1BTQnpaWE56YVc5dUxtOW1abk5sZEVSbGJIUmhJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdlRG9nWTJWdWRHVnlMbmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjVPaUJqWlc1MFpYSXVlVnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2x1Y0hWMExtUmxiSFJoV0NBOUlIQnlaWFpFWld4MFlTNTRJQ3NnS0dObGJuUmxjaTU0SUMwZ2IyWm1jMlYwTG5ncE8xeHVJQ0FnSUdsdWNIVjBMbVJsYkhSaFdTQTlJSEJ5WlhaRVpXeDBZUzU1SUNzZ0tHTmxiblJsY2k1NUlDMGdiMlptYzJWMExua3BPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlIWmxiRzlqYVhSNUlHbHpJR05oYkdOMWJHRjBaV1FnWlhabGNua2dlQ0J0YzF4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlITmxjM05wYjI1Y2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnBibkIxZEZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJqYjIxd2RYUmxTVzUwWlhKMllXeEpibkIxZEVSaGRHRW9jMlZ6YzJsdmJpd2dhVzV3ZFhRcElIdGNiaUFnSUNCMllYSWdiR0Z6ZENBOUlITmxjM05wYjI0dWJHRnpkRWx1ZEdWeWRtRnNJSHg4SUdsdWNIVjBMRnh1SUNBZ0lDQWdJQ0JrWld4MFlWUnBiV1VnUFNCcGJuQjFkQzUwYVcxbFUzUmhiWEFnTFNCc1lYTjBMblJwYldWVGRHRnRjQ3hjYmlBZ0lDQWdJQ0FnZG1Wc2IyTnBkSGtzSUhabGJHOWphWFI1V0N3Z2RtVnNiMk5wZEhsWkxDQmthWEpsWTNScGIyNDdYRzVjYmlBZ0lDQnBaaUFvYVc1d2RYUXVaWFpsYm5SVWVYQmxJQ0U5SUVsT1VGVlVYME5CVGtORlRDQW1KaUFvWkdWc2RHRlVhVzFsSUQ0Z1EwOU5VRlZVUlY5SlRsUkZVbFpCVENCOGZDQnNZWE4wTG5abGJHOWphWFI1SUQwOVBTQjFibVJsWm1sdVpXUXBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtaV3gwWVZnZ1BTQnBibkIxZEM1a1pXeDBZVmdnTFNCc1lYTjBMbVJsYkhSaFdEdGNiaUFnSUNBZ0lDQWdkbUZ5SUdSbGJIUmhXU0E5SUdsdWNIVjBMbVJsYkhSaFdTQXRJR3hoYzNRdVpHVnNkR0ZaTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUIySUQwZ1oyVjBWbVZzYjJOcGRIa29aR1ZzZEdGVWFXMWxMQ0JrWld4MFlWZ3NJR1JsYkhSaFdTazdYRzRnSUNBZ0lDQWdJSFpsYkc5amFYUjVXQ0E5SUhZdWVEdGNiaUFnSUNBZ0lDQWdkbVZzYjJOcGRIbFpJRDBnZGk1NU8xeHVJQ0FnSUNBZ0lDQjJaV3h2WTJsMGVTQTlJQ2hoWW5Nb2RpNTRLU0ErSUdGaWN5aDJMbmtwS1NBL0lIWXVlQ0E2SUhZdWVUdGNiaUFnSUNBZ0lDQWdaR2x5WldOMGFXOXVJRDBnWjJWMFJHbHlaV04wYVc5dUtHUmxiSFJoV0N3Z1pHVnNkR0ZaS1R0Y2JseHVJQ0FnSUNBZ0lDQnpaWE56YVc5dUxteGhjM1JKYm5SbGNuWmhiQ0E5SUdsdWNIVjBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDOHZJSFZ6WlNCc1lYUmxjM1FnZG1Wc2IyTnBkSGtnYVc1bWJ5QnBaaUJwZENCa2IyVnpiaWQwSUc5MlpYSjBZV3RsSUdFZ2JXbHVhVzExYlNCd1pYSnBiMlJjYmlBZ0lDQWdJQ0FnZG1Wc2IyTnBkSGtnUFNCc1lYTjBMblpsYkc5amFYUjVPMXh1SUNBZ0lDQWdJQ0IyWld4dlkybDBlVmdnUFNCc1lYTjBMblpsYkc5amFYUjVXRHRjYmlBZ0lDQWdJQ0FnZG1Wc2IyTnBkSGxaSUQwZ2JHRnpkQzUyWld4dlkybDBlVms3WEc0Z0lDQWdJQ0FnSUdScGNtVmpkR2x2YmlBOUlHeGhjM1F1WkdseVpXTjBhVzl1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2x1Y0hWMExuWmxiRzlqYVhSNUlEMGdkbVZzYjJOcGRIazdYRzRnSUNBZ2FXNXdkWFF1ZG1Wc2IyTnBkSGxZSUQwZ2RtVnNiMk5wZEhsWU8xeHVJQ0FnSUdsdWNIVjBMblpsYkc5amFYUjVXU0E5SUhabGJHOWphWFI1V1R0Y2JpQWdJQ0JwYm5CMWRDNWthWEpsWTNScGIyNGdQU0JrYVhKbFkzUnBiMjQ3WEc1OVhHNWNiaThxS2x4dUlDb2dZM0psWVhSbElHRWdjMmx0Y0d4bElHTnNiMjVsSUdaeWIyMGdkR2hsSUdsdWNIVjBJSFZ6WldRZ1ptOXlJSE4wYjNKaFoyVWdiMllnWm1seWMzUkpibkIxZENCaGJtUWdabWx5YzNSTmRXeDBhWEJzWlZ4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHbHVjSFYwWEc0Z0tpQkFjbVYwZFhKdWN5QjdUMkpxWldOMGZTQmpiRzl1WldSSmJuQjFkRVJoZEdGY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYzJsdGNHeGxRMnh2Ym1WSmJuQjFkRVJoZEdFb2FXNXdkWFFwSUh0Y2JpQWdJQ0F2THlCdFlXdGxJR0VnYzJsdGNHeGxJR052Y0hrZ2IyWWdkR2hsSUhCdmFXNTBaWEp6SUdKbFkyRjFjMlVnZDJVZ2QybHNiQ0JuWlhRZ1lTQnlaV1psY21WdVkyVWdhV1lnZDJVZ1pHOXVKM1JjYmlBZ0lDQXZMeUIzWlNCdmJteDVJRzVsWldRZ1kyeHBaVzUwV0ZrZ1ptOXlJSFJvWlNCallXeGpkV3hoZEdsdmJuTmNiaUFnSUNCMllYSWdjRzlwYm5SbGNuTWdQU0JiWFR0Y2JpQWdJQ0IyWVhJZ2FTQTlJREE3WEc0Z0lDQWdkMmhwYkdVZ0tHa2dQQ0JwYm5CMWRDNXdiMmx1ZEdWeWN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdjRzlwYm5SbGNuTmJhVjBnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdsbGJuUllPaUJ5YjNWdVpDaHBibkIxZEM1d2IybHVkR1Z5YzF0cFhTNWpiR2xsYm5SWUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc2FXVnVkRms2SUhKdmRXNWtLR2x1Y0hWMExuQnZhVzUwWlhKelcybGRMbU5zYVdWdWRGa3BYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUdrckt6dGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCMGFXMWxVM1JoYlhBNklHNXZkeWdwTEZ4dUlDQWdJQ0FnSUNCd2IybHVkR1Z5Y3pvZ2NHOXBiblJsY25Nc1hHNGdJQ0FnSUNBZ0lHTmxiblJsY2pvZ1oyVjBRMlZ1ZEdWeUtIQnZhVzUwWlhKektTeGNiaUFnSUNBZ0lDQWdaR1ZzZEdGWU9pQnBibkIxZEM1a1pXeDBZVmdzWEc0Z0lDQWdJQ0FnSUdSbGJIUmhXVG9nYVc1d2RYUXVaR1ZzZEdGWlhHNGdJQ0FnZlR0Y2JuMWNibHh1THlvcVhHNGdLaUJuWlhRZ2RHaGxJR05sYm5SbGNpQnZaaUJoYkd3Z2RHaGxJSEJ2YVc1MFpYSnpYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0J3YjJsdWRHVnljMXh1SUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZlNCalpXNTBaWElnWTI5dWRHRnBibk1nWUhoZ0lHRnVaQ0JnZVdBZ2NISnZjR1Z5ZEdsbGMxeHVJQ292WEc1bWRXNWpkR2x2YmlCblpYUkRaVzUwWlhJb2NHOXBiblJsY25NcElIdGNiaUFnSUNCMllYSWdjRzlwYm5SbGNuTk1aVzVuZEdnZ1BTQndiMmx1ZEdWeWN5NXNaVzVuZEdnN1hHNWNiaUFnSUNBdkx5QnVieUJ1WldWa0lIUnZJR3h2YjNBZ2QyaGxiaUJ2Ym14NUlHOXVaU0IwYjNWamFGeHVJQ0FnSUdsbUlDaHdiMmx1ZEdWeWMweGxibWQwYUNBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdlRG9nY205MWJtUW9jRzlwYm5SbGNuTmJNRjB1WTJ4cFpXNTBXQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjVPaUJ5YjNWdVpDaHdiMmx1ZEdWeWMxc3dYUzVqYkdsbGJuUlpLVnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCNElEMGdNQ3dnZVNBOUlEQXNJR2tnUFNBd08xeHVJQ0FnSUhkb2FXeGxJQ2hwSUR3Z2NHOXBiblJsY25OTVpXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2VDQXJQU0J3YjJsdWRHVnljMXRwWFM1amJHbGxiblJZTzF4dUlDQWdJQ0FnSUNCNUlDczlJSEJ2YVc1MFpYSnpXMmxkTG1Oc2FXVnVkRms3WEc0Z0lDQWdJQ0FnSUdrckt6dGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCNE9pQnliM1Z1WkNoNElDOGdjRzlwYm5SbGNuTk1aVzVuZEdncExGeHVJQ0FnSUNBZ0lDQjVPaUJ5YjNWdVpDaDVJQzhnY0c5cGJuUmxjbk5NWlc1bmRHZ3BYRzRnSUNBZ2ZUdGNibjFjYmx4dUx5b3FYRzRnS2lCallXeGpkV3hoZEdVZ2RHaGxJSFpsYkc5amFYUjVJR0psZEhkbFpXNGdkSGR2SUhCdmFXNTBjeTRnZFc1cGRDQnBjeUJwYmlCd2VDQndaWElnYlhNdVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdaR1ZzZEdGVWFXMWxYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZUZ4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlIbGNiaUFxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDBnZG1Wc2IyTnBkSGtnWUhoZ0lHRnVaQ0JnZVdCY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWMFZtVnNiMk5wZEhrb1pHVnNkR0ZVYVcxbExDQjRMQ0I1S1NCN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnZURvZ2VDQXZJR1JsYkhSaFZHbHRaU0I4ZkNBd0xGeHVJQ0FnSUNBZ0lDQjVPaUI1SUM4Z1pHVnNkR0ZVYVcxbElIeDhJREJjYmlBZ0lDQjlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlHZGxkQ0IwYUdVZ1pHbHlaV04wYVc5dUlHSmxkSGRsWlc0Z2RIZHZJSEJ2YVc1MGMxeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJSGhjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCNVhHNGdLaUJBY21WMGRYSnVJSHRPZFcxaVpYSjlJR1JwY21WamRHbHZibHh1SUNvdlhHNW1kVzVqZEdsdmJpQm5aWFJFYVhKbFkzUnBiMjRvZUN3Z2VTa2dlMXh1SUNBZ0lHbG1JQ2g0SUQwOVBTQjVLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJFU1ZKRlExUkpUMDVmVGs5T1JUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9ZV0p6S0hncElENDlJR0ZpY3loNUtTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdlQ0E4SURBZ1B5QkVTVkpGUTFSSlQwNWZURVZHVkNBNklFUkpVa1ZEVkVsUFRsOVNTVWRJVkR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIa2dQQ0F3SUQ4Z1JFbFNSVU5VU1U5T1gxVlFJRG9nUkVsU1JVTlVTVTlPWDBSUFYwNDdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1kyRnNZM1ZzWVhSbElIUm9aU0JoWW5OdmJIVjBaU0JrYVhOMFlXNWpaU0JpWlhSM1pXVnVJSFIzYnlCd2IybHVkSE5jYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCd01TQjdlQ3dnZVgxY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQndNaUI3ZUN3Z2VYMWNiaUFxSUVCd1lYSmhiU0I3UVhKeVlYbDlJRnR3Y205d2MxMGdZMjl1ZEdGcGJtbHVaeUI0SUdGdVpDQjVJR3RsZVhOY2JpQXFJRUJ5WlhSMWNtNGdlMDUxYldKbGNuMGdaR2x6ZEdGdVkyVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBSR2x6ZEdGdVkyVW9jREVzSUhBeUxDQndjbTl3Y3lrZ2UxeHVJQ0FnSUdsbUlDZ2hjSEp2Y0hNcElIdGNiaUFnSUNBZ0lDQWdjSEp2Y0hNZ1BTQlFVazlRVTE5WVdUdGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlIZ2dQU0J3TWx0d2NtOXdjMXN3WFYwZ0xTQndNVnR3Y205d2Mxc3dYVjBzWEc0Z0lDQWdJQ0FnSUhrZ1BTQndNbHR3Y205d2Mxc3hYVjBnTFNCd01WdHdjbTl3YzFzeFhWMDdYRzVjYmlBZ0lDQnlaWFIxY200Z1RXRjBhQzV6Y1hKMEtDaDRJQ29nZUNrZ0t5QW9lU0FxSUhrcEtUdGNibjFjYmx4dUx5b3FYRzRnS2lCallXeGpkV3hoZEdVZ2RHaGxJR0Z1WjJ4bElHSmxkSGRsWlc0Z2RIZHZJR052YjNKa2FXNWhkR1Z6WEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2NERmNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J3TWx4dUlDb2dRSEJoY21GdElIdEJjbkpoZVgwZ1czQnliM0J6WFNCamIyNTBZV2x1YVc1bklIZ2dZVzVrSUhrZ2EyVjVjMXh1SUNvZ1FISmxkSFZ5YmlCN1RuVnRZbVZ5ZlNCaGJtZHNaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQm5aWFJCYm1kc1pTaHdNU3dnY0RJc0lIQnliM0J6S1NCN1hHNGdJQ0FnYVdZZ0tDRndjbTl3Y3lrZ2UxeHVJQ0FnSUNBZ0lDQndjbTl3Y3lBOUlGQlNUMUJUWDFoWk8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ2VDQTlJSEF5VzNCeWIzQnpXekJkWFNBdElIQXhXM0J5YjNCeld6QmRYU3hjYmlBZ0lDQWdJQ0FnZVNBOUlIQXlXM0J5YjNCeld6RmRYU0F0SUhBeFczQnliM0J6V3pGZFhUdGNiaUFnSUNCeVpYUjFjbTRnVFdGMGFDNWhkR0Z1TWloNUxDQjRLU0FxSURFNE1DQXZJRTFoZEdndVVFazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1kyRnNZM1ZzWVhSbElIUm9aU0J5YjNSaGRHbHZiaUJrWldkeVpXVnpJR0psZEhkbFpXNGdkSGR2SUhCdmFXNTBaWEp6WlhSelhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQnpkR0Z5ZENCaGNuSmhlU0J2WmlCd2IybHVkR1Z5YzF4dUlDb2dRSEJoY21GdElIdEJjbkpoZVgwZ1pXNWtJR0Z5Y21GNUlHOW1JSEJ2YVc1MFpYSnpYRzRnS2lCQWNtVjBkWEp1SUh0T2RXMWlaWEo5SUhKdmRHRjBhVzl1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2RsZEZKdmRHRjBhVzl1S0hOMFlYSjBMQ0JsYm1RcElIdGNiaUFnSUNCeVpYUjFjbTRnWjJWMFFXNW5iR1VvWlc1a1d6RmRMQ0JsYm1SYk1GMHNJRkJTVDFCVFgwTk1TVVZPVkY5WVdTa2dLeUJuWlhSQmJtZHNaU2h6ZEdGeWRGc3hYU3dnYzNSaGNuUmJNRjBzSUZCU1QxQlRYME5NU1VWT1ZGOVlXU2s3WEc1OVhHNWNiaThxS2x4dUlDb2dZMkZzWTNWc1lYUmxJSFJvWlNCelkyRnNaU0JtWVdOMGIzSWdZbVYwZDJWbGJpQjBkMjhnY0c5cGJuUmxjbk5sZEhOY2JpQXFJRzV2SUhOallXeGxJR2x6SURFc0lHRnVaQ0JuYjJWeklHUnZkMjRnZEc4Z01DQjNhR1Z1SUhCcGJtTm9aV1FnZEc5blpYUm9aWElzSUdGdVpDQmlhV2RuWlhJZ2QyaGxiaUJ3YVc1amFHVmtJRzkxZEZ4dUlDb2dRSEJoY21GdElIdEJjbkpoZVgwZ2MzUmhjblFnWVhKeVlYa2diMllnY0c5cGJuUmxjbk5jYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUdWdVpDQmhjbkpoZVNCdlppQndiMmx1ZEdWeWMxeHVJQ29nUUhKbGRIVnliaUI3VG5WdFltVnlmU0J6WTJGc1pWeHVJQ292WEc1bWRXNWpkR2x2YmlCblpYUlRZMkZzWlNoemRHRnlkQ3dnWlc1a0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUdkbGRFUnBjM1JoYm1ObEtHVnVaRnN3WFN3Z1pXNWtXekZkTENCUVVrOVFVMTlEVEVsRlRsUmZXRmtwSUM4Z1oyVjBSR2x6ZEdGdVkyVW9jM1JoY25SYk1GMHNJSE4wWVhKMFd6RmRMQ0JRVWs5UVUxOURURWxGVGxSZldGa3BPMXh1ZlZ4dVhHNTJZWElnVFU5VlUwVmZTVTVRVlZSZlRVRlFJRDBnZTF4dUlDQWdJRzF2ZFhObFpHOTNiam9nU1U1UVZWUmZVMVJCVWxRc1hHNGdJQ0FnYlc5MWMyVnRiM1psT2lCSlRsQlZWRjlOVDFaRkxGeHVJQ0FnSUcxdmRYTmxkWEE2SUVsT1VGVlVYMFZPUkZ4dWZUdGNibHh1ZG1GeUlFMVBWVk5GWDBWTVJVMUZUbFJmUlZaRlRsUlRJRDBnSjIxdmRYTmxaRzkzYmljN1hHNTJZWElnVFU5VlUwVmZWMGxPUkU5WFgwVldSVTVVVXlBOUlDZHRiM1Z6WlcxdmRtVWdiVzkxYzJWMWNDYzdYRzVjYmk4cUtseHVJQ29nVFc5MWMyVWdaWFpsYm5SeklHbHVjSFYwWEc0Z0tpQkFZMjl1YzNSeWRXTjBiM0pjYmlBcUlFQmxlSFJsYm1SeklFbHVjSFYwWEc0Z0tpOWNibVoxYm1OMGFXOXVJRTF2ZFhObFNXNXdkWFFvS1NCN1hHNGdJQ0FnZEdocGN5NWxka1ZzSUQwZ1RVOVZVMFZmUlV4RlRVVk9WRjlGVmtWT1ZGTTdYRzRnSUNBZ2RHaHBjeTVsZGxkcGJpQTlJRTFQVlZORlgxZEpUa1JQVjE5RlZrVk9WRk03WEc1Y2JpQWdJQ0IwYUdsekxuQnlaWE56WldRZ1BTQm1ZV3h6WlRzZ0x5OGdiVzkxYzJWa2IzZHVJSE4wWVhSbFhHNWNiaUFnSUNCSmJuQjFkQzVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVmVnh1WEc1cGJtaGxjbWwwS0UxdmRYTmxTVzV3ZFhRc0lFbHVjSFYwTENCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ2FHRnVaR3hsSUcxdmRYTmxJR1YyWlc1MGMxeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCbGRseHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaWEk2SUdaMWJtTjBhVzl1SUUxRmFHRnVaR3hsY2lobGRpa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pYWmxiblJVZVhCbElEMGdUVTlWVTBWZlNVNVFWVlJmVFVGUVcyVjJMblI1Y0dWZE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUc5dUlITjBZWEowSUhkbElIZGhiblFnZEc4Z2FHRjJaU0IwYUdVZ2JHVm1kQ0J0YjNWelpTQmlkWFIwYjI0Z1pHOTNibHh1SUNBZ0lDQWdJQ0JwWmlBb1pYWmxiblJVZVhCbElDWWdTVTVRVlZSZlUxUkJVbFFnSmlZZ1pYWXVZblYwZEc5dUlEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnlaWE56WldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0dWMlpXNTBWSGx3WlNBbUlFbE9VRlZVWDAxUFZrVWdKaVlnWlhZdWQyaHBZMmdnSVQwOUlERXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwVkhsd1pTQTlJRWxPVUZWVVgwVk9SRHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRzF2ZFhObElHMTFjM1FnWW1VZ1pHOTNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11Y0hKbGMzTmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHVjJaVzUwVkhsd1pTQW1JRWxPVUZWVVgwVk9SQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2NtVnpjMlZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1OaGJHeGlZV05yS0hSb2FYTXViV0Z1WVdkbGNpd2daWFpsYm5SVWVYQmxMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndiMmx1ZEdWeWN6b2dXMlYyWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVc1blpXUlFiMmx1ZEdWeWN6b2dXMlYyWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ2YVc1MFpYSlVlWEJsT2lCSlRsQlZWRjlVV1ZCRlgwMVBWVk5GTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM0pqUlhabGJuUTZJR1YyWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JuMHBPMXh1WEc1MllYSWdVRTlKVGxSRlVsOUpUbEJWVkY5TlFWQWdQU0I3WEc0Z0lDQWdjRzlwYm5SbGNtUnZkMjQ2SUVsT1VGVlVYMU5VUVZKVUxGeHVJQ0FnSUhCdmFXNTBaWEp0YjNabE9pQkpUbEJWVkY5TlQxWkZMRnh1SUNBZ0lIQnZhVzUwWlhKMWNEb2dTVTVRVlZSZlJVNUVMRnh1SUNBZ0lIQnZhVzUwWlhKallXNWpaV3c2SUVsT1VGVlVYME5CVGtORlRDeGNiaUFnSUNCd2IybHVkR1Z5YjNWME9pQkpUbEJWVkY5RFFVNURSVXhjYm4wN1hHNWNiaTh2SUdsdUlFbEZNVEFnZEdobElIQnZhVzUwWlhJZ2RIbHdaWE1nYVhNZ1pHVm1hVzVsWkNCaGN5QmhiaUJsYm5WdFhHNTJZWElnU1VVeE1GOVFUMGxPVkVWU1gxUlpVRVZmUlU1VlRTQTlJSHRjYmlBZ0lDQXlPaUJKVGxCVlZGOVVXVkJGWDFSUFZVTklMRnh1SUNBZ0lETTZJRWxPVUZWVVgxUlpVRVZmVUVWT0xGeHVJQ0FnSURRNklFbE9VRlZVWDFSWlVFVmZUVTlWVTBVc1hHNGdJQ0FnTlRvZ1NVNVFWVlJmVkZsUVJWOUxTVTVGUTFRZ0x5OGdjMlZsSUdoMGRIQnpPaTh2ZEhkcGRIUmxjaTVqYjIwdmFtRmpiMkp5YjNOemFTOXpkR0YwZFhNdk5EZ3dOVGsyTkRNNE5EZzVPRGt3T0RFMlhHNTlPMXh1WEc1MllYSWdVRTlKVGxSRlVsOUZURVZOUlU1VVgwVldSVTVVVXlBOUlDZHdiMmx1ZEdWeVpHOTNiaWM3WEc1MllYSWdVRTlKVGxSRlVsOVhTVTVFVDFkZlJWWkZUbFJUSUQwZ0ozQnZhVzUwWlhKdGIzWmxJSEJ2YVc1MFpYSjFjQ0J3YjJsdWRHVnlZMkZ1WTJWc0p6dGNibHh1THk4Z1NVVXhNQ0JvWVhNZ2NISmxabWw0WldRZ2MzVndjRzl5ZEN3Z1lXNWtJR05oYzJVdGMyVnVjMmwwYVhabFhHNXBaaUFvZDJsdVpHOTNMazFUVUc5cGJuUmxja1YyWlc1MElDWW1JQ0YzYVc1a2IzY3VVRzlwYm5SbGNrVjJaVzUwS1NCN1hHNGdJQ0FnVUU5SlRsUkZVbDlGVEVWTlJVNVVYMFZXUlU1VVV5QTlJQ2ROVTFCdmFXNTBaWEpFYjNkdUp6dGNiaUFnSUNCUVQwbE9WRVZTWDFkSlRrUlBWMTlGVmtWT1ZGTWdQU0FuVFZOUWIybHVkR1Z5VFc5MlpTQk5VMUJ2YVc1MFpYSlZjQ0JOVTFCdmFXNTBaWEpEWVc1alpXd25PMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGQnZhVzUwWlhJZ1pYWmxiblJ6SUdsdWNIVjBYRzRnS2lCQVkyOXVjM1J5ZFdOMGIzSmNiaUFxSUVCbGVIUmxibVJ6SUVsdWNIVjBYRzRnS2k5Y2JtWjFibU4wYVc5dUlGQnZhVzUwWlhKRmRtVnVkRWx1Y0hWMEtDa2dlMXh1SUNBZ0lIUm9hWE11WlhaRmJDQTlJRkJQU1U1VVJWSmZSVXhGVFVWT1ZGOUZWa1ZPVkZNN1hHNGdJQ0FnZEdocGN5NWxkbGRwYmlBOUlGQlBTVTVVUlZKZlYwbE9SRTlYWDBWV1JVNVVVenRjYmx4dUlDQWdJRWx1Y0hWMExtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc1Y2JpQWdJQ0IwYUdsekxuTjBiM0psSUQwZ0tIUm9hWE11YldGdVlXZGxjaTV6WlhOemFXOXVMbkJ2YVc1MFpYSkZkbVZ1ZEhNZ1BTQmJYU2s3WEc1OVhHNWNibWx1YUdWeWFYUW9VRzlwYm5SbGNrVjJaVzUwU1c1d2RYUXNJRWx1Y0hWMExDQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dhR0Z1Wkd4bElHMXZkWE5sSUdWMlpXNTBjMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmxkbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlhJNklHWjFibU4wYVc5dUlGQkZhR0Z1Wkd4bGNpaGxkaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjM1J2Y21VZ1BTQjBhR2x6TG5OMGIzSmxPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVnRiM1psVUc5cGJuUmxjaUE5SUdaaGJITmxPMXh1WEc0Z0lDQWdJQ0FnSUhaaGNpQmxkbVZ1ZEZSNWNHVk9iM0p0WVd4cGVtVmtJRDBnWlhZdWRIbHdaUzUwYjB4dmQyVnlRMkZ6WlNncExuSmxjR3hoWTJVb0oyMXpKeXdnSnljcE8xeHVJQ0FnSUNBZ0lDQjJZWElnWlhabGJuUlVlWEJsSUQwZ1VFOUpUbFJGVWw5SlRsQlZWRjlOUVZCYlpYWmxiblJVZVhCbFRtOXliV0ZzYVhwbFpGMDdYRzRnSUNBZ0lDQWdJSFpoY2lCd2IybHVkR1Z5Vkhsd1pTQTlJRWxGTVRCZlVFOUpUbFJGVWw5VVdWQkZYMFZPVlUxYlpYWXVjRzlwYm5SbGNsUjVjR1ZkSUh4OElHVjJMbkJ2YVc1MFpYSlVlWEJsTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJwYzFSdmRXTm9JRDBnS0hCdmFXNTBaWEpVZVhCbElEMDlJRWxPVUZWVVgxUlpVRVZmVkU5VlEwZ3BPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHZGxkQ0JwYm1SbGVDQnZaaUIwYUdVZ1pYWmxiblFnYVc0Z2RHaGxJSE4wYjNKbFhHNGdJQ0FnSUNBZ0lIWmhjaUJ6ZEc5eVpVbHVaR1Y0SUQwZ2FXNUJjbkpoZVNoemRHOXlaU3dnWlhZdWNHOXBiblJsY2tsa0xDQW5jRzlwYm5SbGNrbGtKeWs3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdjM1JoY25RZ1lXNWtJRzF2ZFhObElHMTFjM1FnWW1VZ1pHOTNibHh1SUNBZ0lDQWdJQ0JwWmlBb1pYWmxiblJVZVhCbElDWWdTVTVRVlZSZlUxUkJVbFFnSmlZZ0tHVjJMbUoxZEhSdmJpQTlQVDBnTUNCOGZDQnBjMVJ2ZFdOb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE4wYjNKbFNXNWtaWGdnUENBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1J2Y21VdWNIVnphQ2hsZGlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUnZjbVZKYm1SbGVDQTlJSE4wYjNKbExteGxibWQwYUNBdElERTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9aWFpsYm5SVWVYQmxJQ1lnS0VsT1VGVlVYMFZPUkNCOElFbE9VRlZVWDBOQlRrTkZUQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYlc5MlpWQnZhVzUwWlhJZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnYVhRZ2JtOTBJR1p2ZFc1a0xDQnpieUIwYUdVZ2NHOXBiblJsY2lCb1lYTnVKM1FnWW1WbGJpQmtiM2R1SUNoemJ5QnBkQ2R6SUhCeWIySmhZbXg1SUdFZ2FHOTJaWElwWEc0Z0lDQWdJQ0FnSUdsbUlDaHpkRzl5WlVsdVpHVjRJRHdnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdkWEJrWVhSbElIUm9aU0JsZG1WdWRDQnBiaUIwYUdVZ2MzUnZjbVZjYmlBZ0lDQWdJQ0FnYzNSdmNtVmJjM1J2Y21WSmJtUmxlRjBnUFNCbGRqdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtTmhiR3hpWVdOcktIUm9hWE11YldGdVlXZGxjaXdnWlhabGJuUlVlWEJsTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjJsdWRHVnljem9nYzNSdmNtVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHRnVaMlZrVUc5cGJuUmxjbk02SUZ0bGRsMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IybHVkR1Z5Vkhsd1pUb2djRzlwYm5SbGNsUjVjR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpjbU5GZG1WdWREb2daWFpjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hKbGJXOTJaVkJ2YVc1MFpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSEpsYlc5MlpTQm1jbTl0SUhSb1pTQnpkRzl5WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1J2Y21VdWMzQnNhV05sS0hOMGIzSmxTVzVrWlhnc0lERXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlNrN1hHNWNiblpoY2lCVFNVNUhURVZmVkU5VlEwaGZTVTVRVlZSZlRVRlFJRDBnZTF4dUlDQWdJSFJ2ZFdOb2MzUmhjblE2SUVsT1VGVlVYMU5VUVZKVUxGeHVJQ0FnSUhSdmRXTm9iVzkyWlRvZ1NVNVFWVlJmVFU5V1JTeGNiaUFnSUNCMGIzVmphR1Z1WkRvZ1NVNVFWVlJmUlU1RUxGeHVJQ0FnSUhSdmRXTm9ZMkZ1WTJWc09pQkpUbEJWVkY5RFFVNURSVXhjYm4wN1hHNWNiblpoY2lCVFNVNUhURVZmVkU5VlEwaGZWRUZTUjBWVVgwVldSVTVVVXlBOUlDZDBiM1ZqYUhOMFlYSjBKenRjYm5aaGNpQlRTVTVIVEVWZlZFOVZRMGhmVjBsT1JFOVhYMFZXUlU1VVV5QTlJQ2QwYjNWamFITjBZWEowSUhSdmRXTm9iVzkyWlNCMGIzVmphR1Z1WkNCMGIzVmphR05oYm1ObGJDYzdYRzVjYmk4cUtseHVJQ29nVkc5MVkyZ2daWFpsYm5SeklHbHVjSFYwWEc0Z0tpQkFZMjl1YzNSeWRXTjBiM0pjYmlBcUlFQmxlSFJsYm1SeklFbHVjSFYwWEc0Z0tpOWNibVoxYm1OMGFXOXVJRk5wYm1kc1pWUnZkV05vU1c1d2RYUW9LU0I3WEc0Z0lDQWdkR2hwY3k1bGRsUmhjbWRsZENBOUlGTkpUa2RNUlY5VVQxVkRTRjlVUVZKSFJWUmZSVlpGVGxSVE8xeHVJQ0FnSUhSb2FYTXVaWFpYYVc0Z1BTQlRTVTVIVEVWZlZFOVZRMGhmVjBsT1JFOVhYMFZXUlU1VVV6dGNiaUFnSUNCMGFHbHpMbk4wWVhKMFpXUWdQU0JtWVd4elpUdGNibHh1SUNBZ0lFbHVjSFYwTG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzU5WEc1Y2JtbHVhR1Z5YVhRb1UybHVaMnhsVkc5MVkyaEpibkIxZEN3Z1NXNXdkWFFzSUh0Y2JpQWdJQ0JvWVc1a2JHVnlPaUJtZFc1amRHbHZiaUJVUldoaGJtUnNaWElvWlhZcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhSNWNHVWdQU0JUU1U1SFRFVmZWRTlWUTBoZlNVNVFWVlJmVFVGUVcyVjJMblI1Y0dWZE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhOb2IzVnNaQ0IzWlNCb1lXNWtiR1VnZEdobElIUnZkV05vSUdWMlpXNTBjejljYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1VnUFQwOUlFbE9VRlZVWDFOVVFWSlVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYSjBaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxuTjBZWEowWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIWmhjaUIwYjNWamFHVnpJRDBnYm05eWJXRnNhWHBsVTJsdVoyeGxWRzkxWTJobGN5NWpZV3hzS0hSb2FYTXNJR1YyTENCMGVYQmxLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QjNhR1Z1SUdSdmJtVXNJSEpsYzJWMElIUm9aU0J6ZEdGeWRHVmtJSE4wWVhSbFhHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbElDWWdLRWxPVUZWVVgwVk9SQ0I4SUVsT1VGVlVYME5CVGtORlRDa2dKaVlnZEc5MVkyaGxjMXN3WFM1c1pXNW5kR2dnTFNCMGIzVmphR1Z6V3pGZExteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emRHRnlkR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1OaGJHeGlZV05yS0hSb2FYTXViV0Z1WVdkbGNpd2dkSGx3WlN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0c5cGJuUmxjbk02SUhSdmRXTm9aWE5iTUYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGdVoyVmtVRzlwYm5SbGNuTTZJSFJ2ZFdOb1pYTmJNVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndiMmx1ZEdWeVZIbHdaVG9nU1U1UVZWUmZWRmxRUlY5VVQxVkRTQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITnlZMFYyWlc1ME9pQmxkbHh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1OUtUdGNibHh1THlvcVhHNGdLaUJBZEdocGN5QjdWRzkxWTJoSmJuQjFkSDFjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCbGRseHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJSFI1Y0dVZ1pteGhaMXh1SUNvZ1FISmxkSFZ5Ym5NZ2UzVnVaR1ZtYVc1bFpIeEJjbkpoZVgwZ1cyRnNiQ3dnWTJoaGJtZGxaRjFjYmlBcUwxeHVablZ1WTNScGIyNGdibTl5YldGc2FYcGxVMmx1WjJ4bFZHOTFZMmhsY3lobGRpd2dkSGx3WlNrZ2UxeHVJQ0FnSUhaaGNpQmhiR3dnUFNCMGIwRnljbUY1S0dWMkxuUnZkV05vWlhNcE8xeHVJQ0FnSUhaaGNpQmphR0Z1WjJWa0lEMGdkRzlCY25KaGVTaGxkaTVqYUdGdVoyVmtWRzkxWTJobGN5azdYRzVjYmlBZ0lDQnBaaUFvZEhsd1pTQW1JQ2hKVGxCVlZGOUZUa1FnZkNCSlRsQlZWRjlEUVU1RFJVd3BLU0I3WEc0Z0lDQWdJQ0FnSUdGc2JDQTlJSFZ1YVhGMVpVRnljbUY1S0dGc2JDNWpiMjVqWVhRb1kyaGhibWRsWkNrc0lDZHBaR1Z1ZEdsbWFXVnlKeXdnZEhKMVpTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUZ0aGJHd3NJR05vWVc1blpXUmRPMXh1ZlZ4dVhHNTJZWElnVkU5VlEwaGZTVTVRVlZSZlRVRlFJRDBnZTF4dUlDQWdJSFJ2ZFdOb2MzUmhjblE2SUVsT1VGVlVYMU5VUVZKVUxGeHVJQ0FnSUhSdmRXTm9iVzkyWlRvZ1NVNVFWVlJmVFU5V1JTeGNiaUFnSUNCMGIzVmphR1Z1WkRvZ1NVNVFWVlJmUlU1RUxGeHVJQ0FnSUhSdmRXTm9ZMkZ1WTJWc09pQkpUbEJWVkY5RFFVNURSVXhjYm4wN1hHNWNiblpoY2lCVVQxVkRTRjlVUVZKSFJWUmZSVlpGVGxSVElEMGdKM1J2ZFdOb2MzUmhjblFnZEc5MVkyaHRiM1psSUhSdmRXTm9aVzVrSUhSdmRXTm9ZMkZ1WTJWc0p6dGNibHh1THlvcVhHNGdLaUJOZFd4MGFTMTFjMlZ5SUhSdmRXTm9JR1YyWlc1MGN5QnBibkIxZEZ4dUlDb2dRR052Ym5OMGNuVmpkRzl5WEc0Z0tpQkFaWGgwWlc1a2N5QkpibkIxZEZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJVYjNWamFFbHVjSFYwS0NrZ2UxeHVJQ0FnSUhSb2FYTXVaWFpVWVhKblpYUWdQU0JVVDFWRFNGOVVRVkpIUlZSZlJWWkZUbFJUTzF4dUlDQWdJSFJvYVhNdWRHRnlaMlYwU1dSeklEMGdlMzA3WEc1Y2JpQWdJQ0JKYm5CMWRDNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dWZWeHVYRzVwYm1obGNtbDBLRlJ2ZFdOb1NXNXdkWFFzSUVsdWNIVjBMQ0I3WEc0Z0lDQWdhR0Z1Wkd4bGNqb2dablZ1WTNScGIyNGdUVlJGYUdGdVpHeGxjaWhsZGlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnZEhsd1pTQTlJRlJQVlVOSVgwbE9VRlZVWDAxQlVGdGxkaTUwZVhCbFhUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhSdmRXTm9aWE1nUFNCblpYUlViM1ZqYUdWekxtTmhiR3dvZEdocGN5d2daWFlzSUhSNWNHVXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUnZkV05vWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTJGc2JHSmhZMnNvZEdocGN5NXRZVzVoWjJWeUxDQjBlWEJsTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjJsdWRHVnljem9nZEc5MVkyaGxjMXN3WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVc1blpXUlFiMmx1ZEdWeWN6b2dkRzkxWTJobGMxc3hYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZhVzUwWlhKVWVYQmxPaUJKVGxCVlZGOVVXVkJGWDFSUFZVTklMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzSmpSWFpsYm5RNklHVjJYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYm4wcE8xeHVYRzR2S2lwY2JpQXFJRUIwYUdseklIdFViM1ZqYUVsdWNIVjBmVnh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdWMlhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdkSGx3WlNCbWJHRm5YRzRnS2lCQWNtVjBkWEp1Y3lCN2RXNWtaV1pwYm1Wa2ZFRnljbUY1ZlNCYllXeHNMQ0JqYUdGdVoyVmtYVnh1SUNvdlhHNW1kVzVqZEdsdmJpQm5aWFJVYjNWamFHVnpLR1YyTENCMGVYQmxLU0I3WEc0Z0lDQWdkbUZ5SUdGc2JGUnZkV05vWlhNZ1BTQjBiMEZ5Y21GNUtHVjJMblJ2ZFdOb1pYTXBPMXh1SUNBZ0lIWmhjaUIwWVhKblpYUkpaSE1nUFNCMGFHbHpMblJoY21kbGRFbGtjenRjYmx4dUlDQWdJQzh2SUhkb1pXNGdkR2hsY21VZ2FYTWdiMjVzZVNCdmJtVWdkRzkxWTJnc0lIUm9aU0J3Y205alpYTnpJR05oYmlCaVpTQnphVzF3YkdsbWFXVmtYRzRnSUNBZ2FXWWdLSFI1Y0dVZ0ppQW9TVTVRVlZSZlUxUkJVbFFnZkNCSlRsQlZWRjlOVDFaRktTQW1KaUJoYkd4VWIzVmphR1Z6TG14bGJtZDBhQ0E5UFQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0IwWVhKblpYUkpaSE5iWVd4c1ZHOTFZMmhsYzFzd1hTNXBaR1Z1ZEdsbWFXVnlYU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJZV3hzVkc5MVkyaGxjeXdnWVd4c1ZHOTFZMmhsYzEwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHa3NYRzRnSUNBZ0lDQWdJSFJoY21kbGRGUnZkV05vWlhNc1hHNGdJQ0FnSUNBZ0lHTm9ZVzVuWldSVWIzVmphR1Z6SUQwZ2RHOUJjbkpoZVNobGRpNWphR0Z1WjJWa1ZHOTFZMmhsY3lrc1hHNGdJQ0FnSUNBZ0lHTm9ZVzVuWldSVVlYSm5aWFJVYjNWamFHVnpJRDBnVzEwc1hHNGdJQ0FnSUNBZ0lIUmhjbWRsZENBOUlIUm9hWE11ZEdGeVoyVjBPMXh1WEc0Z0lDQWdMeThnWjJWMElIUmhjbWRsZENCMGIzVmphR1Z6SUdaeWIyMGdkRzkxWTJobGMxeHVJQ0FnSUhSaGNtZGxkRlJ2ZFdOb1pYTWdQU0JoYkd4VWIzVmphR1Z6TG1acGJIUmxjaWhtZFc1amRHbHZiaWgwYjNWamFDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhR0Z6VUdGeVpXNTBLSFJ2ZFdOb0xuUmhjbWRsZEN3Z2RHRnlaMlYwS1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUM4dklHTnZiR3hsWTNRZ2RHOTFZMmhsYzF4dUlDQWdJR2xtSUNoMGVYQmxJRDA5UFNCSlRsQlZWRjlUVkVGU1ZDa2dlMXh1SUNBZ0lDQWdJQ0JwSUQwZ01EdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tHa2dQQ0IwWVhKblpYUlViM1ZqYUdWekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBTV1J6VzNSaGNtZGxkRlJ2ZFdOb1pYTmJhVjB1YVdSbGJuUnBabWxsY2wwZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhU3NyTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1ptbHNkR1Z5SUdOb1lXNW5aV1FnZEc5MVkyaGxjeUIwYnlCdmJteDVJR052Ym5SaGFXNGdkRzkxWTJobGN5QjBhR0YwSUdWNGFYTjBJR2x1SUhSb1pTQmpiMnhzWldOMFpXUWdkR0Z5WjJWMElHbGtjMXh1SUNBZ0lHa2dQU0F3TzF4dUlDQWdJSGRvYVd4bElDaHBJRHdnWTJoaGJtZGxaRlJ2ZFdOb1pYTXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMFlYSm5aWFJKWkhOYlkyaGhibWRsWkZSdmRXTm9aWE5iYVYwdWFXUmxiblJwWm1sbGNsMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZVzVuWldSVVlYSm5aWFJVYjNWamFHVnpMbkIxYzJnb1kyaGhibWRsWkZSdmRXTm9aWE5iYVYwcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1kyeGxZVzUxY0NCeVpXMXZkbVZrSUhSdmRXTm9aWE5jYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1VnSmlBb1NVNVFWVlJmUlU1RUlId2dTVTVRVlZSZlEwRk9RMFZNS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSFJoY21kbGRFbGtjMXRqYUdGdVoyVmtWRzkxWTJobGMxdHBYUzVwWkdWdWRHbG1hV1Z5WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBLeXM3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0NGamFHRnVaMlZrVkdGeVoyVjBWRzkxWTJobGN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJiWEc0Z0lDQWdJQ0FnSUM4dklHMWxjbWRsSUhSaGNtZGxkRlJ2ZFdOb1pYTWdkMmwwYUNCamFHRnVaMlZrVkdGeVoyVjBWRzkxWTJobGN5QnpieUJwZENCamIyNTBZV2x1Y3lCQlRFd2dkRzkxWTJobGN5d2dhVzVqYkhWa2FXNW5JQ2RsYm1RbklHRnVaQ0FuWTJGdVkyVnNKMXh1SUNBZ0lDQWdJQ0IxYm1seGRXVkJjbkpoZVNoMFlYSm5aWFJVYjNWamFHVnpMbU52Ym1OaGRDaGphR0Z1WjJWa1ZHRnlaMlYwVkc5MVkyaGxjeWtzSUNkcFpHVnVkR2xtYVdWeUp5d2dkSEoxWlNrc1hHNGdJQ0FnSUNBZ0lHTm9ZVzVuWldSVVlYSm5aWFJVYjNWamFHVnpYRzRnSUNBZ1hUdGNibjFjYmx4dUx5b3FYRzRnS2lCRGIyMWlhVzVsWkNCMGIzVmphQ0JoYm1RZ2JXOTFjMlVnYVc1d2RYUmNiaUFxWEc0Z0tpQlViM1ZqYUNCb1lYTWdZU0JvYVdkb1pYSWdjSEpwYjNKcGRIa2dkR2hsYmlCdGIzVnpaU3dnWVc1a0lIZG9hV3hsSUhSdmRXTm9hVzVuSUc1dklHMXZkWE5sSUdWMlpXNTBjeUJoY21VZ1lXeHNiM2RsWkM1Y2JpQXFJRlJvYVhNZ1ltVmpZWFZ6WlNCMGIzVmphQ0JrWlhacFkyVnpJR0ZzYzI4Z1pXMXBkQ0J0YjNWelpTQmxkbVZ1ZEhNZ2QyaHBiR1VnWkc5cGJtY2dZU0IwYjNWamFDNWNiaUFxWEc0Z0tpQkFZMjl1YzNSeWRXTjBiM0pjYmlBcUlFQmxlSFJsYm1SeklFbHVjSFYwWEc0Z0tpOWNibHh1ZG1GeUlFUkZSRlZRWDFSSlRVVlBWVlFnUFNBeU5UQXdPMXh1ZG1GeUlFUkZSRlZRWDBSSlUxUkJUa05GSUQwZ01qVTdYRzVjYm1aMWJtTjBhVzl1SUZSdmRXTm9UVzkxYzJWSmJuQjFkQ2dwSUh0Y2JpQWdJQ0JKYm5CMWRDNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dVhHNGdJQ0FnZG1GeUlHaGhibVJzWlhJZ1BTQmlhVzVrUm00b2RHaHBjeTVvWVc1a2JHVnlMQ0IwYUdsektUdGNiaUFnSUNCMGFHbHpMblJ2ZFdOb0lEMGdibVYzSUZSdmRXTm9TVzV3ZFhRb2RHaHBjeTV0WVc1aFoyVnlMQ0JvWVc1a2JHVnlLVHRjYmlBZ0lDQjBhR2x6TG0xdmRYTmxJRDBnYm1WM0lFMXZkWE5sU1c1d2RYUW9kR2hwY3k1dFlXNWhaMlZ5TENCb1lXNWtiR1Z5S1R0Y2JseHVJQ0FnSUhSb2FYTXVjSEpwYldGeWVWUnZkV05vSUQwZ2JuVnNiRHRjYmlBZ0lDQjBhR2x6TG14aGMzUlViM1ZqYUdWeklEMGdXMTA3WEc1OVhHNWNibWx1YUdWeWFYUW9WRzkxWTJoTmIzVnpaVWx1Y0hWMExDQkpibkIxZEN3Z2UxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlHaGhibVJzWlNCdGIzVnpaU0JoYm1RZ2RHOTFZMmdnWlhabGJuUnpYRzRnSUNBZ0lDb2dRSEJoY21GdElIdElZVzF0WlhKOUlHMWhibUZuWlhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYVc1d2RYUkZkbVZ1ZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JwYm5CMWRFUmhkR0ZjYmlBZ0lDQWdLaTljYmlBZ0lDQm9ZVzVrYkdWeU9pQm1kVzVqZEdsdmJpQlVUVVZvWVc1a2JHVnlLRzFoYm1GblpYSXNJR2x1Y0hWMFJYWmxiblFzSUdsdWNIVjBSR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYVhOVWIzVmphQ0E5SUNocGJuQjFkRVJoZEdFdWNHOXBiblJsY2xSNWNHVWdQVDBnU1U1UVZWUmZWRmxRUlY5VVQxVkRTQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMDF2ZFhObElEMGdLR2x1Y0hWMFJHRjBZUzV3YjJsdWRHVnlWSGx3WlNBOVBTQkpUbEJWVkY5VVdWQkZYMDFQVlZORktUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2FYTk5iM1Z6WlNBbUppQnBibkIxZEVSaGRHRXVjMjkxY21ObFEyRndZV0pwYkdsMGFXVnpJQ1ltSUdsdWNIVjBSR0YwWVM1emIzVnlZMlZEWVhCaFltbHNhWFJwWlhNdVptbHlaWE5VYjNWamFFVjJaVzUwY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdkMmhsYmlCM1pTZHlaU0JwYmlCaElIUnZkV05vSUdWMlpXNTBMQ0J5WldOdmNtUWdkRzkxWTJobGN5QjBieUFnWkdVdFpIVndaU0J6ZVc1MGFHVjBhV01nYlc5MWMyVWdaWFpsYm5SY2JpQWdJQ0FnSUNBZ2FXWWdLR2x6Vkc5MVkyZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxZMjl5WkZSdmRXTm9aWE11WTJGc2JDaDBhR2x6TENCcGJuQjFkRVYyWlc1MExDQnBibkIxZEVSaGRHRXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dselRXOTFjMlVnSmlZZ2FYTlRlVzUwYUdWMGFXTkZkbVZ1ZEM1allXeHNLSFJvYVhNc0lHbHVjSFYwUkdGMFlTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyRnNiR0poWTJzb2JXRnVZV2RsY2l3Z2FXNXdkWFJGZG1WdWRDd2dhVzV3ZFhSRVlYUmhLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nY21WdGIzWmxJSFJvWlNCbGRtVnVkQ0JzYVhOMFpXNWxjbk5jYmlBZ0lDQWdLaTljYmlBZ0lDQmtaWE4wY205NU9pQm1kVzVqZEdsdmJpQmtaWE4wY205NUtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZkV05vTG1SbGMzUnliM2tvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV0YjNWelpTNWtaWE4wY205NUtDazdYRzRnSUNBZ2ZWeHVmU2s3WEc1Y2JtWjFibU4wYVc5dUlISmxZMjl5WkZSdmRXTm9aWE1vWlhabGJuUlVlWEJsTENCbGRtVnVkRVJoZEdFcElIdGNiaUFnSUNCcFppQW9aWFpsYm5SVWVYQmxJQ1lnU1U1UVZWUmZVMVJCVWxRcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtbHRZWEo1Vkc5MVkyZ2dQU0JsZG1WdWRFUmhkR0V1WTJoaGJtZGxaRkJ2YVc1MFpYSnpXekJkTG1sa1pXNTBhV1pwWlhJN1hHNGdJQ0FnSUNBZ0lITmxkRXhoYzNSVWIzVmphQzVqWVd4c0tIUm9hWE1zSUdWMlpXNTBSR0YwWVNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNobGRtVnVkRlI1Y0dVZ0ppQW9TVTVRVlZSZlJVNUVJSHdnU1U1UVZWUmZRMEZPUTBWTUtTa2dlMXh1SUNBZ0lDQWdJQ0J6WlhSTVlYTjBWRzkxWTJndVkyRnNiQ2gwYUdsekxDQmxkbVZ1ZEVSaGRHRXBPMXh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2MyVjBUR0Z6ZEZSdmRXTm9LR1YyWlc1MFJHRjBZU2tnZTF4dUlDQWdJSFpoY2lCMGIzVmphQ0E5SUdWMlpXNTBSR0YwWVM1amFHRnVaMlZrVUc5cGJuUmxjbk5iTUYwN1hHNWNiaUFnSUNCcFppQW9kRzkxWTJndWFXUmxiblJwWm1sbGNpQTlQVDBnZEdocGN5NXdjbWx0WVhKNVZHOTFZMmdwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR3hoYzNSVWIzVmphQ0E5SUh0NE9pQjBiM1ZqYUM1amJHbGxiblJZTENCNU9pQjBiM1ZqYUM1amJHbGxiblJaZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzWVhOMFZHOTFZMmhsY3k1d2RYTm9LR3hoYzNSVWIzVmphQ2s3WEc0Z0lDQWdJQ0FnSUhaaGNpQnNkSE1nUFNCMGFHbHpMbXhoYzNSVWIzVmphR1Z6TzF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ0YjNabFRHRnpkRlJ2ZFdOb0lEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVNBOUlHeDBjeTVwYm1SbGVFOW1LR3hoYzNSVWIzVmphQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBK0lDMHhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkhSekxuTndiR2xqWlNocExDQXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnYzJWMFZHbHRaVzkxZENoeVpXMXZkbVZNWVhOMFZHOTFZMmdzSUVSRlJGVlFYMVJKVFVWUFZWUXBPMXh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2FYTlRlVzUwYUdWMGFXTkZkbVZ1ZENobGRtVnVkRVJoZEdFcElIdGNiaUFnSUNCMllYSWdlQ0E5SUdWMlpXNTBSR0YwWVM1emNtTkZkbVZ1ZEM1amJHbGxiblJZTENCNUlEMGdaWFpsYm5SRVlYUmhMbk55WTBWMlpXNTBMbU5zYVdWdWRGazdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG14aGMzUlViM1ZqYUdWekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBJRDBnZEdocGN5NXNZWE4wVkc5MVkyaGxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1I0SUQwZ1RXRjBhQzVoWW5Nb2VDQXRJSFF1ZUNrc0lHUjVJRDBnVFdGMGFDNWhZbk1vZVNBdElIUXVlU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtlQ0E4UFNCRVJVUlZVRjlFU1ZOVVFVNURSU0FtSmlCa2VTQThQU0JFUlVSVlVGOUVTVk5VUVU1RFJTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1ZlZ4dVhHNTJZWElnVUZKRlJrbFlSVVJmVkU5VlEwaGZRVU5VU1U5T0lEMGdjSEpsWm1sNFpXUW9WRVZUVkY5RlRFVk5SVTVVTG5OMGVXeGxMQ0FuZEc5MVkyaEJZM1JwYjI0bktUdGNiblpoY2lCT1FWUkpWa1ZmVkU5VlEwaGZRVU5VU1U5T0lEMGdVRkpGUmtsWVJVUmZWRTlWUTBoZlFVTlVTVTlPSUNFOVBTQjFibVJsWm1sdVpXUTdYRzVjYmk4dklHMWhaMmxqWVd3Z2RHOTFZMmhCWTNScGIyNGdkbUZzZFdWY2JuWmhjaUJVVDFWRFNGOUJRMVJKVDA1ZlEwOU5VRlZVUlNBOUlDZGpiMjF3ZFhSbEp6dGNiblpoY2lCVVQxVkRTRjlCUTFSSlQwNWZRVlZVVHlBOUlDZGhkWFJ2Snp0Y2JuWmhjaUJVVDFWRFNGOUJRMVJKVDA1ZlRVRk9TVkJWVEVGVVNVOU9JRDBnSjIxaGJtbHdkV3hoZEdsdmJpYzdJQzh2SUc1dmRDQnBiWEJzWlcxbGJuUmxaRnh1ZG1GeUlGUlBWVU5JWDBGRFZFbFBUbDlPVDA1RklEMGdKMjV2Ym1Vbk8xeHVkbUZ5SUZSUFZVTklYMEZEVkVsUFRsOVFRVTVmV0NBOUlDZHdZVzR0ZUNjN1hHNTJZWElnVkU5VlEwaGZRVU5VU1U5T1gxQkJUbDlaSUQwZ0ozQmhiaTE1Snp0Y2JuWmhjaUJVVDFWRFNGOUJRMVJKVDA1ZlRVRlFJRDBnWjJWMFZHOTFZMmhCWTNScGIyNVFjbTl3Y3lncE8xeHVYRzR2S2lwY2JpQXFJRlJ2ZFdOb0lFRmpkR2x2Ymx4dUlDb2djMlYwY3lCMGFHVWdkRzkxWTJoQlkzUnBiMjRnY0hKdmNHVnlkSGtnYjNJZ2RYTmxjeUIwYUdVZ2FuTWdZV3gwWlhKdVlYUnBkbVZjYmlBcUlFQndZWEpoYlNCN1RXRnVZV2RsY24wZ2JXRnVZV2RsY2x4dUlDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlIWmhiSFZsWEc0Z0tpQkFZMjl1YzNSeWRXTjBiM0pjYmlBcUwxeHVablZ1WTNScGIyNGdWRzkxWTJoQlkzUnBiMjRvYldGdVlXZGxjaXdnZG1Gc2RXVXBJSHRjYmlBZ0lDQjBhR2x6TG0xaGJtRm5aWElnUFNCdFlXNWhaMlZ5TzF4dUlDQWdJSFJvYVhNdWMyVjBLSFpoYkhWbEtUdGNibjFjYmx4dVZHOTFZMmhCWTNScGIyNHVjSEp2ZEc5MGVYQmxJRDBnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUhObGRDQjBhR1VnZEc5MVkyaEJZM1JwYjI0Z2RtRnNkV1VnYjI0Z2RHaGxJR1ZzWlcxbGJuUWdiM0lnWlc1aFlteGxJSFJvWlNCd2IyeDVabWxzYkZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0IyWVd4MVpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGREb2dablZ1WTNScGIyNG9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdMeThnWm1sdVpDQnZkWFFnZEdobElIUnZkV05vTFdGamRHbHZiaUJpZVNCMGFHVWdaWFpsYm5RZ2FHRnVaR3hsY25OY2JpQWdJQ0FnSUNBZ2FXWWdLSFpoYkhWbElEMDlJRlJQVlVOSVgwRkRWRWxQVGw5RFQwMVFWVlJGS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTQTlJSFJvYVhNdVkyOXRjSFYwWlNncE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tFNUJWRWxXUlY5VVQxVkRTRjlCUTFSSlQwNGdKaVlnZEdocGN5NXRZVzVoWjJWeUxtVnNaVzFsYm5RdWMzUjViR1VnSmlZZ1ZFOVZRMGhmUVVOVVNVOU9YMDFCVUZ0MllXeDFaVjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXRnVZV2RsY2k1bGJHVnRaVzUwTG5OMGVXeGxXMUJTUlVaSldFVkVYMVJQVlVOSVgwRkRWRWxQVGwwZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GamRHbHZibk1nUFNCMllXeDFaUzUwYjB4dmQyVnlRMkZ6WlNncExuUnlhVzBvS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ2FuVnpkQ0J5WlMxelpYUWdkR2hsSUhSdmRXTm9RV04wYVc5dUlIWmhiSFZsWEc0Z0lDQWdJQ292WEc0Z0lDQWdkWEJrWVhSbE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFFvZEdocGN5NXRZVzVoWjJWeUxtOXdkR2x2Ym5NdWRHOTFZMmhCWTNScGIyNHBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJqYjIxd2RYUmxJSFJvWlNCMllXeDFaU0JtYjNJZ2RHaGxJSFJ2ZFdOb1FXTjBhVzl1SUhCeWIzQmxjblI1SUdKaGMyVmtJRzl1SUhSb1pTQnlaV052WjI1cGVtVnlKM01nYzJWMGRHbHVaM05jYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUI3VTNSeWFXNW5mU0IyWVd4MVpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJYQjFkR1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWVdOMGFXOXVjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQmxZV05vS0hSb2FYTXViV0Z1WVdkbGNpNXlaV052WjI1cGVtVnljeXdnWm5WdVkzUnBiMjRvY21WamIyZHVhWHBsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHSnZiMnhQY2tadUtISmxZMjluYm1sNlpYSXViM0IwYVc5dWN5NWxibUZpYkdVc0lGdHlaV052WjI1cGVtVnlYU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFkzUnBiMjV6SUQwZ1lXTjBhVzl1Y3k1amIyNWpZWFFvY21WamIyZHVhWHBsY2k1blpYUlViM1ZqYUVGamRHbHZiaWdwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamJHVmhibFJ2ZFdOb1FXTjBhVzl1Y3loaFkzUnBiMjV6TG1wdmFXNG9KeUFuS1NrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlIUm9hWE1nYldWMGFHOWtJR2x6SUdOaGJHeGxaQ0J2YmlCbFlXTm9JR2x1Y0hWMElHTjVZMnhsSUdGdVpDQndjbTkyYVdSbGN5QjBhR1VnY0hKbGRtVnVkR2x1WnlCdlppQjBhR1VnWW5KdmQzTmxjaUJpWldoaGRtbHZjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnBibkIxZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEJ5WlhabGJuUkVaV1poZFd4MGN6b2dablZ1WTNScGIyNG9hVzV3ZFhRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhOeVkwVjJaVzUwSUQwZ2FXNXdkWFF1YzNKalJYWmxiblE3WEc0Z0lDQWdJQ0FnSUhaaGNpQmthWEpsWTNScGIyNGdQU0JwYm5CMWRDNXZabVp6WlhSRWFYSmxZM1JwYjI0N1hHNWNiaUFnSUNBZ0lDQWdMeThnYVdZZ2RHaGxJSFJ2ZFdOb0lHRmpkR2x2YmlCa2FXUWdjSEpsZG1WdWRHVmtJRzl1WTJVZ2RHaHBjeUJ6WlhOemFXOXVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTFoYm1GblpYSXVjMlZ6YzJsdmJpNXdjbVYyWlc1MFpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITnlZMFYyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMllYSWdZV04wYVc5dWN5QTlJSFJvYVhNdVlXTjBhVzl1Y3p0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2hoYzA1dmJtVWdQU0JwYmxOMGNpaGhZM1JwYjI1ekxDQlVUMVZEU0Y5QlExUkpUMDVmVGs5T1JTa2dKaVlnSVZSUFZVTklYMEZEVkVsUFRsOU5RVkJiVkU5VlEwaGZRVU5VU1U5T1gwNVBUa1ZkTzF4dUlDQWdJQ0FnSUNCMllYSWdhR0Z6VUdGdVdTQTlJR2x1VTNSeUtHRmpkR2x2Ym5Nc0lGUlBWVU5JWDBGRFZFbFBUbDlRUVU1ZldTa2dKaVlnSVZSUFZVTklYMEZEVkVsUFRsOU5RVkJiVkU5VlEwaGZRVU5VU1U5T1gxQkJUbDlaWFR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2hoYzFCaGJsZ2dQU0JwYmxOMGNpaGhZM1JwYjI1ekxDQlVUMVZEU0Y5QlExUkpUMDVmVUVGT1gxZ3BJQ1ltSUNGVVQxVkRTRjlCUTFSSlQwNWZUVUZRVzFSUFZVTklYMEZEVkVsUFRsOVFRVTVmV0YwN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0doaGMwNXZibVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2Wkc4Z2JtOTBJSEJ5WlhabGJuUWdaR1ZtWVhWc2RITWdhV1lnZEdocGN5QnBjeUJoSUhSaGNDQm5aWE4wZFhKbFhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBjMVJoY0ZCdmFXNTBaWElnUFNCcGJuQjFkQzV3YjJsdWRHVnljeTVzWlc1bmRHZ2dQVDA5SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FYTlVZWEJOYjNabGJXVnVkQ0E5SUdsdWNIVjBMbVJwYzNSaGJtTmxJRHdnTWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcGMxUmhjRlJ2ZFdOb1ZHbHRaU0E5SUdsdWNIVjBMbVJsYkhSaFZHbHRaU0E4SURJMU1EdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x6VkdGd1VHOXBiblJsY2lBbUppQnBjMVJoY0UxdmRtVnRaVzUwSUNZbUlHbHpWR0Z3Vkc5MVkyaFVhVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR2hoYzFCaGJsZ2dKaVlnYUdGelVHRnVXU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWUhCaGJpMTRJSEJoYmkxNVlDQnRaV0Z1Y3lCaWNtOTNjMlZ5SUdoaGJtUnNaWE1nWVd4c0lITmpjbTlzYkdsdVp5OXdZVzV1YVc1bkxDQmtieUJ1YjNRZ2NISmxkbVZ1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHaGhjMDV2Ym1VZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNob1lYTlFZVzVaSUNZbUlHUnBjbVZqZEdsdmJpQW1JRVJKVWtWRFZFbFBUbDlJVDFKSldrOU9WRUZNS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0doaGMxQmhibGdnSmlZZ1pHbHlaV04wYVc5dUlDWWdSRWxTUlVOVVNVOU9YMVpGVWxSSlEwRk1LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y0hKbGRtVnVkRk55WXloemNtTkZkbVZ1ZENrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dZMkZzYkNCd2NtVjJaVzUwUkdWbVlYVnNkQ0IwYnlCd2NtVjJaVzUwSUhSb1pTQmljbTkzYzJWeUozTWdaR1ZtWVhWc2RDQmlaV2hoZG1sdmNpQW9jMk55YjJ4c2FXNW5JR2x1SUcxdmMzUWdZMkZ6WlhNcFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhOeVkwVjJaVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSEpsZG1WdWRGTnlZem9nWm5WdVkzUnBiMjRvYzNKalJYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV0WVc1aFoyVnlMbk5sYzNOcGIyNHVjSEpsZG1WdWRHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdjM0pqUlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNCOVhHNTlPMXh1WEc0dktpcGNiaUFxSUhkb1pXNGdkR2hsSUhSdmRXTm9RV04wYVc5dWN5QmhjbVVnWTI5c2JHVmpkR1ZrSUhSb1pYa2dZWEpsSUc1dmRDQmhJSFpoYkdsa0lIWmhiSFZsTENCemJ5QjNaU0J1WldWa0lIUnZJR05zWldGdUlIUm9hVzVuY3lCMWNDNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUdGamRHbHZibk5jYmlBcUlFQnlaWFIxY201eklIc3FmVnh1SUNvdlhHNW1kVzVqZEdsdmJpQmpiR1ZoYmxSdmRXTm9RV04wYVc5dWN5aGhZM1JwYjI1ektTQjdYRzRnSUNBZ0x5OGdibTl1WlZ4dUlDQWdJR2xtSUNocGJsTjBjaWhoWTNScGIyNXpMQ0JVVDFWRFNGOUJRMVJKVDA1ZlRrOU9SU2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZSUFZVTklYMEZEVkVsUFRsOU9UMDVGTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCb1lYTlFZVzVZSUQwZ2FXNVRkSElvWVdOMGFXOXVjeXdnVkU5VlEwaGZRVU5VU1U5T1gxQkJUbDlZS1R0Y2JpQWdJQ0IyWVhJZ2FHRnpVR0Z1V1NBOUlHbHVVM1J5S0dGamRHbHZibk1zSUZSUFZVTklYMEZEVkVsUFRsOVFRVTVmV1NrN1hHNWNiaUFnSUNBdkx5QnBaaUJpYjNSb0lIQmhiaTE0SUdGdVpDQndZVzR0ZVNCaGNtVWdjMlYwSUNoa2FXWm1aWEpsYm5RZ2NtVmpiMmR1YVhwbGNuTmNiaUFnSUNBdkx5Qm1iM0lnWkdsbVptVnlaVzUwSUdScGNtVmpkR2x2Ym5Nc0lHVXVaeTRnYUc5eWFYcHZiblJoYkNCd1lXNGdZblYwSUhabGNuUnBZMkZzSUhOM2FYQmxQeWxjYmlBZ0lDQXZMeUIzWlNCdVpXVmtJRzV2Ym1VZ0tHRnpJRzkwYUdWeWQybHpaU0IzYVhSb0lIQmhiaTE0SUhCaGJpMTVJR052YldKcGJtVmtJRzV2Ym1VZ2IyWWdkR2hsYzJWY2JpQWdJQ0F2THlCeVpXTnZaMjVwZW1WeWN5QjNhV3hzSUhkdmNtc3NJSE5wYm1ObElIUm9aU0JpY205M2MyVnlJSGR2ZFd4a0lHaGhibVJzWlNCaGJHd2djR0Z1Ym1sdVoxeHVJQ0FnSUdsbUlDaG9ZWE5RWVc1WUlDWW1JR2hoYzFCaGJsa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRlJQVlVOSVgwRkRWRWxQVGw5T1QwNUZPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJSEJoYmkxNElFOVNJSEJoYmkxNVhHNGdJQ0FnYVdZZ0tHaGhjMUJoYmxnZ2ZId2dhR0Z6VUdGdVdTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhR0Z6VUdGdVdDQS9JRlJQVlVOSVgwRkRWRWxQVGw5UVFVNWZXQ0E2SUZSUFZVTklYMEZEVkVsUFRsOVFRVTVmV1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCdFlXNXBjSFZzWVhScGIyNWNiaUFnSUNCcFppQW9hVzVUZEhJb1lXTjBhVzl1Y3l3Z1ZFOVZRMGhmUVVOVVNVOU9YMDFCVGtsUVZVeEJWRWxQVGlrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGUlBWVU5JWDBGRFZFbFBUbDlOUVU1SlVGVk1RVlJKVDA0N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJRlJQVlVOSVgwRkRWRWxQVGw5QlZWUlBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJVYjNWamFFRmpkR2x2YmxCeWIzQnpLQ2tnZTF4dUlDQWdJR2xtSUNnaFRrRlVTVlpGWDFSUFZVTklYMEZEVkVsUFRpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCMGIzVmphRTFoY0NBOUlIdDlPMXh1SUNBZ0lIWmhjaUJqYzNOVGRYQndiM0owY3lBOUlIZHBibVJ2ZHk1RFUxTWdKaVlnZDJsdVpHOTNMa05UVXk1emRYQndiM0owY3p0Y2JpQWdJQ0JiSjJGMWRHOG5MQ0FuYldGdWFYQjFiR0YwYVc5dUp5d2dKM0JoYmkxNUp5d2dKM0JoYmkxNEp5d2dKM0JoYmkxNElIQmhiaTE1Snl3Z0oyNXZibVVuWFM1bWIzSkZZV05vS0daMWJtTjBhVzl1S0haaGJDa2dlMXh1WEc0Z0lDQWdJQ0FnSUM4dklFbG1JR056Y3k1emRYQndiM0owY3lCcGN5QnViM1FnYzNWd2NHOXlkR1ZrSUdKMWRDQjBhR1Z5WlNCcGN5QnVZWFJwZG1VZ2RHOTFZMmd0WVdOMGFXOXVJR0Z6YzNWdFpTQnBkQ0J6ZFhCd2IzSjBjMXh1SUNBZ0lDQWdJQ0F2THlCaGJHd2dkbUZzZFdWekxpQlVhR2x6SUdseklIUm9aU0JqWVhObElHWnZjaUJKUlNBeE1DQmhibVFnTVRFdVhHNGdJQ0FnSUNBZ0lIUnZkV05vVFdGd1czWmhiRjBnUFNCamMzTlRkWEJ3YjNKMGN5QS9JSGRwYm1SdmR5NURVMU11YzNWd2NHOXlkSE1vSjNSdmRXTm9MV0ZqZEdsdmJpY3NJSFpoYkNrZ09pQjBjblZsTzF4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQjBiM1ZqYUUxaGNEdGNibjFjYmx4dUx5b3FYRzRnS2lCU1pXTnZaMjVwZW1WeUlHWnNiM2NnWlhod2JHRnBibVZrT3lBcVhHNGdLaUJCYkd3Z2NtVmpiMmR1YVhwbGNuTWdhR0YyWlNCMGFHVWdhVzVwZEdsaGJDQnpkR0YwWlNCdlppQlFUMU5UU1VKTVJTQjNhR1Z1SUdFZ2FXNXdkWFFnYzJWemMybHZiaUJ6ZEdGeWRITXVYRzRnS2lCVWFHVWdaR1ZtYVc1cGRHbHZiaUJ2WmlCaElHbHVjSFYwSUhObGMzTnBiMjRnYVhNZ1puSnZiU0IwYUdVZ1ptbHljM1FnYVc1d2RYUWdkVzUwYVd3Z2RHaGxJR3hoYzNRZ2FXNXdkWFFzSUhkcGRHZ2dZV3hzSUdsMEozTWdiVzkyWlcxbGJuUWdhVzRnYVhRdUlDcGNiaUFxSUVWNFlXMXdiR1VnYzJWemMybHZiaUJtYjNJZ2JXOTFjMlV0YVc1d2RYUTZJRzF2ZFhObFpHOTNiaUF0UGlCdGIzVnpaVzF2ZG1VZ0xUNGdiVzkxYzJWMWNGeHVJQ3BjYmlBcUlFOXVJR1ZoWTJnZ2NtVmpiMmR1YVhwcGJtY2dZM2xqYkdVZ0tITmxaU0JOWVc1aFoyVnlMbkpsWTI5bmJtbDZaU2tnZEdobElDNXlaV052WjI1cGVtVW9LU0J0WlhSb2IyUWdhWE1nWlhobFkzVjBaV1JjYmlBcUlIZG9hV05vSUdSbGRHVnliV2x1WlhNZ2QybDBhQ0J6ZEdGMFpTQnBkQ0J6YUc5MWJHUWdZbVV1WEc0Z0tseHVJQ29nU1dZZ2RHaGxJSEpsWTI5bmJtbDZaWElnYUdGeklIUm9aU0J6ZEdGMFpTQkdRVWxNUlVRc0lFTkJUa05GVEV4RlJDQnZjaUJTUlVOUFIwNUpXa1ZFSUNobGNYVmhiSE1nUlU1RVJVUXBMQ0JwZENCcGN5QnlaWE5sZENCMGIxeHVJQ29nVUU5VFUwbENURVVnZEc4Z1oybDJaU0JwZENCaGJtOTBhR1Z5SUdOb1lXNW5aU0J2YmlCMGFHVWdibVY0ZENCamVXTnNaUzVjYmlBcVhHNGdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lGQnZjM05wWW14bFhHNGdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHhjYmlBcUlDQWdJQ0FnSUNBZ0lDQWdLeTB0TFMwdEt5MHRMUzB0TFMwdExTMHRMUzB0TFN0Y2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnZkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIeGNiaUFxSUNBZ0lDQWdLeTB0TFMwdEt5MHRMUzB0S3lBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHhjYmlBcUlDQWdJQ0FnZkNBZ0lDQWdJQ0FnSUNBZ2ZDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh4Y2JpQXFJQ0FnUm1GcGJHVmtJQ0FnSUNBZ1EyRnVZMlZzYkdWa0lDQWdJQ0FnSUNBZ0lIeGNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FyTFMwdExTMHRMU3N0TFMwdExTMHJYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkNBZ0lDQWdJQ0FnSUNBZ0lDQWdmRnh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVbVZqYjJkdWFYcGxaQ0FnSUNBZ0lDQkNaV2RoYmx4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh4Y2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JEYUdGdVoyVmtYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmRnh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUlc1a1pXUXZVbVZqYjJkdWFYcGxaRnh1SUNvdlhHNTJZWElnVTFSQlZFVmZVRTlUVTBsQ1RFVWdQU0F4TzF4dWRtRnlJRk5VUVZSRlgwSkZSMEZPSUQwZ01qdGNiblpoY2lCVFZFRlVSVjlEU0VGT1IwVkVJRDBnTkR0Y2JuWmhjaUJUVkVGVVJWOUZUa1JGUkNBOUlEZzdYRzUyWVhJZ1UxUkJWRVZmVWtWRFQwZE9TVnBGUkNBOUlGTlVRVlJGWDBWT1JFVkVPMXh1ZG1GeUlGTlVRVlJGWDBOQlRrTkZURXhGUkNBOUlERTJPMXh1ZG1GeUlGTlVRVlJGWDBaQlNVeEZSQ0E5SURNeU8xeHVYRzR2S2lwY2JpQXFJRkpsWTI5bmJtbDZaWEpjYmlBcUlFVjJaWEo1SUhKbFkyOW5ibWw2WlhJZ2JtVmxaSE1nZEc4Z1pYaDBaVzVrSUdaeWIyMGdkR2hwY3lCamJHRnpjeTVjYmlBcUlFQmpiMjV6ZEhKMVkzUnZjbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk5jYmlBcUwxeHVablZ1WTNScGIyNGdVbVZqYjJkdWFYcGxjaWh2Y0hScGIyNXpLU0I3WEc0Z0lDQWdkR2hwY3k1dmNIUnBiMjV6SUQwZ1lYTnphV2R1S0h0OUxDQjBhR2x6TG1SbFptRjFiSFJ6TENCdmNIUnBiMjV6SUh4OElIdDlLVHRjYmx4dUlDQWdJSFJvYVhNdWFXUWdQU0IxYm1seGRXVkpaQ2dwTzF4dVhHNGdJQ0FnZEdocGN5NXRZVzVoWjJWeUlEMGdiblZzYkR0Y2JseHVJQ0FnSUM4dklHUmxabUYxYkhRZ2FYTWdaVzVoWW14bElIUnlkV1ZjYmlBZ0lDQjBhR2x6TG05d2RHbHZibk11Wlc1aFlteGxJRDBnYVdaVmJtUmxabWx1WldRb2RHaHBjeTV2Y0hScGIyNXpMbVZ1WVdKc1pTd2dkSEoxWlNrN1hHNWNiaUFnSUNCMGFHbHpMbk4wWVhSbElEMGdVMVJCVkVWZlVFOVRVMGxDVEVVN1hHNWNiaUFnSUNCMGFHbHpMbk5wYlhWc2RHRnVaVzkxY3lBOUlIdDlPMXh1SUNBZ0lIUm9hWE11Y21WeGRXbHlaVVpoYVd3Z1BTQmJYVHRjYm4xY2JseHVVbVZqYjJkdWFYcGxjaTV3Y205MGIzUjVjR1VnUFNCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIWnBjblIxWVd4Y2JpQWdJQ0FnS2lCQWRIbHdaU0I3VDJKcVpXTjBmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHUmxabUYxYkhSek9pQjdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUhObGRDQnZjSFJwYjI1elhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk5jYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRTWldOdloyNXBlbVZ5ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZERvZ1puVnVZM1JwYjI0b2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQmhjM05wWjI0b2RHaHBjeTV2Y0hScGIyNXpMQ0J2Y0hScGIyNXpLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QmhiSE52SUhWd1pHRjBaU0IwYUdVZ2RHOTFZMmhCWTNScGIyNHNJR2x1SUdOaGMyVWdjMjl0WlhSb2FXNW5JR05vWVc1blpXUWdZV0p2ZFhRZ2RHaGxJR1JwY21WamRHbHZibk12Wlc1aFlteGxaQ0J6ZEdGMFpWeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xaGJtRm5aWElnSmlZZ2RHaHBjeTV0WVc1aFoyVnlMblJ2ZFdOb1FXTjBhVzl1TG5Wd1pHRjBaU2dwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2djbVZqYjJkdWFYcGxJSE5wYlhWc2RHRnVaVzkxY3lCM2FYUm9JR0Z1SUc5MGFHVnlJSEpsWTI5bmJtbDZaWEl1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRTWldOdloyNXBlbVZ5ZlNCdmRHaGxjbEpsWTI5bmJtbDZaWEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUI3VW1WamIyZHVhWHBsY24wZ2RHaHBjMXh1SUNBZ0lDQXFMMXh1SUNBZ0lISmxZMjluYm1sNlpWZHBkR2c2SUdaMWJtTjBhVzl1S0c5MGFHVnlVbVZqYjJkdWFYcGxjaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9hVzUyYjJ0bFFYSnlZWGxCY21jb2IzUm9aWEpTWldOdloyNXBlbVZ5TENBbmNtVmpiMmR1YVhwbFYybDBhQ2NzSUhSb2FYTXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ6YVcxMWJIUmhibVZ2ZFhNZ1BTQjBhR2x6TG5OcGJYVnNkR0Z1Wlc5MWN6dGNiaUFnSUNBZ0lDQWdiM1JvWlhKU1pXTnZaMjVwZW1WeUlEMGdaMlYwVW1WamIyZHVhWHBsY2tKNVRtRnRaVWxtVFdGdVlXZGxjaWh2ZEdobGNsSmxZMjluYm1sNlpYSXNJSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVhOcGJYVnNkR0Z1Wlc5MWMxdHZkR2hsY2xKbFkyOW5ibWw2WlhJdWFXUmRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnphVzExYkhSaGJtVnZkWE5iYjNSb1pYSlNaV052WjI1cGVtVnlMbWxrWFNBOUlHOTBhR1Z5VW1WamIyZHVhWHBsY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzkwYUdWeVVtVmpiMmR1YVhwbGNpNXlaV052WjI1cGVtVlhhWFJvS0hSb2FYTXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQmtjbTl3SUhSb1pTQnphVzExYkhSaGJtVnZkWE1nYkdsdWF5NGdhWFFnWkc5bGMyNTBJSEpsYlc5MlpTQjBhR1VnYkdsdWF5QnZiaUIwYUdVZ2IzUm9aWElnY21WamIyZHVhWHBsY2k1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFKbFkyOW5ibWw2WlhKOUlHOTBhR1Z5VW1WamIyZHVhWHBsY2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUh0U1pXTnZaMjVwZW1WeWZTQjBhR2x6WEc0Z0lDQWdJQ292WEc0Z0lDQWdaSEp2Y0ZKbFkyOW5ibWw2WlZkcGRHZzZJR1oxYm1OMGFXOXVLRzkwYUdWeVVtVmpiMmR1YVhwbGNpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2FXNTJiMnRsUVhKeVlYbEJjbWNvYjNSb1pYSlNaV052WjI1cGVtVnlMQ0FuWkhKdmNGSmxZMjluYm1sNlpWZHBkR2duTENCMGFHbHpLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnZkR2hsY2xKbFkyOW5ibWw2WlhJZ1BTQm5aWFJTWldOdloyNXBlbVZ5UW5sT1lXMWxTV1pOWVc1aFoyVnlLRzkwYUdWeVVtVmpiMmR1YVhwbGNpd2dkR2hwY3lrN1hHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCMGFHbHpMbk5wYlhWc2RHRnVaVzkxYzF0dmRHaGxjbEpsWTI5bmJtbDZaWEl1YVdSZE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nY21WamIyZHVhWHBsY2lCallXNGdiMjVzZVNCeWRXNGdkMmhsYmlCaGJpQnZkR2hsY2lCcGN5Qm1ZV2xzYVc1blhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pXTnZaMjVwZW1WeWZTQnZkR2hsY2xKbFkyOW5ibWw2WlhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VtVmpiMmR1YVhwbGNuMGdkR2hwYzF4dUlDQWdJQ0FxTDF4dUlDQWdJSEpsY1hWcGNtVkdZV2xzZFhKbE9pQm1kVzVqZEdsdmJpaHZkR2hsY2xKbFkyOW5ibWw2WlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dsdWRtOXJaVUZ5Y21GNVFYSm5LRzkwYUdWeVVtVmpiMmR1YVhwbGNpd2dKM0psY1hWcGNtVkdZV2xzZFhKbEp5d2dkR2hwY3lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjWFZwY21WR1lXbHNJRDBnZEdocGN5NXlaWEYxYVhKbFJtRnBiRHRjYmlBZ0lDQWdJQ0FnYjNSb1pYSlNaV052WjI1cGVtVnlJRDBnWjJWMFVtVmpiMmR1YVhwbGNrSjVUbUZ0WlVsbVRXRnVZV2RsY2lodmRHaGxjbEpsWTI5bmJtbDZaWElzSUhSb2FYTXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2FXNUJjbkpoZVNoeVpYRjFhWEpsUm1GcGJDd2diM1JvWlhKU1pXTnZaMjVwZW1WeUtTQTlQVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGNYVnBjbVZHWVdsc0xuQjFjMmdvYjNSb1pYSlNaV052WjI1cGVtVnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOTBhR1Z5VW1WamIyZHVhWHBsY2k1eVpYRjFhWEpsUm1GcGJIVnlaU2gwYUdsektUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1pISnZjQ0IwYUdVZ2NtVnhkV2x5WlVaaGFXeDFjbVVnYkdsdWF5NGdhWFFnWkc5bGN5QnViM1FnY21WdGIzWmxJSFJvWlNCc2FXNXJJRzl1SUhSb1pTQnZkR2hsY2lCeVpXTnZaMjVwZW1WeUxseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1VtVmpiMmR1YVhwbGNuMGdiM1JvWlhKU1pXTnZaMjVwZW1WeVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ2UxSmxZMjluYm1sNlpYSjlJSFJvYVhOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JrY205d1VtVnhkV2x5WlVaaGFXeDFjbVU2SUdaMWJtTjBhVzl1S0c5MGFHVnlVbVZqYjJkdWFYcGxjaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9hVzUyYjJ0bFFYSnlZWGxCY21jb2IzUm9aWEpTWldOdloyNXBlbVZ5TENBblpISnZjRkpsY1hWcGNtVkdZV2xzZFhKbEp5d2dkR2hwY3lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYjNSb1pYSlNaV052WjI1cGVtVnlJRDBnWjJWMFVtVmpiMmR1YVhwbGNrSjVUbUZ0WlVsbVRXRnVZV2RsY2lodmRHaGxjbEpsWTI5bmJtbDZaWElzSUhSb2FYTXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FXNWtaWGdnUFNCcGJrRnljbUY1S0hSb2FYTXVjbVZ4ZFdseVpVWmhhV3dzSUc5MGFHVnlVbVZqYjJkdWFYcGxjaWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBibVJsZUNBK0lDMHhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbGNYVnBjbVZHWVdsc0xuTndiR2xqWlNocGJtUmxlQ3dnTVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUdoaGN5QnlaWEYxYVhKbElHWmhhV3gxY21WeklHSnZiMnhsWVc1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVhOU1pYRjFhWEpsUm1GcGJIVnlaWE02SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WlhGMWFYSmxSbUZwYkM1c1pXNW5kR2dnUGlBd08xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQnBaaUIwYUdVZ2NtVmpiMmR1YVhwbGNpQmpZVzRnY21WamIyZHVhWHBsSUhOcGJYVnNkR0Z1Wlc5MWN5QjNhWFJvSUdGdUlHOTBhR1Z5SUhKbFkyOW5ibWw2WlhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFKbFkyOW5ibWw2WlhKOUlHOTBhR1Z5VW1WamIyZHVhWHBsY2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR05oYmxKbFkyOW5ibWw2WlZkcGRHZzZJR1oxYm1OMGFXOXVLRzkwYUdWeVVtVmpiMmR1YVhwbGNpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdJU0YwYUdsekxuTnBiWFZzZEdGdVpXOTFjMXR2ZEdobGNsSmxZMjluYm1sNlpYSXVhV1JkTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCWmIzVWdjMmh2ZFd4a0lIVnpaU0JnZEhKNVJXMXBkR0FnYVc1emRHVmhaQ0J2WmlCZ1pXMXBkR0FnWkdseVpXTjBiSGtnZEc4Z1kyaGxZMnRjYmlBZ0lDQWdLaUIwYUdGMElHRnNiQ0IwYUdVZ2JtVmxaR1ZrSUhKbFkyOW5ibWw2WlhKeklHaGhjeUJtWVdsc1pXUWdZbVZtYjNKbElHVnRhWFIwYVc1bkxseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCcGJuQjFkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHVnRhWFE2SUdaMWJtTjBhVzl1S0dsdWNIVjBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnZG1GeUlITjBZWFJsSUQwZ2RHaHBjeTV6ZEdGMFpUdGNibHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJsYldsMEtHVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxtMWhibUZuWlhJdVpXMXBkQ2hsZG1WdWRDd2dhVzV3ZFhRcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z0ozQmhibk4wWVhKMEp5QmhibVFnSjNCaGJtMXZkbVVuWEc0Z0lDQWdJQ0FnSUdsbUlDaHpkR0YwWlNBOElGTlVRVlJGWDBWT1JFVkVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiV2wwS0hObGJHWXViM0IwYVc5dWN5NWxkbVZ1ZENBcklITjBZWFJsVTNSeUtITjBZWFJsS1NrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JsYldsMEtITmxiR1l1YjNCMGFXOXVjeTVsZG1WdWRDazdJQzh2SUhOcGJYQnNaU0FuWlhabGJuUk9ZVzFsSnlCbGRtVnVkSE5jYmx4dUlDQWdJQ0FnSUNCcFppQW9hVzV3ZFhRdVlXUmthWFJwYjI1aGJFVjJaVzUwS1NCN0lDOHZJR0ZrWkdsMGFXOXVZV3dnWlhabGJuUW9jR0Z1YkdWbWRDd2djR0Z1Y21sbmFIUXNJSEJwYm1Ob2FXNHNJSEJwYm1Ob2IzVjBMaTR1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdaVzFwZENocGJuQjFkQzVoWkdScGRHbHZibUZzUlhabGJuUXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdjR0Z1Wlc1a0lHRnVaQ0J3WVc1allXNWpaV3hjYmlBZ0lDQWdJQ0FnYVdZZ0tITjBZWFJsSUQ0OUlGTlVRVlJGWDBWT1JFVkVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiV2wwS0hObGJHWXViM0IwYVc5dWN5NWxkbVZ1ZENBcklITjBZWFJsVTNSeUtITjBZWFJsS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMmhsWTJzZ2RHaGhkQ0JoYkd3Z2RHaGxJSEpsY1hWcGNtVWdabUZwYkhWeVpTQnlaV052WjI1cGVtVnljeUJvWVhNZ1ptRnBiR1ZrTEZ4dUlDQWdJQ0FxSUdsbUlIUnlkV1VzSUdsMElHVnRhWFJ6SUdFZ1oyVnpkSFZ5WlNCbGRtVnVkQ3hjYmlBZ0lDQWdLaUJ2ZEdobGNuZHBjMlVzSUhObGRIVndJSFJvWlNCemRHRjBaU0IwYnlCR1FVbE1SVVF1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR2x1Y0hWMFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZEhKNVJXMXBkRG9nWm5WdVkzUnBiMjRvYVc1d2RYUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WTJGdVJXMXBkQ2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bGJXbDBLR2x1Y0hWMEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlCcGRDZHpJR1poYVd4cGJtY2dZVzU1ZDJGNVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSaGRHVWdQU0JUVkVGVVJWOUdRVWxNUlVRN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlHTmhiaUIzWlNCbGJXbDBQMXh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTmhia1Z0YVhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FTQTlJREE3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2hwSUR3Z2RHaHBjeTV5WlhGMWFYSmxSbUZwYkM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtIUm9hWE11Y21WeGRXbHlaVVpoYVd4YmFWMHVjM1JoZEdVZ0ppQW9VMVJCVkVWZlJrRkpURVZFSUh3Z1UxUkJWRVZmVUU5VFUwbENURVVwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdrckt6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ2RYQmtZWFJsSUhSb1pTQnlaV052WjI1cGVtVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHbHVjSFYwUkdGMFlWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbFkyOW5ibWw2WlRvZ1puVnVZM1JwYjI0b2FXNXdkWFJFWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUcxaGEyVWdZU0J1WlhjZ1kyOXdlU0J2WmlCMGFHVWdhVzV3ZFhSRVlYUmhYRzRnSUNBZ0lDQWdJQzh2SUhOdklIZGxJR05oYmlCamFHRnVaMlVnZEdobElHbHVjSFYwUkdGMFlTQjNhWFJvYjNWMElHMWxjM05wYm1jZ2RYQWdkR2hsSUc5MGFHVnlJSEpsWTI5bmJtbDZaWEp6WEc0Z0lDQWdJQ0FnSUhaaGNpQnBibkIxZEVSaGRHRkRiRzl1WlNBOUlHRnpjMmxuYmloN2ZTd2dhVzV3ZFhSRVlYUmhLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnBjeUJwY3lCbGJtRmliR1ZrSUdGdVpDQmhiR3h2ZHlCeVpXTnZaMjVwZW1sdVp6OWNiaUFnSUNBZ0lDQWdhV1lnS0NGaWIyOXNUM0pHYmloMGFHbHpMbTl3ZEdsdmJuTXVaVzVoWW14bExDQmJkR2hwY3l3Z2FXNXdkWFJFWVhSaFEyeHZibVZkS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaWE5sZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpkR0YwWlNBOUlGTlVRVlJGWDBaQlNVeEZSRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUhKbGMyVjBJSGRvWlc0Z2QyVW5kbVVnY21WaFkyaGxaQ0IwYUdVZ1pXNWtYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbk4wWVhSbElDWWdLRk5VUVZSRlgxSkZRMDlIVGtsYVJVUWdmQ0JUVkVGVVJWOURRVTVEUlV4TVJVUWdmQ0JUVkVGVVJWOUdRVWxNUlVRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSbElEMGdVMVJCVkVWZlVFOVRVMGxDVEVVN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJsSUQwZ2RHaHBjeTV3Y205alpYTnpLR2x1Y0hWMFJHRjBZVU5zYjI1bEtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCMGFHVWdjbVZqYjJkdWFYcGxjaUJvWVhNZ2NtVmpiMmR1YVhwbFpDQmhJR2RsYzNSMWNtVmNiaUFnSUNBZ0lDQWdMeThnYzI4Z2RISnBaMmRsY2lCaGJpQmxkbVZ1ZEZ4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1emRHRjBaU0FtSUNoVFZFRlVSVjlDUlVkQlRpQjhJRk5VUVZSRlgwTklRVTVIUlVRZ2ZDQlRWRUZVUlY5RlRrUkZSQ0I4SUZOVVFWUkZYME5CVGtORlRFeEZSQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRISjVSVzFwZENocGJuQjFkRVJoZEdGRGJHOXVaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ2NtVjBkWEp1SUhSb1pTQnpkR0YwWlNCdlppQjBhR1VnY21WamIyZHVhWHBsY2x4dUlDQWdJQ0FxSUhSb1pTQmhZM1IxWVd3Z2NtVmpiMmR1YVhwcGJtY2dhR0Z3Y0dWdWN5QnBiaUIwYUdseklHMWxkR2h2WkZ4dUlDQWdJQ0FxSUVCMmFYSjBkV0ZzWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR2x1Y0hWMFJHRjBZVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHREYjI1emRIMGdVMVJCVkVWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3Y205alpYTnpPaUJtZFc1amRHbHZiaWhwYm5CMWRFUmhkR0VwSUhzZ2ZTd2dMeThnYW5Ob2FXNTBJR2xuYm05eVpUcHNhVzVsWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCeVpYUjFjbTRnZEdobElIQnlaV1psY25KbFpDQjBiM1ZqYUMxaFkzUnBiMjVjYmlBZ0lDQWdLaUJBZG1seWRIVmhiRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVYMWNiaUFnSUNBZ0tpOWNiaUFnSUNCblpYUlViM1ZqYUVGamRHbHZiam9nWm5WdVkzUnBiMjRvS1NCN0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJqWVd4c1pXUWdkMmhsYmlCMGFHVWdaMlZ6ZEhWeVpTQnBjMjRuZENCaGJHeHZkMlZrSUhSdklISmxZMjluYm1sNlpWeHVJQ0FnSUNBcUlHeHBhMlVnZDJobGJpQmhibTkwYUdWeUlHbHpJR0psYVc1bklISmxZMjluYm1sNlpXUWdiM0lnYVhRZ2FYTWdaR2x6WVdKc1pXUmNiaUFnSUNBZ0tpQkFkbWx5ZEhWaGJGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbGMyVjBPaUJtZFc1amRHbHZiaWdwSUhzZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCblpYUWdZU0IxYzJGaWJHVWdjM1J5YVc1bkxDQjFjMlZrSUdGeklHVjJaVzUwSUhCdmMzUm1hWGhjYmlBcUlFQndZWEpoYlNCN1EyOXVjM1I5SUhOMFlYUmxYRzRnS2lCQWNtVjBkWEp1Y3lCN1UzUnlhVzVuZlNCemRHRjBaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnpkR0YwWlZOMGNpaHpkR0YwWlNrZ2UxeHVJQ0FnSUdsbUlDaHpkR0YwWlNBbUlGTlVRVlJGWDBOQlRrTkZURXhGUkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0oyTmhibU5sYkNjN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoemRHRjBaU0FtSUZOVVFWUkZYMFZPUkVWRUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW5aVzVrSnp0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hOMFlYUmxJQ1lnVTFSQlZFVmZRMGhCVGtkRlJDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdKMjF2ZG1Vbk8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2MzUmhkR1VnSmlCVFZFRlVSVjlDUlVkQlRpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdKM04wWVhKMEp6dGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJQ2NuTzF4dWZWeHVYRzR2S2lwY2JpQXFJR1JwY21WamRHbHZiaUJqYjI1eklIUnZJSE4wY21sdVoxeHVJQ29nUUhCaGNtRnRJSHREYjI1emRIMGdaR2x5WldOMGFXOXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1UzUnlhVzVuZlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJrYVhKbFkzUnBiMjVUZEhJb1pHbHlaV04wYVc5dUtTQjdYRzRnSUNBZ2FXWWdLR1JwY21WamRHbHZiaUE5UFNCRVNWSkZRMVJKVDA1ZlJFOVhUaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSjJSdmQyNG5PMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9aR2x5WldOMGFXOXVJRDA5SUVSSlVrVkRWRWxQVGw5VlVDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdKM1Z3Snp0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dScGNtVmpkR2x2YmlBOVBTQkVTVkpGUTFSSlQwNWZURVZHVkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0oyeGxablFuTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWkdseVpXTjBhVzl1SUQwOUlFUkpVa1ZEVkVsUFRsOVNTVWRJVkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0ozSnBaMmgwSnp0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlDY25PMXh1ZlZ4dVhHNHZLaXBjYmlBcUlHZGxkQ0JoSUhKbFkyOW5ibWw2WlhJZ1lua2dibUZ0WlNCcFppQnBkQ0JwY3lCaWIzVnVaQ0IwYnlCaElHMWhibUZuWlhKY2JpQXFJRUJ3WVhKaGJTQjdVbVZqYjJkdWFYcGxjbnhUZEhKcGJtZDlJRzkwYUdWeVVtVmpiMmR1YVhwbGNseHVJQ29nUUhCaGNtRnRJSHRTWldOdloyNXBlbVZ5ZlNCeVpXTnZaMjVwZW1WeVhHNGdLaUJBY21WMGRYSnVjeUI3VW1WamIyZHVhWHBsY24xY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWMFVtVmpiMmR1YVhwbGNrSjVUbUZ0WlVsbVRXRnVZV2RsY2lodmRHaGxjbEpsWTI5bmJtbDZaWElzSUhKbFkyOW5ibWw2WlhJcElIdGNiaUFnSUNCMllYSWdiV0Z1WVdkbGNpQTlJSEpsWTI5bmJtbDZaWEl1YldGdVlXZGxjanRjYmlBZ0lDQnBaaUFvYldGdVlXZGxjaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYldGdVlXZGxjaTVuWlhRb2IzUm9aWEpTWldOdloyNXBlbVZ5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHOTBhR1Z5VW1WamIyZHVhWHBsY2p0Y2JuMWNibHh1THlvcVhHNGdLaUJVYUdseklISmxZMjluYm1sNlpYSWdhWE1nYW5WemRDQjFjMlZrSUdGeklHRWdZbUZ6WlNCbWIzSWdkR2hsSUhOcGJYQnNaU0JoZEhSeWFXSjFkR1VnY21WamIyZHVhWHBsY25NdVhHNGdLaUJBWTI5dWMzUnlkV04wYjNKY2JpQXFJRUJsZUhSbGJtUnpJRkpsWTI5bmJtbDZaWEpjYmlBcUwxeHVablZ1WTNScGIyNGdRWFIwY2xKbFkyOW5ibWw2WlhJb0tTQjdYRzRnSUNBZ1VtVmpiMmR1YVhwbGNpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dWZWeHVYRzVwYm1obGNtbDBLRUYwZEhKU1pXTnZaMjVwZW1WeUxDQlNaV052WjI1cGVtVnlMQ0I3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUc1aGJXVnpjR0ZqWlZ4dUlDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCQmRIUnlVbVZqYjJkdWFYcGxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHUmxabUYxYkhSek9pQjdYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FnSUNBZ0tpQkFaR1ZtWVhWc2RDQXhYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCd2IybHVkR1Z5Y3pvZ01WeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlZjMlZrSUhSdklHTm9aV05ySUdsbUlHbDBJSFJvWlNCeVpXTnZaMjVwZW1WeUlISmxZMlZwZG1WeklIWmhiR2xrSUdsdWNIVjBMQ0JzYVd0bElHbHVjSFYwTG1ScGMzUmhibU5sSUQ0Z01UQXVYRzRnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRUYwZEhKU1pXTnZaMjVwZW1WeVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdsdWNIVjBYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdlMEp2YjJ4bFlXNTlJSEpsWTI5bmJtbDZaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQmhkSFJ5VkdWemREb2dablZ1WTNScGIyNG9hVzV3ZFhRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUc5d2RHbHZibEJ2YVc1MFpYSnpJRDBnZEdocGN5NXZjSFJwYjI1ekxuQnZhVzUwWlhKek8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2IzQjBhVzl1VUc5cGJuUmxjbk1nUFQwOUlEQWdmSHdnYVc1d2RYUXVjRzlwYm5SbGNuTXViR1Z1WjNSb0lEMDlQU0J2Y0hScGIyNVFiMmx1ZEdWeWN6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVSEp2WTJWemN5QjBhR1VnYVc1d2RYUWdZVzVrSUhKbGRIVnliaUIwYUdVZ2MzUmhkR1VnWm05eUlIUm9aU0J5WldOdloyNXBlbVZ5WEc0Z0lDQWdJQ29nUUcxbGJXSmxjbTltSUVGMGRISlNaV052WjI1cGVtVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHbHVjSFYwWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nZXlwOUlGTjBZWFJsWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSEp2WTJWemN6b2dablZ1WTNScGIyNG9hVzV3ZFhRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhOMFlYUmxJRDBnZEdocGN5NXpkR0YwWlR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1YyWlc1MFZIbHdaU0E5SUdsdWNIVjBMbVYyWlc1MFZIbHdaVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdhWE5TWldOdloyNXBlbVZrSUQwZ2MzUmhkR1VnSmlBb1UxUkJWRVZmUWtWSFFVNGdmQ0JUVkVGVVJWOURTRUZPUjBWRUtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdselZtRnNhV1FnUFNCMGFHbHpMbUYwZEhKVVpYTjBLR2x1Y0hWMEtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCdmJpQmpZVzVqWld3Z2FXNXdkWFFnWVc1a0lIZGxKM1psSUhKbFkyOW5ibWw2WldRZ1ltVm1iM0psTENCeVpYUjFjbTRnVTFSQlZFVmZRMEZPUTBWTVRFVkVYRzRnSUNBZ0lDQWdJR2xtSUNocGMxSmxZMjluYm1sNlpXUWdKaVlnS0dWMlpXNTBWSGx3WlNBbUlFbE9VRlZVWDBOQlRrTkZUQ0I4ZkNBaGFYTldZV3hwWkNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZEdGMFpTQjhJRk5VUVZSRlgwTkJUa05GVEV4RlJEdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hwYzFKbFkyOW5ibWw2WldRZ2ZId2dhWE5XWVd4cFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1YyWlc1MFZIbHdaU0FtSUVsT1VGVlVYMFZPUkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRHRjBaU0I4SUZOVVFWUkZYMFZPUkVWRU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNnaEtITjBZWFJsSUNZZ1UxUkJWRVZmUWtWSFFVNHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRk5VUVZSRlgwSkZSMEZPTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMFlYUmxJSHdnVTFSQlZFVmZRMGhCVGtkRlJEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdVMVJCVkVWZlJrRkpURVZFTzF4dUlDQWdJSDFjYm4wcE8xeHVYRzR2S2lwY2JpQXFJRkJoYmx4dUlDb2dVbVZqYjJkdWFYcGxaQ0IzYUdWdUlIUm9aU0J3YjJsdWRHVnlJR2x6SUdSdmQyNGdZVzVrSUcxdmRtVmtJR2x1SUhSb1pTQmhiR3h2ZDJWa0lHUnBjbVZqZEdsdmJpNWNiaUFxSUVCamIyNXpkSEoxWTNSdmNseHVJQ29nUUdWNGRHVnVaSE1nUVhSMGNsSmxZMjluYm1sNlpYSmNiaUFxTDF4dVpuVnVZM1JwYjI0Z1VHRnVVbVZqYjJkdWFYcGxjaWdwSUh0Y2JpQWdJQ0JCZEhSeVVtVmpiMmR1YVhwbGNpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dVhHNGdJQ0FnZEdocGN5NXdXQ0E5SUc1MWJHdzdYRzRnSUNBZ2RHaHBjeTV3V1NBOUlHNTFiR3c3WEc1OVhHNWNibWx1YUdWeWFYUW9VR0Z1VW1WamIyZHVhWHBsY2l3Z1FYUjBjbEpsWTI5bmJtbDZaWElzSUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWJtRnRaWE53WVdObFhHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlGQmhibEpsWTI5bmJtbDZaWEpjYmlBZ0lDQWdLaTljYmlBZ0lDQmtaV1poZFd4MGN6b2dlMXh1SUNBZ0lDQWdJQ0JsZG1WdWREb2dKM0JoYmljc1hHNGdJQ0FnSUNBZ0lIUm9jbVZ6YUc5c1pEb2dNVEFzWEc0Z0lDQWdJQ0FnSUhCdmFXNTBaWEp6T2lBeExGeHVJQ0FnSUNBZ0lDQmthWEpsWTNScGIyNDZJRVJKVWtWRFZFbFBUbDlCVEV4Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWjJWMFZHOTFZMmhCWTNScGIyNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdaR2x5WldOMGFXOXVJRDBnZEdocGN5NXZjSFJwYjI1ekxtUnBjbVZqZEdsdmJqdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGamRHbHZibk1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdhV1lnS0dScGNtVmpkR2x2YmlBbUlFUkpVa1ZEVkVsUFRsOUlUMUpKV2s5T1ZFRk1LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhZM1JwYjI1ekxuQjFjMmdvVkU5VlEwaGZRVU5VU1U5T1gxQkJUbDlaS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvWkdseVpXTjBhVzl1SUNZZ1JFbFNSVU5VU1U5T1gxWkZVbFJKUTBGTUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaFkzUnBiMjV6TG5CMWMyZ29WRTlWUTBoZlFVTlVTVTlPWDFCQlRsOVlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWVdOMGFXOXVjenRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdaR2x5WldOMGFXOXVWR1Z6ZERvZ1puVnVZM1JwYjI0b2FXNXdkWFFwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzl3ZEdsdmJuTWdQU0IwYUdsekxtOXdkR2x2Ym5NN1hHNGdJQ0FnSUNBZ0lIWmhjaUJvWVhOTmIzWmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFpoY2lCa2FYTjBZVzVqWlNBOUlHbHVjSFYwTG1ScGMzUmhibU5sTzF4dUlDQWdJQ0FnSUNCMllYSWdaR2x5WldOMGFXOXVJRDBnYVc1d2RYUXVaR2x5WldOMGFXOXVPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2VDQTlJR2x1Y0hWMExtUmxiSFJoV0R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSGtnUFNCcGJuQjFkQzVrWld4MFlWazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2JHOWpheUIwYnlCaGVHbHpQMXh1SUNBZ0lDQWdJQ0JwWmlBb0lTaGthWEpsWTNScGIyNGdKaUJ2Y0hScGIyNXpMbVJwY21WamRHbHZiaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG1ScGNtVmpkR2x2YmlBbUlFUkpVa1ZEVkVsUFRsOUlUMUpKV2s5T1ZFRk1LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdseVpXTjBhVzl1SUQwZ0tIZ2dQVDA5SURBcElEOGdSRWxTUlVOVVNVOU9YMDVQVGtVZ09pQW9lQ0E4SURBcElEOGdSRWxTUlVOVVNVOU9YMHhGUmxRZ09pQkVTVkpGUTFSSlQwNWZVa2xIU0ZRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnpUVzkyWldRZ1BTQjRJQ0U5SUhSb2FYTXVjRmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdsemRHRnVZMlVnUFNCTllYUm9MbUZpY3locGJuQjFkQzVrWld4MFlWZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYSmxZM1JwYjI0Z1BTQW9lU0E5UFQwZ01Da2dQeUJFU1ZKRlExUkpUMDVmVGs5T1JTQTZJQ2g1SUR3Z01Da2dQeUJFU1ZKRlExUkpUMDVmVlZBZ09pQkVTVkpGUTFSSlQwNWZSRTlYVGp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lYTk5iM1psWkNBOUlIa2dJVDBnZEdocGN5NXdXVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOMFlXNWpaU0E5SUUxaGRHZ3VZV0p6S0dsdWNIVjBMbVJsYkhSaFdTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhVzV3ZFhRdVpHbHlaV04wYVc5dUlEMGdaR2x5WldOMGFXOXVPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhR0Z6VFc5MlpXUWdKaVlnWkdsemRHRnVZMlVnUGlCdmNIUnBiMjV6TG5Sb2NtVnphRzlzWkNBbUppQmthWEpsWTNScGIyNGdKaUJ2Y0hScGIyNXpMbVJwY21WamRHbHZianRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZWFIwY2xSbGMzUTZJR1oxYm1OMGFXOXVLR2x1Y0hWMEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQkJkSFJ5VW1WamIyZHVhWHBsY2k1d2NtOTBiM1I1Y0dVdVlYUjBjbFJsYzNRdVkyRnNiQ2gwYUdsekxDQnBibkIxZENrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNoMGFHbHpMbk4wWVhSbElDWWdVMVJCVkVWZlFrVkhRVTRnZkh3Z0tDRW9kR2hwY3k1emRHRjBaU0FtSUZOVVFWUkZYMEpGUjBGT0tTQW1KaUIwYUdsekxtUnBjbVZqZEdsdmJsUmxjM1FvYVc1d2RYUXBLU2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR1Z0YVhRNklHWjFibU4wYVc5dUtHbHVjSFYwS1NCN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1d1dDQTlJR2x1Y0hWMExtUmxiSFJoV0R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3V1NBOUlHbHVjSFYwTG1SbGJIUmhXVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdaR2x5WldOMGFXOXVJRDBnWkdseVpXTjBhVzl1VTNSeUtHbHVjSFYwTG1ScGNtVmpkR2x2YmlrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dScGNtVmpkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1d2RYUXVZV1JrYVhScGIyNWhiRVYyWlc1MElEMGdkR2hwY3k1dmNIUnBiMjV6TG1WMlpXNTBJQ3NnWkdseVpXTjBhVzl1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOMWNHVnlMbVZ0YVhRdVkyRnNiQ2gwYUdsekxDQnBibkIxZENrN1hHNGdJQ0FnZlZ4dWZTazdYRzVjYmk4cUtseHVJQ29nVUdsdVkyaGNiaUFxSUZKbFkyOW5ibWw2WldRZ2QyaGxiaUIwZDI4Z2IzSWdiVzl5WlNCd2IybHVkR1Z5Y3lCaGNtVWdiVzkyYVc1bklIUnZkMkZ5WkNBb2VtOXZiUzFwYmlrZ2IzSWdZWGRoZVNCbWNtOXRJR1ZoWTJnZ2IzUm9aWElnS0hwdmIyMHRiM1YwS1M1Y2JpQXFJRUJqYjI1emRISjFZM1J2Y2x4dUlDb2dRR1Y0ZEdWdVpITWdRWFIwY2xKbFkyOW5ibWw2WlhKY2JpQXFMMXh1Wm5WdVkzUnBiMjRnVUdsdVkyaFNaV052WjI1cGVtVnlLQ2tnZTF4dUlDQWdJRUYwZEhKU1pXTnZaMjVwZW1WeUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc1OVhHNWNibWx1YUdWeWFYUW9VR2x1WTJoU1pXTnZaMjVwZW1WeUxDQkJkSFJ5VW1WamIyZHVhWHBsY2l3Z2UxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQnVZVzFsYzNCaFkyVmNiaUFnSUNBZ0tpQkFiV1Z0WW1WeWIyWWdVR2x1WTJoU1pXTnZaMjVwZW1WeVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWkdWbVlYVnNkSE02SUh0Y2JpQWdJQ0FnSUNBZ1pYWmxiblE2SUNkd2FXNWphQ2NzWEc0Z0lDQWdJQ0FnSUhSb2NtVnphRzlzWkRvZ01DeGNiaUFnSUNBZ0lDQWdjRzlwYm5SbGNuTTZJREpjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdaMlYwVkc5MVkyaEJZM1JwYjI0NklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdXMVJQVlVOSVgwRkRWRWxQVGw5T1QwNUZYVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZWFIwY2xSbGMzUTZJR1oxYm1OMGFXOXVLR2x1Y0hWMEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5emRYQmxjaTVoZEhSeVZHVnpkQzVqWVd4c0tIUm9hWE1zSUdsdWNIVjBLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdLRTFoZEdndVlXSnpLR2x1Y0hWMExuTmpZV3hsSUMwZ01Ta2dQaUIwYUdsekxtOXdkR2x2Ym5NdWRHaHlaWE5vYjJ4a0lIeDhJSFJvYVhNdWMzUmhkR1VnSmlCVFZFRlVSVjlDUlVkQlRpazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHVnRhWFE2SUdaMWJtTjBhVzl1S0dsdWNIVjBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBibkIxZEM1elkyRnNaU0FoUFQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2x1VDNWMElEMGdhVzV3ZFhRdWMyTmhiR1VnUENBeElEOGdKMmx1SnlBNklDZHZkWFFuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV3ZFhRdVlXUmthWFJwYjI1aGJFVjJaVzUwSUQwZ2RHaHBjeTV2Y0hScGIyNXpMbVYyWlc1MElDc2dhVzVQZFhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzVndaWEl1WlcxcGRDNWpZV3hzS0hSb2FYTXNJR2x1Y0hWMEtUdGNiaUFnSUNCOVhHNTlLVHRjYmx4dUx5b3FYRzRnS2lCUWNtVnpjMXh1SUNvZ1VtVmpiMmR1YVhwbFpDQjNhR1Z1SUhSb1pTQndiMmx1ZEdWeUlHbHpJR1J2ZDI0Z1ptOXlJSGdnYlhNZ2QybDBhRzkxZENCaGJua2diVzkyWlcxbGJuUXVYRzRnS2lCQVkyOXVjM1J5ZFdOMGIzSmNiaUFxSUVCbGVIUmxibVJ6SUZKbFkyOW5ibWw2WlhKY2JpQXFMMXh1Wm5WdVkzUnBiMjRnVUhKbGMzTlNaV052WjI1cGVtVnlLQ2tnZTF4dUlDQWdJRkpsWTI5bmJtbDZaWEl1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektUdGNibHh1SUNBZ0lIUm9hWE11WDNScGJXVnlJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDlwYm5CMWRDQTlJRzUxYkd3N1hHNTlYRzVjYm1sdWFHVnlhWFFvVUhKbGMzTlNaV052WjI1cGVtVnlMQ0JTWldOdloyNXBlbVZ5TENCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FHNWhiV1Z6Y0dGalpWeHVJQ0FnSUNBcUlFQnRaVzFpWlhKdlppQlFjbVZ6YzFKbFkyOW5ibWw2WlhKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JrWldaaGRXeDBjem9nZTF4dUlDQWdJQ0FnSUNCbGRtVnVkRG9nSjNCeVpYTnpKeXhjYmlBZ0lDQWdJQ0FnY0c5cGJuUmxjbk02SURFc1hHNGdJQ0FnSUNBZ0lIUnBiV1U2SURJMU1Td2dMeThnYldsdWFXMWhiQ0IwYVcxbElHOW1JSFJvWlNCd2IybHVkR1Z5SUhSdklHSmxJSEJ5WlhOelpXUmNiaUFnSUNBZ0lDQWdkR2h5WlhOb2IyeGtPaUE1SUM4dklHRWdiV2x1YVcxaGJDQnRiM1psYldWdWRDQnBjeUJ2YXl3Z1luVjBJR3RsWlhBZ2FYUWdiRzkzWEc0Z0lDQWdmU3hjYmx4dUlDQWdJR2RsZEZSdmRXTm9RV04wYVc5dU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRVVDFWRFNGOUJRMVJKVDA1ZlFWVlVUMTA3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEJ5YjJObGMzTTZJR1oxYm1OMGFXOXVLR2x1Y0hWMEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdmNIUnBiMjV6SUQwZ2RHaHBjeTV2Y0hScGIyNXpPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RtRnNhV1JRYjJsdWRHVnljeUE5SUdsdWNIVjBMbkJ2YVc1MFpYSnpMbXhsYm1kMGFDQTlQVDBnYjNCMGFXOXVjeTV3YjJsdWRHVnljenRjYmlBZ0lDQWdJQ0FnZG1GeUlIWmhiR2xrVFc5MlpXMWxiblFnUFNCcGJuQjFkQzVrYVhOMFlXNWpaU0E4SUc5d2RHbHZibk11ZEdoeVpYTm9iMnhrTzF4dUlDQWdJQ0FnSUNCMllYSWdkbUZzYVdSVWFXMWxJRDBnYVc1d2RYUXVaR1ZzZEdGVWFXMWxJRDRnYjNCMGFXOXVjeTUwYVcxbE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgybHVjSFYwSUQwZ2FXNXdkWFE3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdkMlVnYjI1c2VTQmhiR3h2ZHlCc2FYUjBiR1VnYlc5MlpXMWxiblJjYmlBZ0lDQWdJQ0FnTHk4Z1lXNWtJSGRsSjNabElISmxZV05vWldRZ1lXNGdaVzVrSUdWMlpXNTBMQ0J6YnlCaElIUmhjQ0JwY3lCd2IzTnphV0pzWlZ4dUlDQWdJQ0FnSUNCcFppQW9JWFpoYkdsa1RXOTJaVzFsYm5RZ2ZId2dJWFpoYkdsa1VHOXBiblJsY25NZ2ZId2dLR2x1Y0hWMExtVjJaVzUwVkhsd1pTQW1JQ2hKVGxCVlZGOUZUa1FnZkNCSlRsQlZWRjlEUVU1RFJVd3BJQ1ltSUNGMllXeHBaRlJwYldVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsYzJWMEtDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYVc1d2RYUXVaWFpsYm5SVWVYQmxJQ1lnU1U1UVZWUmZVMVJCVWxRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ6WlhRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1JwYldWeUlEMGdjMlYwVkdsdFpXOTFkRU52Ym5SbGVIUW9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpkR0YwWlNBOUlGTlVRVlJGWDFKRlEwOUhUa2xhUlVRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwY25sRmJXbDBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMQ0J2Y0hScGIyNXpMblJwYldVc0lIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHbHVjSFYwTG1WMlpXNTBWSGx3WlNBbUlFbE9VRlZVWDBWT1JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZOVVFWUkZYMUpGUTA5SFRrbGFSVVE3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZOVVFWUkZYMFpCU1V4RlJEdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NtVnpaWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdocGN5NWZkR2x0WlhJcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCbGJXbDBPaUJtZFc1amRHbHZiaWhwYm5CMWRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6ZEdGMFpTQWhQVDBnVTFSQlZFVmZVa1ZEVDBkT1NWcEZSQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHVjSFYwSUNZbUlDaHBibkIxZEM1bGRtVnVkRlI1Y0dVZ0ppQkpUbEJWVkY5RlRrUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xaGJtRm5aWEl1WlcxcGRDaDBhR2x6TG05d2RHbHZibk11WlhabGJuUWdLeUFuZFhBbkxDQnBibkIxZENrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXBibkIxZEM1MGFXMWxVM1JoYlhBZ1BTQnViM2NvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXRnVZV2RsY2k1bGJXbDBLSFJvYVhNdWIzQjBhVzl1Y3k1bGRtVnVkQ3dnZEdocGN5NWZhVzV3ZFhRcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmU2s3WEc1Y2JpOHFLbHh1SUNvZ1VtOTBZWFJsWEc0Z0tpQlNaV052WjI1cGVtVmtJSGRvWlc0Z2RIZHZJRzl5SUcxdmNtVWdjRzlwYm5SbGNpQmhjbVVnYlc5MmFXNW5JR2x1SUdFZ1kybHlZM1ZzWVhJZ2JXOTBhVzl1TGx4dUlDb2dRR052Ym5OMGNuVmpkRzl5WEc0Z0tpQkFaWGgwWlc1a2N5QkJkSFJ5VW1WamIyZHVhWHBsY2x4dUlDb3ZYRzVtZFc1amRHbHZiaUJTYjNSaGRHVlNaV052WjI1cGVtVnlLQ2tnZTF4dUlDQWdJRUYwZEhKU1pXTnZaMjVwZW1WeUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc1OVhHNWNibWx1YUdWeWFYUW9VbTkwWVhSbFVtVmpiMmR1YVhwbGNpd2dRWFIwY2xKbFkyOW5ibWw2WlhJc0lIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFibUZ0WlhOd1lXTmxYRzRnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRkp2ZEdGMFpWSmxZMjluYm1sNlpYSmNiaUFnSUNBZ0tpOWNiaUFnSUNCa1pXWmhkV3gwY3pvZ2UxeHVJQ0FnSUNBZ0lDQmxkbVZ1ZERvZ0ozSnZkR0YwWlNjc1hHNGdJQ0FnSUNBZ0lIUm9jbVZ6YUc5c1pEb2dNQ3hjYmlBZ0lDQWdJQ0FnY0c5cGJuUmxjbk02SURKY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWjJWMFZHOTFZMmhCWTNScGIyNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzFSUFZVTklYMEZEVkVsUFRsOU9UMDVGWFR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWVhSMGNsUmxjM1E2SUdaMWJtTjBhVzl1S0dsdWNIVjBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXpkWEJsY2k1aGRIUnlWR1Z6ZEM1allXeHNLSFJvYVhNc0lHbHVjSFYwS1NBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnS0UxaGRHZ3VZV0p6S0dsdWNIVjBMbkp2ZEdGMGFXOXVLU0ErSUhSb2FYTXViM0IwYVc5dWN5NTBhSEpsYzJodmJHUWdmSHdnZEdocGN5NXpkR0YwWlNBbUlGTlVRVlJGWDBKRlIwRk9LVHRjYmlBZ0lDQjlYRzU5S1R0Y2JseHVMeW9xWEc0Z0tpQlRkMmx3WlZ4dUlDb2dVbVZqYjJkdWFYcGxaQ0IzYUdWdUlIUm9aU0J3YjJsdWRHVnlJR2x6SUcxdmRtbHVaeUJtWVhOMElDaDJaV3h2WTJsMGVTa3NJSGRwZEdnZ1pXNXZkV2RvSUdScGMzUmhibU5sSUdsdUlIUm9aU0JoYkd4dmQyVmtJR1JwY21WamRHbHZiaTVjYmlBcUlFQmpiMjV6ZEhKMVkzUnZjbHh1SUNvZ1FHVjRkR1Z1WkhNZ1FYUjBjbEpsWTI5bmJtbDZaWEpjYmlBcUwxeHVablZ1WTNScGIyNGdVM2RwY0dWU1pXTnZaMjVwZW1WeUtDa2dlMXh1SUNBZ0lFRjBkSEpTWldOdloyNXBlbVZ5TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzU5WEc1Y2JtbHVhR1Z5YVhRb1UzZHBjR1ZTWldOdloyNXBlbVZ5TENCQmRIUnlVbVZqYjJkdWFYcGxjaXdnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCdVlXMWxjM0JoWTJWY2JpQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1UzZHBjR1ZTWldOdloyNXBlbVZ5WEc0Z0lDQWdJQ292WEc0Z0lDQWdaR1ZtWVhWc2RITTZJSHRjYmlBZ0lDQWdJQ0FnWlhabGJuUTZJQ2R6ZDJsd1pTY3NYRzRnSUNBZ0lDQWdJSFJvY21WemFHOXNaRG9nTVRBc1hHNGdJQ0FnSUNBZ0lIWmxiRzlqYVhSNU9pQXdMak1zWEc0Z0lDQWdJQ0FnSUdScGNtVmpkR2x2YmpvZ1JFbFNSVU5VU1U5T1gwaFBVa2xhVDA1VVFVd2dmQ0JFU1ZKRlExUkpUMDVmVmtWU1ZFbERRVXdzWEc0Z0lDQWdJQ0FnSUhCdmFXNTBaWEp6T2lBeFhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdkbGRGUnZkV05vUVdOMGFXOXVPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCaGJsSmxZMjluYm1sNlpYSXVjSEp2ZEc5MGVYQmxMbWRsZEZSdmRXTm9RV04wYVc5dUxtTmhiR3dvZEdocGN5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHRjBkSEpVWlhOME9pQm1kVzVqZEdsdmJpaHBibkIxZENrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWkdseVpXTjBhVzl1SUQwZ2RHaHBjeTV2Y0hScGIyNXpMbVJwY21WamRHbHZianRjYmlBZ0lDQWdJQ0FnZG1GeUlIWmxiRzlqYVhSNU8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoa2FYSmxZM1JwYjI0Z0ppQW9SRWxTUlVOVVNVOU9YMGhQVWtsYVQwNVVRVXdnZkNCRVNWSkZRMVJKVDA1ZlZrVlNWRWxEUVV3cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMlpXeHZZMmwwZVNBOUlHbHVjSFYwTG05MlpYSmhiR3hXWld4dlkybDBlVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoa2FYSmxZM1JwYjI0Z0ppQkVTVkpGUTFSSlQwNWZTRTlTU1ZwUFRsUkJUQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbVZzYjJOcGRIa2dQU0JwYm5CMWRDNXZkbVZ5WVd4c1ZtVnNiMk5wZEhsWU8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1JwY21WamRHbHZiaUFtSUVSSlVrVkRWRWxQVGw5V1JWSlVTVU5CVENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Wc2IyTnBkSGtnUFNCcGJuQjFkQzV2ZG1WeVlXeHNWbVZzYjJOcGRIbFpPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM04xY0dWeUxtRjBkSEpVWlhOMExtTmhiR3dvZEdocGN5d2dhVzV3ZFhRcElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYSmxZM1JwYjI0Z0ppQnBibkIxZEM1dlptWnpaWFJFYVhKbFkzUnBiMjRnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJR2x1Y0hWMExtUnBjM1JoYm1ObElENGdkR2hwY3k1dmNIUnBiMjV6TG5Sb2NtVnphRzlzWkNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1d2RYUXViV0Y0VUc5cGJuUmxjbk1nUFQwZ2RHaHBjeTV2Y0hScGIyNXpMbkJ2YVc1MFpYSnpJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhZbk1vZG1Wc2IyTnBkSGtwSUQ0Z2RHaHBjeTV2Y0hScGIyNXpMblpsYkc5amFYUjVJQ1ltSUdsdWNIVjBMbVYyWlc1MFZIbHdaU0FtSUVsT1VGVlVYMFZPUkR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWlcxcGREb2dablZ1WTNScGIyNG9hVzV3ZFhRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdScGNtVmpkR2x2YmlBOUlHUnBjbVZqZEdsdmJsTjBjaWhwYm5CMWRDNXZabVp6WlhSRWFYSmxZM1JwYjI0cE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWkdseVpXTjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMWhibUZuWlhJdVpXMXBkQ2gwYUdsekxtOXdkR2x2Ym5NdVpYWmxiblFnS3lCa2FYSmxZM1JwYjI0c0lHbHVjSFYwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXRnVZV2RsY2k1bGJXbDBLSFJvYVhNdWIzQjBhVzl1Y3k1bGRtVnVkQ3dnYVc1d2RYUXBPMXh1SUNBZ0lIMWNibjBwTzF4dVhHNHZLaXBjYmlBcUlFRWdkR0Z3SUdseklHVmpiMmR1YVhwbFpDQjNhR1Z1SUhSb1pTQndiMmx1ZEdWeUlHbHpJR1J2YVc1bklHRWdjMjFoYkd3Z2RHRndMMk5zYVdOckxpQk5kV3gwYVhCc1pTQjBZWEJ6SUdGeVpTQnlaV052WjI1cGVtVmtJR2xtSUhSb1pYa2diMk5qZFhKY2JpQXFJR0psZEhkbFpXNGdkR2hsSUdkcGRtVnVJR2x1ZEdWeWRtRnNJR0Z1WkNCd2IzTnBkR2x2Ymk0Z1ZHaGxJR1JsYkdGNUlHOXdkR2x2YmlCallXNGdZbVVnZFhObFpDQjBieUJ5WldOdloyNXBlbVVnYlhWc2RHa3RkR0Z3Y3lCM2FYUm9iM1YwSUdacGNtbHVaMXh1SUNvZ1lTQnphVzVuYkdVZ2RHRndMbHh1SUNwY2JpQXFJRlJvWlNCbGRtVnVkRVJoZEdFZ1puSnZiU0IwYUdVZ1pXMXBkSFJsWkNCbGRtVnVkQ0JqYjI1MFlXbHVjeUIwYUdVZ2NISnZjR1Z5ZEhrZ1lIUmhjRU52ZFc1MFlDd2dkMmhwWTJnZ1kyOXVkR0ZwYm5NZ2RHaGxJR0Z0YjNWdWRDQnZabHh1SUNvZ2JYVnNkR2t0ZEdGd2N5QmlaV2x1WnlCeVpXTnZaMjVwZW1Wa0xseHVJQ29nUUdOdmJuTjBjblZqZEc5eVhHNGdLaUJBWlhoMFpXNWtjeUJTWldOdloyNXBlbVZ5WEc0Z0tpOWNibVoxYm1OMGFXOXVJRlJoY0ZKbFkyOW5ibWw2WlhJb0tTQjdYRzRnSUNBZ1VtVmpiMmR1YVhwbGNpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dVhHNGdJQ0FnTHk4Z2NISmxkbWx2ZFhNZ2RHbHRaU0JoYm1RZ1kyVnVkR1Z5TEZ4dUlDQWdJQzh2SUhWelpXUWdabTl5SUhSaGNDQmpiM1Z1ZEdsdVoxeHVJQ0FnSUhSb2FYTXVjRlJwYldVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0IwYUdsekxuQkRaVzUwWlhJZ1BTQm1ZV3h6WlR0Y2JseHVJQ0FnSUhSb2FYTXVYM1JwYldWeUlEMGdiblZzYkR0Y2JpQWdJQ0IwYUdsekxsOXBibkIxZENBOUlHNTFiR3c3WEc0Z0lDQWdkR2hwY3k1amIzVnVkQ0E5SURBN1hHNTlYRzVjYm1sdWFHVnlhWFFvVkdGd1VtVmpiMmR1YVhwbGNpd2dVbVZqYjJkdWFYcGxjaXdnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCdVlXMWxjM0JoWTJWY2JpQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1VHbHVZMmhTWldOdloyNXBlbVZ5WEc0Z0lDQWdJQ292WEc0Z0lDQWdaR1ZtWVhWc2RITTZJSHRjYmlBZ0lDQWdJQ0FnWlhabGJuUTZJQ2QwWVhBbkxGeHVJQ0FnSUNBZ0lDQndiMmx1ZEdWeWN6b2dNU3hjYmlBZ0lDQWdJQ0FnZEdGd2N6b2dNU3hjYmlBZ0lDQWdJQ0FnYVc1MFpYSjJZV3c2SURNd01Dd2dMeThnYldGNElIUnBiV1VnWW1WMGQyVmxiaUIwYUdVZ2JYVnNkR2t0ZEdGd0lIUmhjSE5jYmlBZ0lDQWdJQ0FnZEdsdFpUb2dNalV3TENBdkx5QnRZWGdnZEdsdFpTQnZaaUIwYUdVZ2NHOXBiblJsY2lCMGJ5QmlaU0JrYjNkdUlDaHNhV3RsSUdacGJtZGxjaUJ2YmlCMGFHVWdjMk55WldWdUtWeHVJQ0FnSUNBZ0lDQjBhSEpsYzJodmJHUTZJRGtzSUM4dklHRWdiV2x1YVcxaGJDQnRiM1psYldWdWRDQnBjeUJ2YXl3Z1luVjBJR3RsWlhBZ2FYUWdiRzkzWEc0Z0lDQWdJQ0FnSUhCdmMxUm9jbVZ6YUc5c1pEb2dNVEFnTHk4Z1lTQnRkV3gwYVMxMFlYQWdZMkZ1SUdKbElHRWdZbWwwSUc5bVppQjBhR1VnYVc1cGRHbGhiQ0J3YjNOcGRHbHZibHh1SUNBZ0lIMHNYRzVjYmlBZ0lDQm5aWFJVYjNWamFFRmpkR2x2YmpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJWRTlWUTBoZlFVTlVTVTlPWDAxQlRrbFFWVXhCVkVsUFRsMDdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lIQnliMk5sYzNNNklHWjFibU4wYVc5dUtHbHVjSFYwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ2Y0hScGIyNXpJRDBnZEdocGN5NXZjSFJwYjI1ek8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCMllXeHBaRkJ2YVc1MFpYSnpJRDBnYVc1d2RYUXVjRzlwYm5SbGNuTXViR1Z1WjNSb0lEMDlQU0J2Y0hScGIyNXpMbkJ2YVc1MFpYSnpPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RtRnNhV1JOYjNabGJXVnVkQ0E5SUdsdWNIVjBMbVJwYzNSaGJtTmxJRHdnYjNCMGFXOXVjeTUwYUhKbGMyaHZiR1E3WEc0Z0lDQWdJQ0FnSUhaaGNpQjJZV3hwWkZSdmRXTm9WR2x0WlNBOUlHbHVjSFYwTG1SbGJIUmhWR2x0WlNBOElHOXdkR2x2Ym5NdWRHbHRaVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbkpsYzJWMEtDazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDaHBibkIxZEM1bGRtVnVkRlI1Y0dVZ0ppQkpUbEJWVkY5VFZFRlNWQ2tnSmlZZ0tIUm9hWE11WTI5MWJuUWdQVDA5SURBcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW1ZV2xzVkdsdFpXOTFkQ2dwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnZDJVZ2IyNXNlU0JoYkd4dmR5QnNhWFIwYkdVZ2JXOTJaVzFsYm5SY2JpQWdJQ0FnSUNBZ0x5OGdZVzVrSUhkbEozWmxJSEpsWVdOb1pXUWdZVzRnWlc1a0lHVjJaVzUwTENCemJ5QmhJSFJoY0NCcGN5QndiM056YVdKc1pWeHVJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2FXUk5iM1psYldWdWRDQW1KaUIyWVd4cFpGUnZkV05vVkdsdFpTQW1KaUIyWVd4cFpGQnZhVzUwWlhKektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hVzV3ZFhRdVpYWmxiblJVZVhCbElDRTlJRWxPVUZWVVgwVk9SQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtWmhhV3hVYVcxbGIzVjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIyWVd4cFpFbHVkR1Z5ZG1Gc0lEMGdkR2hwY3k1d1ZHbHRaU0EvSUNocGJuQjFkQzUwYVcxbFUzUmhiWEFnTFNCMGFHbHpMbkJVYVcxbElEd2diM0IwYVc5dWN5NXBiblJsY25aaGJDa2dPaUIwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIWmhiR2xrVFhWc2RHbFVZWEFnUFNBaGRHaHBjeTV3UTJWdWRHVnlJSHg4SUdkbGRFUnBjM1JoYm1ObEtIUm9hWE11Y0VObGJuUmxjaXdnYVc1d2RYUXVZMlZ1ZEdWeUtTQThJRzl3ZEdsdmJuTXVjRzl6VkdoeVpYTm9iMnhrTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQlVhVzFsSUQwZ2FXNXdkWFF1ZEdsdFpWTjBZVzF3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1EyVnVkR1Z5SUQwZ2FXNXdkWFF1WTJWdWRHVnlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhaaGJHbGtUWFZzZEdsVVlYQWdmSHdnSVhaaGJHbGtTVzUwWlhKMllXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZkVzUwSUQwZ01UdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiM1Z1ZENBclBTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlwYm5CMWRDQTlJR2x1Y0hWME8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBaaUIwWVhBZ1kyOTFiblFnYldGMFkyaGxjeUIzWlNCb1lYWmxJSEpsWTI5bmJtbDZaV1FnYVhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCbGJITmxJR2wwSUdoaGN5QmlaV2RoYmlCeVpXTnZaMjVwZW1sdVp5NHVMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFJoY0VOdmRXNTBJRDBnZEdocGN5NWpiM1Z1ZENBbElHOXdkR2x2Ym5NdWRHRndjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwWVhCRGIzVnVkQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUc1dklHWmhhV3hwYm1jZ2NtVnhkV2x5WlcxbGJuUnpMQ0JwYlcxbFpHbGhkR1ZzZVNCMGNtbG5aMlZ5SUhSb1pTQjBZWEFnWlhabGJuUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ2Y2lCM1lXbDBJR0Z6SUd4dmJtY2dZWE1nZEdobElHMTFiSFJwZEdGd0lHbHVkR1Z5ZG1Gc0lIUnZJSFJ5YVdkblpYSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVhR0Z6VW1WeGRXbHlaVVpoYVd4MWNtVnpLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGTlVRVlJGWDFKRlEwOUhUa2xhUlVRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRHbHRaWElnUFNCelpYUlVhVzFsYjNWMFEyOXVkR1Y0ZENobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSaGRHVWdQU0JUVkVGVVJWOVNSVU5QUjA1SldrVkVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGNubEZiV2wwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzSUc5d2RHbHZibk11YVc1MFpYSjJZV3dzSUhSb2FYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVTFSQlZFVmZRa1ZIUVU0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCVFZFRlVSVjlHUVVsTVJVUTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHWmhhV3hVYVcxbGIzVjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZEdsdFpYSWdQU0J6WlhSVWFXMWxiM1YwUTI5dWRHVjRkQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMzUmhkR1VnUFNCVFZFRlVSVjlHUVVsTVJVUTdYRzRnSUNBZ0lDQWdJSDBzSUhSb2FYTXViM0IwYVc5dWN5NXBiblJsY25aaGJDd2dkR2hwY3lrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCVFZFRlVSVjlHUVVsTVJVUTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lISmxjMlYwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdZMnhsWVhKVWFXMWxiM1YwS0hSb2FYTXVYM1JwYldWeUtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1pXMXBkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuTjBZWFJsSUQwOUlGTlVRVlJGWDFKRlEwOUhUa2xhUlVRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmx1Y0hWMExuUmhjRU52ZFc1MElEMGdkR2hwY3k1amIzVnVkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YldGdVlXZGxjaTVsYldsMEtIUm9hWE11YjNCMGFXOXVjeTVsZG1WdWRDd2dkR2hwY3k1ZmFXNXdkWFFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dWZTazdYRzVjYmk4cUtseHVJQ29nVTJsdGNHeGxJSGRoZVNCMGJ5QmpjbVZoZEdVZ1lTQnRZVzVoWjJWeUlIZHBkR2dnWVNCa1pXWmhkV3gwSUhObGRDQnZaaUJ5WldOdloyNXBlbVZ5Y3k1Y2JpQXFJRUJ3WVhKaGJTQjdTRlJOVEVWc1pXMWxiblI5SUdWc1pXMWxiblJjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCYmIzQjBhVzl1YzExY2JpQXFJRUJqYjI1emRISjFZM1J2Y2x4dUlDb3ZYRzVtZFc1amRHbHZiaUJJWVcxdFpYSW9aV3hsYldWdWRDd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lHOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1eklIeDhJSHQ5TzF4dUlDQWdJRzl3ZEdsdmJuTXVjbVZqYjJkdWFYcGxjbk1nUFNCcFpsVnVaR1ZtYVc1bFpDaHZjSFJwYjI1ekxuSmxZMjluYm1sNlpYSnpMQ0JJWVcxdFpYSXVaR1ZtWVhWc2RITXVjSEpsYzJWMEtUdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lFMWhibUZuWlhJb1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3lrN1hHNTlYRzVjYmk4cUtseHVJQ29nUUdOdmJuTjBJSHR6ZEhKcGJtZDlYRzRnS2k5Y2JraGhiVzFsY2k1V1JWSlRTVTlPSUQwZ0p6SXVNQzQzSnp0Y2JseHVMeW9xWEc0Z0tpQmtaV1poZFd4MElITmxkSFJwYm1kelhHNGdLaUJBYm1GdFpYTndZV05sWEc0Z0tpOWNia2hoYlcxbGNpNWtaV1poZFd4MGN5QTlJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJ6WlhRZ2FXWWdSRTlOSUdWMlpXNTBjeUJoY21VZ1ltVnBibWNnZEhKcFoyZGxjbVZrTGx4dUlDQWdJQ0FxSUVKMWRDQjBhR2x6SUdseklITnNiM2RsY2lCaGJtUWdkVzUxYzJWa0lHSjVJSE5wYlhCc1pTQnBiWEJzWlcxbGJuUmhkR2x2Ym5Nc0lITnZJR1JwYzJGaWJHVmtJR0o1SUdSbFptRjFiSFF1WEc0Z0lDQWdJQ29nUUhSNWNHVWdlMEp2YjJ4bFlXNTlYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdabUZzYzJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JrYjIxRmRtVnVkSE02SUdaaGJITmxMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVkdobElIWmhiSFZsSUdadmNpQjBhR1VnZEc5MVkyaEJZM1JwYjI0Z2NISnZjR1Z5ZEhrdlptRnNiR0poWTJzdVhHNGdJQ0FnSUNvZ1YyaGxiaUJ6WlhRZ2RHOGdZR052YlhCMWRHVmdJR2wwSUhkcGJHd2diV0ZuYVdOaGJHeDVJSE5sZENCMGFHVWdZMjl5Y21WamRDQjJZV3gxWlNCaVlYTmxaQ0J2YmlCMGFHVWdZV1JrWldRZ2NtVmpiMmR1YVhwbGNuTXVYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UxTjBjbWx1WjMxY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCamIyMXdkWFJsWEc0Z0lDQWdJQ292WEc0Z0lDQWdkRzkxWTJoQlkzUnBiMjQ2SUZSUFZVTklYMEZEVkVsUFRsOURUMDFRVlZSRkxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwSnZiMnhsWVc1OVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ2RISjFaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHVnVZV0pzWlRvZ2RISjFaU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVWWVVFVlNTVTFGVGxSQlRDQkdSVUZVVlZKRklDMHRJR05oYmlCaVpTQnlaVzF2ZG1Wa0wyTm9ZVzVuWldSY2JpQWdJQ0FnS2lCRGFHRnVaMlVnZEdobElIQmhjbVZ1ZENCcGJuQjFkQ0IwWVhKblpYUWdaV3hsYldWdWRDNWNiaUFnSUNBZ0tpQkpaaUJPZFd4c0xDQjBhR1Z1SUdsMElHbHpJR0psYVc1bklITmxkQ0IwYUdVZ2RHOGdiV0ZwYmlCbGJHVnRaVzUwTGx4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFd4c2ZFVjJaVzUwVkdGeVoyVjBmVnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJRzUxYkd4Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JwYm5CMWRGUmhjbWRsZERvZ2JuVnNiQ3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUdadmNtTmxJR0Z1SUdsdWNIVjBJR05zWVhOelhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJHeDhSblZ1WTNScGIyNTlYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdiblZzYkZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2x1Y0hWMFEyeGhjM002SUc1MWJHd3NYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJFWldaaGRXeDBJSEpsWTI5bmJtbDZaWElnYzJWMGRYQWdkMmhsYmlCallXeHNhVzVuSUdCSVlXMXRaWElvS1dCY2JpQWdJQ0FnS2lCWGFHVnVJR055WldGMGFXNW5JR0VnYm1WM0lFMWhibUZuWlhJZ2RHaGxjMlVnZDJsc2JDQmlaU0J6YTJsd2NHVmtMbHh1SUNBZ0lDQXFJRUIwZVhCbElIdEJjbkpoZVgxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3Y21WelpYUTZJRnRjYmlBZ0lDQWdJQ0FnTHk4Z1VtVmpiMmR1YVhwbGNrTnNZWE56TENCdmNIUnBiMjV6TENCYmNtVmpiMmR1YVhwbFYybDBhQ3dnTGk0dVhTd2dXM0psY1hWcGNtVkdZV2xzZFhKbExDQXVMaTVkWEc0Z0lDQWdJQ0FnSUZ0U2IzUmhkR1ZTWldOdloyNXBlbVZ5TENCN1pXNWhZbXhsT2lCbVlXeHpaWDFkTEZ4dUlDQWdJQ0FnSUNCYlVHbHVZMmhTWldOdloyNXBlbVZ5TENCN1pXNWhZbXhsT2lCbVlXeHpaWDBzSUZzbmNtOTBZWFJsSjExZExGeHVJQ0FnSUNBZ0lDQmJVM2RwY0dWU1pXTnZaMjVwZW1WeUxDQjdaR2x5WldOMGFXOXVPaUJFU1ZKRlExUkpUMDVmU0U5U1NWcFBUbFJCVEgxZExGeHVJQ0FnSUNBZ0lDQmJVR0Z1VW1WamIyZHVhWHBsY2l3Z2UyUnBjbVZqZEdsdmJqb2dSRWxTUlVOVVNVOU9YMGhQVWtsYVQwNVVRVXg5TENCYkozTjNhWEJsSjExZExGeHVJQ0FnSUNBZ0lDQmJWR0Z3VW1WamIyZHVhWHBsY2wwc1hHNGdJQ0FnSUNBZ0lGdFVZWEJTWldOdloyNXBlbVZ5TENCN1pYWmxiblE2SUNka2IzVmliR1YwWVhBbkxDQjBZWEJ6T2lBeWZTd2dXeWQwWVhBblhWMHNYRzRnSUNBZ0lDQWdJRnRRY21WemMxSmxZMjluYm1sNlpYSmRYRzRnSUNBZ1hTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk52YldVZ1ExTlRJSEJ5YjNCbGNuUnBaWE1nWTJGdUlHSmxJSFZ6WldRZ2RHOGdhVzF3Y205MlpTQjBhR1VnZDI5eWEybHVaeUJ2WmlCSVlXMXRaWEl1WEc0Z0lDQWdJQ29nUVdSa0lIUm9aVzBnZEc4Z2RHaHBjeUJ0WlhSb2IyUWdZVzVrSUhSb1pYa2dkMmxzYkNCaVpTQnpaWFFnZDJobGJpQmpjbVZoZEdsdVp5QmhJRzVsZHlCTllXNWhaMlZ5TGx4dUlDQWdJQ0FxSUVCdVlXMWxjM0JoWTJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqYzNOUWNtOXdjem9nZTF4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nUkdsellXSnNaWE1nZEdWNGRDQnpaV3hsWTNScGIyNGdkRzhnYVcxd2NtOTJaU0IwYUdVZ1pISmhaMmRwYm1jZ1oyVnpkSFZ5WlM0Z1RXRnBibXg1SUdadmNpQmtaWE5yZEc5d0lHSnliM2R6WlhKekxseHVJQ0FnSUNBZ0lDQWdLaUJBZEhsd1pTQjdVM1J5YVc1bmZWeHVJQ0FnSUNBZ0lDQWdLaUJBWkdWbVlYVnNkQ0FuYm05dVpTZGNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUhWelpYSlRaV3hsWTNRNklDZHViMjVsSnl4Y2JseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ1JHbHpZV0pzWlNCMGFHVWdWMmx1Wkc5M2N5QlFhRzl1WlNCbmNtbHdjR1Z5Y3lCM2FHVnVJSEJ5WlhOemFXNW5JR0Z1SUdWc1pXMWxiblF1WEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0VGRISnBibWQ5WEc0Z0lDQWdJQ0FnSUNBcUlFQmtaV1poZFd4MElDZHViMjVsSjF4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdkRzkxWTJoVFpXeGxZM1E2SUNkdWIyNWxKeXhjYmx4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nUkdsellXSnNaWE1nZEdobElHUmxabUYxYkhRZ1kyRnNiRzkxZENCemFHOTNiaUIzYUdWdUlIbHZkU0IwYjNWamFDQmhibVFnYUc5c1pDQmhJSFJ2ZFdOb0lIUmhjbWRsZEM1Y2JpQWdJQ0FnSUNBZ0lDb2dUMjRnYVU5VExDQjNhR1Z1SUhsdmRTQjBiM1ZqYUNCaGJtUWdhRzlzWkNCaElIUnZkV05vSUhSaGNtZGxkQ0J6ZFdOb0lHRnpJR0VnYkdsdWF5d2dVMkZtWVhKcElHUnBjM0JzWVhselhHNGdJQ0FnSUNBZ0lDQXFJR0VnWTJGc2JHOTFkQ0JqYjI1MFlXbHVhVzVuSUdsdVptOXliV0YwYVc5dUlHRmliM1YwSUhSb1pTQnNhVzVyTGlCVWFHbHpJSEJ5YjNCbGNuUjVJR0ZzYkc5M2N5QjViM1VnZEc4Z1pHbHpZV0pzWlNCMGFHRjBJR05oYkd4dmRYUXVYRzRnSUNBZ0lDQWdJQ0FxSUVCMGVYQmxJSHRUZEhKcGJtZDlYRzRnSUNBZ0lDQWdJQ0FxSUVCa1pXWmhkV3gwSUNkdWIyNWxKMXh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2RHOTFZMmhEWVd4c2IzVjBPaUFuYm05dVpTY3NYRzVjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJRk53WldOcFptbGxjeUIzYUdWMGFHVnlJSHB2YjIxcGJtY2dhWE1nWlc1aFlteGxaQzRnVlhObFpDQmllU0JKUlRFd1BseHVJQ0FnSUNBZ0lDQWdLaUJBZEhsd1pTQjdVM1J5YVc1bmZWeHVJQ0FnSUNBZ0lDQWdLaUJBWkdWbVlYVnNkQ0FuYm05dVpTZGNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUdOdmJuUmxiblJhYjI5dGFXNW5PaUFuYm05dVpTY3NYRzVjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJRk53WldOcFptbGxjeUIwYUdGMElHRnVJR1Z1ZEdseVpTQmxiR1Z0Wlc1MElITm9iM1ZzWkNCaVpTQmtjbUZuWjJGaWJHVWdhVzV6ZEdWaFpDQnZaaUJwZEhNZ1kyOXVkR1Z1ZEhNdUlFMWhhVzVzZVNCbWIzSWdaR1Z6YTNSdmNDQmljbTkzYzJWeWN5NWNiaUFnSUNBZ0lDQWdJQ29nUUhSNWNHVWdlMU4wY21sdVozMWNiaUFnSUNBZ0lDQWdJQ29nUUdSbFptRjFiSFFnSjI1dmJtVW5YRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCMWMyVnlSSEpoWnpvZ0oyNXZibVVuTEZ4dVhHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCUGRtVnljbWxrWlhNZ2RHaGxJR2hwWjJoc2FXZG9kQ0JqYjJ4dmNpQnphRzkzYmlCM2FHVnVJSFJvWlNCMWMyVnlJSFJoY0hNZ1lTQnNhVzVySUc5eUlHRWdTbUYyWVZOamNtbHdkRnh1SUNBZ0lDQWdJQ0FnS2lCamJHbGphMkZpYkdVZ1pXeGxiV1Z1ZENCcGJpQnBUMU11SUZSb2FYTWdjSEp2Y0dWeWRIa2diMkpsZVhNZ2RHaGxJR0ZzY0doaElIWmhiSFZsTENCcFppQnpjR1ZqYVdacFpXUXVYRzRnSUNBZ0lDQWdJQ0FxSUVCMGVYQmxJSHRUZEhKcGJtZDlYRzRnSUNBZ0lDQWdJQ0FxSUVCa1pXWmhkV3gwSUNkeVoySmhLREFzTUN3d0xEQXBKMXh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2RHRndTR2xuYUd4cFoyaDBRMjlzYjNJNklDZHlaMkpoS0RBc01Dd3dMREFwSjF4dUlDQWdJSDFjYm4wN1hHNWNiblpoY2lCVFZFOVFJRDBnTVR0Y2JuWmhjaUJHVDFKRFJVUmZVMVJQVUNBOUlESTdYRzVjYmk4cUtseHVJQ29nVFdGdVlXZGxjbHh1SUNvZ1FIQmhjbUZ0SUh0SVZFMU1SV3hsYldWdWRIMGdaV3hsYldWdWRGeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRnR2Y0hScGIyNXpYVnh1SUNvZ1FHTnZibk4wY25WamRHOXlYRzRnS2k5Y2JtWjFibU4wYVc5dUlFMWhibUZuWlhJb1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUhSb2FYTXViM0IwYVc5dWN5QTlJR0Z6YzJsbmJpaDdmU3dnU0dGdGJXVnlMbVJsWm1GMWJIUnpMQ0J2Y0hScGIyNXpJSHg4SUh0OUtUdGNibHh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeTVwYm5CMWRGUmhjbWRsZENBOUlIUm9hWE11YjNCMGFXOXVjeTVwYm5CMWRGUmhjbWRsZENCOGZDQmxiR1Z0Wlc1ME8xeHVYRzRnSUNBZ2RHaHBjeTVvWVc1a2JHVnljeUE5SUh0OU8xeHVJQ0FnSUhSb2FYTXVjMlZ6YzJsdmJpQTlJSHQ5TzF4dUlDQWdJSFJvYVhNdWNtVmpiMmR1YVhwbGNuTWdQU0JiWFR0Y2JpQWdJQ0IwYUdsekxtOXNaRU56YzFCeWIzQnpJRDBnZTMwN1hHNWNiaUFnSUNCMGFHbHpMbVZzWlcxbGJuUWdQU0JsYkdWdFpXNTBPMXh1SUNBZ0lIUm9hWE11YVc1d2RYUWdQU0JqY21WaGRHVkpibkIxZEVsdWMzUmhibU5sS0hSb2FYTXBPMXh1SUNBZ0lIUm9hWE11ZEc5MVkyaEJZM1JwYjI0Z1BTQnVaWGNnVkc5MVkyaEJZM1JwYjI0b2RHaHBjeXdnZEdocGN5NXZjSFJwYjI1ekxuUnZkV05vUVdOMGFXOXVLVHRjYmx4dUlDQWdJSFJ2WjJkc1pVTnpjMUJ5YjNCektIUm9hWE1zSUhSeWRXVXBPMXh1WEc0Z0lDQWdaV0ZqYUNoMGFHbHpMbTl3ZEdsdmJuTXVjbVZqYjJkdWFYcGxjbk1zSUdaMWJtTjBhVzl1S0dsMFpXMHBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlISmxZMjluYm1sNlpYSWdQU0IwYUdsekxtRmtaQ2h1WlhjZ0tHbDBaVzFiTUYwcEtHbDBaVzFiTVYwcEtUdGNiaUFnSUNBZ0lDQWdhWFJsYlZzeVhTQW1KaUJ5WldOdloyNXBlbVZ5TG5KbFkyOW5ibWw2WlZkcGRHZ29hWFJsYlZzeVhTazdYRzRnSUNBZ0lDQWdJR2wwWlcxYk0xMGdKaVlnY21WamIyZHVhWHBsY2k1eVpYRjFhWEpsUm1GcGJIVnlaU2hwZEdWdFd6TmRLVHRjYmlBZ0lDQjlMQ0IwYUdsektUdGNibjFjYmx4dVRXRnVZV2RsY2k1d2NtOTBiM1I1Y0dVZ1BTQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2djMlYwSUc5d2RHbHZibk5jYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWMxeHVJQ0FnSUNBcUlFQnlaWFIxY201eklIdE5ZVzVoWjJWeWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGREb2dablZ1WTNScGIyNG9iM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0JoYzNOcFoyNG9kR2hwY3k1dmNIUnBiMjV6TENCdmNIUnBiMjV6S1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJQY0hScGIyNXpJSFJvWVhRZ2JtVmxaQ0JoSUd4cGRIUnNaU0J0YjNKbElITmxkSFZ3WEc0Z0lDQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxuUnZkV05vUVdOMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SdmRXTm9RV04wYVc5dUxuVndaR0YwWlNncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG1sdWNIVjBWR0Z5WjJWMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkRiR1ZoYmlCMWNDQmxlR2x6ZEdsdVp5QmxkbVZ1ZENCc2FYTjBaVzVsY25NZ1lXNWtJSEpsYVc1cGRHbGhiR2w2WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGJuQjFkQzVrWlhOMGNtOTVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sdWNIVjBMblJoY21kbGRDQTlJRzl3ZEdsdmJuTXVhVzV3ZFhSVVlYSm5aWFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sdWNIVjBMbWx1YVhRb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ2MzUnZjQ0J5WldOdloyNXBlbWx1WnlCbWIzSWdkR2hwY3lCelpYTnphVzl1TGx4dUlDQWdJQ0FxSUZSb2FYTWdjMlZ6YzJsdmJpQjNhV3hzSUdKbElHUnBjMk5oY21SbFpDd2dkMmhsYmlCaElHNWxkeUJiYVc1d2RYUmRjM1JoY25RZ1pYWmxiblFnYVhNZ1ptbHlaV1F1WEc0Z0lDQWdJQ29nVjJobGJpQm1iM0pqWldRc0lIUm9aU0J5WldOdloyNXBlbVZ5SUdONVkyeGxJR2x6SUhOMGIzQndaV1FnYVcxdFpXUnBZWFJsYkhrdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0Q2IyOXNaV0Z1ZlNCYlptOXlZMlZkWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM1J2Y0RvZ1puVnVZM1JwYjI0b1ptOXlZMlVwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhOemFXOXVMbk4wYjNCd1pXUWdQU0JtYjNKalpTQS9JRVpQVWtORlJGOVRWRTlRSURvZ1UxUlBVRHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nY25WdUlIUm9aU0J5WldOdloyNXBlbVZ5Y3lGY2JpQWdJQ0FnS2lCallXeHNaV1FnWW5rZ2RHaGxJR2x1Y0hWMFNHRnVaR3hsY2lCbWRXNWpkR2x2YmlCdmJpQmxkbVZ5ZVNCdGIzWmxiV1Z1ZENCdlppQjBhR1VnY0c5cGJuUmxjbk1nS0hSdmRXTm9aWE1wWEc0Z0lDQWdJQ29nYVhRZ2QyRnNhM01nZEdoeWIzVm5hQ0JoYkd3Z2RHaGxJSEpsWTI5bmJtbDZaWEp6SUdGdVpDQjBjbWxsY3lCMGJ5QmtaWFJsWTNRZ2RHaGxJR2RsYzNSMWNtVWdkR2hoZENCcGN5QmlaV2x1WnlCdFlXUmxYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHbHVjSFYwUkdGMFlWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbFkyOW5ibWw2WlRvZ1puVnVZM1JwYjI0b2FXNXdkWFJFWVhSaEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCelpYTnphVzl1SUQwZ2RHaHBjeTV6WlhOemFXOXVPMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyVnpjMmx2Ymk1emRHOXdjR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QnlkVzRnZEdobElIUnZkV05vTFdGamRHbHZiaUJ3YjJ4NVptbHNiRnh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZkV05vUVdOMGFXOXVMbkJ5WlhabGJuUkVaV1poZFd4MGN5aHBibkIxZEVSaGRHRXBPMXh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaV052WjI1cGVtVnlPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVmpiMmR1YVhwbGNuTWdQU0IwYUdsekxuSmxZMjluYm1sNlpYSnpPMXh1WEc0Z0lDQWdJQ0FnSUM4dklIUm9hWE1nYUc5c1pITWdkR2hsSUhKbFkyOW5ibWw2WlhJZ2RHaGhkQ0JwY3lCaVpXbHVaeUJ5WldOdloyNXBlbVZrTGx4dUlDQWdJQ0FnSUNBdkx5QnpieUIwYUdVZ2NtVmpiMmR1YVhwbGNpZHpJSE4wWVhSbElHNWxaV1J6SUhSdklHSmxJRUpGUjBGT0xDQkRTRUZPUjBWRUxDQkZUa1JGUkNCdmNpQlNSVU5QUjA1SldrVkVYRzRnSUNBZ0lDQWdJQzh2SUdsbUlHNXZJSEpsWTI5bmJtbDZaWElnYVhNZ1pHVjBaV04wYVc1bklHRWdkR2hwYm1jc0lHbDBJR2x6SUhObGRDQjBieUJnYm5Wc2JHQmNiaUFnSUNBZ0lDQWdkbUZ5SUdOMWNsSmxZMjluYm1sNlpYSWdQU0J6WlhOemFXOXVMbU4xY2xKbFkyOW5ibWw2WlhJN1hHNWNiaUFnSUNBZ0lDQWdMeThnY21WelpYUWdkMmhsYmlCMGFHVWdiR0Z6ZENCeVpXTnZaMjVwZW1WeUlHbHpJSEpsWTI5bmJtbDZaV1JjYmlBZ0lDQWdJQ0FnTHk4Z2IzSWdkMmhsYmlCM1pTZHlaU0JwYmlCaElHNWxkeUJ6WlhOemFXOXVYRzRnSUNBZ0lDQWdJR2xtSUNnaFkzVnlVbVZqYjJkdWFYcGxjaUI4ZkNBb1kzVnlVbVZqYjJkdWFYcGxjaUFtSmlCamRYSlNaV052WjI1cGVtVnlMbk4wWVhSbElDWWdVMVJCVkVWZlVrVkRUMGRPU1ZwRlJDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjFjbEpsWTI5bmJtbDZaWElnUFNCelpYTnphVzl1TG1OMWNsSmxZMjluYm1sNlpYSWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlHa2dQU0F3TzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvYVNBOElISmxZMjluYm1sNlpYSnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVmpiMmR1YVhwbGNpQTlJSEpsWTI5bmJtbDZaWEp6VzJsZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5Qm1hVzVrSUc5MWRDQnBaaUIzWlNCaGNtVWdZV3hzYjNkbFpDQjBjbmtnZEc4Z2NtVmpiMmR1YVhwbElIUm9aU0JwYm5CMWRDQm1iM0lnZEdocGN5QnZibVV1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUF4TGlBZ0lHRnNiRzkzSUdsbUlIUm9aU0J6WlhOemFXOXVJR2x6SUU1UFZDQm1iM0pqWldRZ2MzUnZjSEJsWkNBb2MyVmxJSFJvWlNBdWMzUnZjQ2dwSUcxbGRHaHZaQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJREl1SUNBZ1lXeHNiM2NnYVdZZ2QyVWdjM1JwYkd3Z2FHRjJaVzRuZENCeVpXTnZaMjVwZW1Wa0lHRWdaMlZ6ZEhWeVpTQnBiaUIwYUdseklITmxjM05wYjI0c0lHOXlJSFJvWlNCMGFHbHpJSEpsWTI5bmJtbDZaWElnYVhNZ2RHaGxJRzl1WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lDQjBhR0YwSUdseklHSmxhVzVuSUhKbFkyOW5ibWw2WldRdVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBekxpQWdJR0ZzYkc5M0lHbG1JSFJvWlNCeVpXTnZaMjVwZW1WeUlHbHpJR0ZzYkc5M1pXUWdkRzhnY25WdUlITnBiWFZzZEdGdVpXOTFjeUIzYVhSb0lIUm9aU0JqZFhKeVpXNTBJSEpsWTI5bmJtbDZaV1FnY21WamIyZHVhWHBsY2k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQWdkR2hwY3lCallXNGdZbVVnYzJWMGRYQWdkMmwwYUNCMGFHVWdZSEpsWTI5bmJtbDZaVmRwZEdnb0tXQWdiV1YwYUc5a0lHOXVJSFJvWlNCeVpXTnZaMjVwZW1WeUxseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmxjM05wYjI0dWMzUnZjSEJsWkNBaFBUMGdSazlTUTBWRVgxTlVUMUFnSmlZZ0tDQXZMeUF4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDRmpkWEpTWldOdloyNXBlbVZ5SUh4OElISmxZMjluYm1sNlpYSWdQVDBnWTNWeVVtVmpiMmR1YVhwbGNpQjhmQ0F2THlBeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWTI5bmJtbDZaWEl1WTJGdVVtVmpiMmR1YVhwbFYybDBhQ2hqZFhKU1pXTnZaMjVwZW1WeUtTa3BJSHNnTHk4Z00xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxZMjluYm1sNlpYSXVjbVZqYjJkdWFYcGxLR2x1Y0hWMFJHRjBZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxZMjluYm1sNlpYSXVjbVZ6WlhRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXWWdkR2hsSUhKbFkyOW5ibWw2WlhJZ2FHRnpJR0psWlc0Z2NtVmpiMmR1YVhwcGJtY2dkR2hsSUdsdWNIVjBJR0Z6SUdFZ2RtRnNhV1FnWjJWemRIVnlaU3dnZDJVZ2QyRnVkQ0IwYnlCemRHOXlaU0IwYUdseklHOXVaU0JoY3lCMGFHVmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHTjFjbkpsYm5RZ1lXTjBhWFpsSUhKbFkyOW5ibWw2WlhJdUlHSjFkQ0J2Ym14NUlHbG1JSGRsSUdSdmJpZDBJR0ZzY21WaFpIa2dhR0YyWlNCaGJpQmhZM1JwZG1VZ2NtVmpiMmR1YVhwbGNseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmpkWEpTWldOdloyNXBlbVZ5SUNZbUlISmxZMjluYm1sNlpYSXVjM1JoZEdVZ0ppQW9VMVJCVkVWZlFrVkhRVTRnZkNCVFZFRlVSVjlEU0VGT1IwVkVJSHdnVTFSQlZFVmZSVTVFUlVRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z5VW1WamIyZHVhWHBsY2lBOUlITmxjM05wYjI0dVkzVnlVbVZqYjJkdWFYcGxjaUE5SUhKbFkyOW5ibWw2WlhJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBLeXM3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1oyVjBJR0VnY21WamIyZHVhWHBsY2lCaWVTQnBkSE1nWlhabGJuUWdibUZ0WlM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFKbFkyOW5ibWw2WlhKOFUzUnlhVzVuZlNCeVpXTnZaMjVwZW1WeVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ2UxSmxZMjluYm1sNlpYSjhUblZzYkgxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtISmxZMjluYm1sNlpYSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxZMjluYm1sNlpYSWdhVzV6ZEdGdVkyVnZaaUJTWldOdloyNXBlbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZqYjJkdWFYcGxjanRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5WldOdloyNXBlbVZ5Y3lBOUlIUm9hWE11Y21WamIyZHVhWHBsY25NN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djbVZqYjJkdWFYcGxjbk11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaV052WjI1cGVtVnljMXRwWFM1dmNIUnBiMjV6TG1WMlpXNTBJRDA5SUhKbFkyOW5ibWw2WlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVmpiMmR1YVhwbGNuTmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlHRmtaQ0JoSUhKbFkyOW5ibWw2WlhJZ2RHOGdkR2hsSUcxaGJtRm5aWEpjYmlBZ0lDQWdLaUJsZUdsemRHbHVaeUJ5WldOdloyNXBlbVZ5Y3lCM2FYUm9JSFJvWlNCellXMWxJR1YyWlc1MElHNWhiV1VnZDJsc2JDQmlaU0J5WlcxdmRtVmtYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFNaV052WjI1cGVtVnlmU0J5WldOdloyNXBlbVZ5WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nZTFKbFkyOW5ibWw2WlhKOFRXRnVZV2RsY24xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JoWkdRNklHWjFibU4wYVc5dUtISmxZMjluYm1sNlpYSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHVkbTlyWlVGeWNtRjVRWEpuS0hKbFkyOW5ibWw2WlhJc0lDZGhaR1FuTENCMGFHbHpLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJ5WlcxdmRtVWdaWGhwYzNScGJtZGNiaUFnSUNBZ0lDQWdkbUZ5SUdWNGFYTjBhVzVuSUQwZ2RHaHBjeTVuWlhRb2NtVmpiMmR1YVhwbGNpNXZjSFJwYjI1ekxtVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1Y0YVhOMGFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbGJXOTJaU2hsZUdsemRHbHVaeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbFkyOW5ibWw2WlhKekxuQjFjMmdvY21WamIyZHVhWHBsY2lrN1hHNGdJQ0FnSUNBZ0lISmxZMjluYm1sNlpYSXViV0Z1WVdkbGNpQTlJSFJvYVhNN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIzVmphRUZqZEdsdmJpNTFjR1JoZEdVb0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxZMjluYm1sNlpYSTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJSEpsYlc5MlpTQmhJSEpsWTI5bmJtbDZaWElnWW5rZ2JtRnRaU0J2Y2lCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VW1WamIyZHVhWHBsY254VGRISnBibWQ5SUhKbFkyOW5ibWw2WlhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN1RXRnVZV2RsY24xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5WlcxdmRtVTZJR1oxYm1OMGFXOXVLSEpsWTI5bmJtbDZaWElwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x1ZG05clpVRnljbUY1UVhKbktISmxZMjluYm1sNlpYSXNJQ2R5WlcxdmRtVW5MQ0IwYUdsektTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpXTnZaMjVwZW1WeUlEMGdkR2hwY3k1blpYUW9jbVZqYjJkdWFYcGxjaWs3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdiR1YwSjNNZ2JXRnJaU0J6ZFhKbElIUm9hWE1nY21WamIyZHVhWHBsY2lCbGVHbHpkSE5jYmlBZ0lDQWdJQ0FnYVdZZ0tISmxZMjluYm1sNlpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5WldOdloyNXBlbVZ5Y3lBOUlIUm9hWE11Y21WamIyZHVhWHBsY25NN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FXNWtaWGdnUFNCcGJrRnljbUY1S0hKbFkyOW5ibWw2WlhKekxDQnlaV052WjI1cGVtVnlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dsdVpHVjRJQ0U5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWTI5bmJtbDZaWEp6TG5Od2JHbGpaU2hwYm1SbGVDd2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBiM1ZqYUVGamRHbHZiaTUxY0dSaGRHVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQmlhVzVrSUdWMlpXNTBYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHVjJaVzUwYzF4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdoaGJtUnNaWEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUI3UlhabGJuUkZiV2wwZEdWeWZTQjBhR2x6WEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjQ2SUdaMWJtTjBhVzl1S0dWMlpXNTBjeXdnYUdGdVpHeGxjaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9aWFpsYm5SeklEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2FHRnVaR3hsY2lBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IyWVhJZ2FHRnVaR3hsY25NZ1BTQjBhR2x6TG1oaGJtUnNaWEp6TzF4dUlDQWdJQ0FnSUNCbFlXTm9LSE53YkdsMFUzUnlLR1YyWlc1MGN5a3NJR1oxYm1OMGFXOXVLR1YyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1Z5YzF0bGRtVnVkRjBnUFNCb1lXNWtiR1Z5YzF0bGRtVnVkRjBnZkh3Z1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1Z5YzF0bGRtVnVkRjB1Y0hWemFDaG9ZVzVrYkdWeUtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQjFibUpwYm1RZ1pYWmxiblFzSUd4bFlYWmxJR1Z0YVhRZ1lteGhibXNnZEc4Z2NtVnRiM1psSUdGc2JDQm9ZVzVrYkdWeWMxeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCbGRtVnVkSE5jYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JiYUdGdVpHeGxjbDFjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUI3UlhabGJuUkZiV2wwZEdWeWZTQjBhR2x6WEc0Z0lDQWdJQ292WEc0Z0lDQWdiMlptT2lCbWRXNWpkR2x2YmlobGRtVnVkSE1zSUdoaGJtUnNaWElwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1YyWlc1MGN5QTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMllYSWdhR0Z1Wkd4bGNuTWdQU0IwYUdsekxtaGhibVJzWlhKek8xeHVJQ0FnSUNBZ0lDQmxZV05vS0hOd2JHbDBVM1J5S0dWMlpXNTBjeWtzSUdaMWJtTjBhVzl1S0dWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdoaGJtUnNaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnYUdGdVpHeGxjbk5iWlhabGJuUmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtiR1Z5YzF0bGRtVnVkRjBnSmlZZ2FHRnVaR3hsY25OYlpYWmxiblJkTG5Od2JHbGpaU2hwYmtGeWNtRjVLR2hoYm1Sc1pYSnpXMlYyWlc1MFhTd2dhR0Z1Wkd4bGNpa3NJREVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR1Z0YVhRZ1pYWmxiblFnZEc4Z2RHaGxJR3hwYzNSbGJtVnljMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQmxkbVZ1ZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JrWVhSaFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWlcxcGREb2dablZ1WTNScGIyNG9aWFpsYm5Rc0lHUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdkMlVnWVd4emJ5QjNZVzUwSUhSdklIUnlhV2RuWlhJZ1pHOXRJR1YyWlc1MGMxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtUnZiVVYyWlc1MGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RISnBaMmRsY2tSdmJVVjJaVzUwS0dWMlpXNTBMQ0JrWVhSaEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklHNXZJR2hoYm1Sc1pYSnpMQ0J6YnlCemEybHdJR2wwSUdGc2JGeHVJQ0FnSUNBZ0lDQjJZWElnYUdGdVpHeGxjbk1nUFNCMGFHbHpMbWhoYm1Sc1pYSnpXMlYyWlc1MFhTQW1KaUIwYUdsekxtaGhibVJzWlhKelcyVjJaVzUwWFM1emJHbGpaU2dwTzF4dUlDQWdJQ0FnSUNCcFppQW9JV2hoYm1Sc1pYSnpJSHg4SUNGb1lXNWtiR1Z5Y3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdSaGRHRXVkSGx3WlNBOUlHVjJaVzUwTzF4dUlDQWdJQ0FnSUNCa1lYUmhMbkJ5WlhabGJuUkVaV1poZFd4MElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoTG5OeVkwVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUdrZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9hU0E4SUdoaGJtUnNaWEp6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bGNuTmJhVjBvWkdGMFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcEt5czdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nWkdWemRISnZlU0IwYUdVZ2JXRnVZV2RsY2lCaGJtUWdkVzVpYVc1a2N5QmhiR3dnWlhabGJuUnpYRzRnSUNBZ0lDb2dhWFFnWkc5bGMyNG5kQ0IxYm1KcGJtUWdaRzl0SUdWMlpXNTBjeXdnZEdoaGRDQnBjeUIwYUdVZ2RYTmxjaUJ2ZDI0Z2NtVnpjRzl1YzJsaWFXeHBkSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQmtaWE4wY205NU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MElDWW1JSFJ2WjJkc1pVTnpjMUJ5YjNCektIUm9hWE1zSUdaaGJITmxLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbWhoYm1Sc1pYSnpJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWemMybHZiaUE5SUh0OU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdWNIVjBMbVJsYzNSeWIza29LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MElEMGdiblZzYkR0Y2JpQWdJQ0I5WEc1OU8xeHVYRzR2S2lwY2JpQXFJR0ZrWkM5eVpXMXZkbVVnZEdobElHTnpjeUJ3Y205d1pYSjBhV1Z6SUdGeklHUmxabWx1WldRZ2FXNGdiV0Z1WVdkbGNpNXZjSFJwYjI1ekxtTnpjMUJ5YjNCelhHNGdLaUJBY0dGeVlXMGdlMDFoYm1GblpYSjlJRzFoYm1GblpYSmNiaUFxSUVCd1lYSmhiU0I3UW05dmJHVmhibjBnWVdSa1hHNGdLaTljYm1aMWJtTjBhVzl1SUhSdloyZHNaVU56YzFCeWIzQnpLRzFoYm1GblpYSXNJR0ZrWkNrZ2UxeHVJQ0FnSUhaaGNpQmxiR1Z0Wlc1MElEMGdiV0Z1WVdkbGNpNWxiR1Z0Wlc1ME8xeHVJQ0FnSUdsbUlDZ2haV3hsYldWdWRDNXpkSGxzWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCd2NtOXdPMXh1SUNBZ0lHVmhZMmdvYldGdVlXZGxjaTV2Y0hScGIyNXpMbU56YzFCeWIzQnpMQ0JtZFc1amRHbHZiaWgyWVd4MVpTd2dibUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQndjbTl3SUQwZ2NISmxabWw0WldRb1pXeGxiV1Z1ZEM1emRIbHNaU3dnYm1GdFpTazdYRzRnSUNBZ0lDQWdJR2xtSUNoaFpHUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWhibUZuWlhJdWIyeGtRM056VUhKdmNITmJjSEp2Y0YwZ1BTQmxiR1Z0Wlc1MExuTjBlV3hsVzNCeWIzQmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1emRIbHNaVnR3Y205d1hTQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4bGJXVnVkQzV6ZEhsc1pWdHdjbTl3WFNBOUlHMWhibUZuWlhJdWIyeGtRM056VUhKdmNITmJjSEp2Y0YwZ2ZId2dKeWM3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0JwWmlBb0lXRmtaQ2tnZTF4dUlDQWdJQ0FnSUNCdFlXNWhaMlZ5TG05c1pFTnpjMUJ5YjNCeklEMGdlMzA3WEc0Z0lDQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlIUnlhV2RuWlhJZ1pHOXRJR1YyWlc1MFhHNGdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdaWFpsYm5SY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmtZWFJoWEc0Z0tpOWNibVoxYm1OMGFXOXVJSFJ5YVdkblpYSkViMjFGZG1WdWRDaGxkbVZ1ZEN3Z1pHRjBZU2tnZTF4dUlDQWdJSFpoY2lCblpYTjBkWEpsUlhabGJuUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZkbVZ1ZENnblJYWmxiblFuS1R0Y2JpQWdJQ0JuWlhOMGRYSmxSWFpsYm5RdWFXNXBkRVYyWlc1MEtHVjJaVzUwTENCMGNuVmxMQ0IwY25WbEtUdGNiaUFnSUNCblpYTjBkWEpsUlhabGJuUXVaMlZ6ZEhWeVpTQTlJR1JoZEdFN1hHNGdJQ0FnWkdGMFlTNTBZWEpuWlhRdVpHbHpjR0YwWTJoRmRtVnVkQ2huWlhOMGRYSmxSWFpsYm5RcE8xeHVmVnh1WEc1aGMzTnBaMjRvU0dGdGJXVnlMQ0I3WEc0Z0lDQWdTVTVRVlZSZlUxUkJVbFE2SUVsT1VGVlVYMU5VUVZKVUxGeHVJQ0FnSUVsT1VGVlVYMDFQVmtVNklFbE9VRlZVWDAxUFZrVXNYRzRnSUNBZ1NVNVFWVlJmUlU1RU9pQkpUbEJWVkY5RlRrUXNYRzRnSUNBZ1NVNVFWVlJmUTBGT1EwVk1PaUJKVGxCVlZGOURRVTVEUlV3c1hHNWNiaUFnSUNCVFZFRlVSVjlRVDFOVFNVSk1SVG9nVTFSQlZFVmZVRTlUVTBsQ1RFVXNYRzRnSUNBZ1UxUkJWRVZmUWtWSFFVNDZJRk5VUVZSRlgwSkZSMEZPTEZ4dUlDQWdJRk5VUVZSRlgwTklRVTVIUlVRNklGTlVRVlJGWDBOSVFVNUhSVVFzWEc0Z0lDQWdVMVJCVkVWZlJVNUVSVVE2SUZOVVFWUkZYMFZPUkVWRUxGeHVJQ0FnSUZOVVFWUkZYMUpGUTA5SFRrbGFSVVE2SUZOVVFWUkZYMUpGUTA5SFRrbGFSVVFzWEc0Z0lDQWdVMVJCVkVWZlEwRk9RMFZNVEVWRU9pQlRWRUZVUlY5RFFVNURSVXhNUlVRc1hHNGdJQ0FnVTFSQlZFVmZSa0ZKVEVWRU9pQlRWRUZVUlY5R1FVbE1SVVFzWEc1Y2JpQWdJQ0JFU1ZKRlExUkpUMDVmVGs5T1JUb2dSRWxTUlVOVVNVOU9YMDVQVGtVc1hHNGdJQ0FnUkVsU1JVTlVTVTlPWDB4RlJsUTZJRVJKVWtWRFZFbFBUbDlNUlVaVUxGeHVJQ0FnSUVSSlVrVkRWRWxQVGw5U1NVZElWRG9nUkVsU1JVTlVTVTlPWDFKSlIwaFVMRnh1SUNBZ0lFUkpVa1ZEVkVsUFRsOVZVRG9nUkVsU1JVTlVTVTlPWDFWUUxGeHVJQ0FnSUVSSlVrVkRWRWxQVGw5RVQxZE9PaUJFU1ZKRlExUkpUMDVmUkU5WFRpeGNiaUFnSUNCRVNWSkZRMVJKVDA1ZlNFOVNTVnBQVGxSQlREb2dSRWxTUlVOVVNVOU9YMGhQVWtsYVQwNVVRVXdzWEc0Z0lDQWdSRWxTUlVOVVNVOU9YMVpGVWxSSlEwRk1PaUJFU1ZKRlExUkpUMDVmVmtWU1ZFbERRVXdzWEc0Z0lDQWdSRWxTUlVOVVNVOU9YMEZNVERvZ1JFbFNSVU5VU1U5T1gwRk1UQ3hjYmx4dUlDQWdJRTFoYm1GblpYSTZJRTFoYm1GblpYSXNYRzRnSUNBZ1NXNXdkWFE2SUVsdWNIVjBMRnh1SUNBZ0lGUnZkV05vUVdOMGFXOXVPaUJVYjNWamFFRmpkR2x2Yml4Y2JseHVJQ0FnSUZSdmRXTm9TVzV3ZFhRNklGUnZkV05vU1c1d2RYUXNYRzRnSUNBZ1RXOTFjMlZKYm5CMWREb2dUVzkxYzJWSmJuQjFkQ3hjYmlBZ0lDQlFiMmx1ZEdWeVJYWmxiblJKYm5CMWREb2dVRzlwYm5SbGNrVjJaVzUwU1c1d2RYUXNYRzRnSUNBZ1ZHOTFZMmhOYjNWelpVbHVjSFYwT2lCVWIzVmphRTF2ZFhObFNXNXdkWFFzWEc0Z0lDQWdVMmx1WjJ4bFZHOTFZMmhKYm5CMWREb2dVMmx1WjJ4bFZHOTFZMmhKYm5CMWRDeGNibHh1SUNBZ0lGSmxZMjluYm1sNlpYSTZJRkpsWTI5bmJtbDZaWElzWEc0Z0lDQWdRWFIwY2xKbFkyOW5ibWw2WlhJNklFRjBkSEpTWldOdloyNXBlbVZ5TEZ4dUlDQWdJRlJoY0RvZ1ZHRndVbVZqYjJkdWFYcGxjaXhjYmlBZ0lDQlFZVzQ2SUZCaGJsSmxZMjluYm1sNlpYSXNYRzRnSUNBZ1UzZHBjR1U2SUZOM2FYQmxVbVZqYjJkdWFYcGxjaXhjYmlBZ0lDQlFhVzVqYURvZ1VHbHVZMmhTWldOdloyNXBlbVZ5TEZ4dUlDQWdJRkp2ZEdGMFpUb2dVbTkwWVhSbFVtVmpiMmR1YVhwbGNpeGNiaUFnSUNCUWNtVnpjem9nVUhKbGMzTlNaV052WjI1cGVtVnlMRnh1WEc0Z0lDQWdiMjQ2SUdGa1pFVjJaVzUwVEdsemRHVnVaWEp6TEZ4dUlDQWdJRzltWmpvZ2NtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNuTXNYRzRnSUNBZ1pXRmphRG9nWldGamFDeGNiaUFnSUNCdFpYSm5aVG9nYldWeVoyVXNYRzRnSUNBZ1pYaDBaVzVrT2lCbGVIUmxibVFzWEc0Z0lDQWdZWE56YVdkdU9pQmhjM05wWjI0c1hHNGdJQ0FnYVc1b1pYSnBkRG9nYVc1b1pYSnBkQ3hjYmlBZ0lDQmlhVzVrUm00NklHSnBibVJHYml4Y2JpQWdJQ0J3Y21WbWFYaGxaRG9nY0hKbFptbDRaV1JjYm4wcE8xeHVYRzR2THlCMGFHbHpJSEJ5WlhabGJuUnpJR1Z5Y205eWN5QjNhR1Z1SUVoaGJXMWxjaUJwY3lCc2IyRmtaV1FnYVc0Z2RHaGxJSEJ5WlhObGJtTmxJRzltSUdGdUlFRk5SRnh1THk4Z0lITjBlV3hsSUd4dllXUmxjaUJpZFhRZ1lua2djMk55YVhCMElIUmhaeXdnYm05MElHSjVJSFJvWlNCc2IyRmtaWEl1WEc1MllYSWdabkpsWlVkc2IySmhiQ0E5SUNoMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JSGRwYm1SdmR5QTZJQ2gwZVhCbGIyWWdjMlZzWmlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCelpXeG1JRG9nZTMwcEtUc2dMeThnYW5Ob2FXNTBJR2xuYm05eVpUcHNhVzVsWEc1bWNtVmxSMnh2WW1Gc0xraGhiVzFsY2lBOUlFaGhiVzFsY2p0Y2JseHVhV1lnS0hSNWNHVnZaaUJrWldacGJtVWdQVDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdaR1ZtYVc1bExtRnRaQ2tnZTF4dUlDQWdJR1JsWm1sdVpTaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRWhoYlcxbGNqdGNiaUFnSUNCOUtUdGNibjBnWld4elpTQnBaaUFvZEhsd1pXOW1JRzF2WkhWc1pTQWhQU0FuZFc1a1pXWnBibVZrSnlBbUppQnRiMlIxYkdVdVpYaHdiM0owY3lrZ2UxeHVJQ0FnSUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnU0dGdGJXVnlPMXh1ZlNCbGJITmxJSHRjYmlBZ0lDQjNhVzVrYjNkYlpYaHdiM0owVG1GdFpWMGdQU0JJWVcxdFpYSTdYRzU5WEc1Y2JuMHBLSGRwYm1SdmR5d2daRzlqZFcxbGJuUXNJQ2RJWVcxdFpYSW5LVHRjYmlJc0ltTnNZWE56SUVGd2NHVmhjbnRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jR0Z5WVcxektTQjdYRzRnSUNBZ2QybHVaRzkzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNOamNtOXNiQ2NzSUNncElEMCtJSHRjYmlBZ0lDQWdJR2xtS0hCaGNtRnRjeTRrWTI5dWRHRnBibVZ5TG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BMbmtnUENBM01DQW1KaUJ3WVhKaGJYTXVKR052Ym5SaGFXNWxjaTVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tTNTVJRDRnTFNCd1lYSmhiWE11SkdOdmJuUmhhVzVsY2k1blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUW9LUzVvWldsbmFIUXBlMXh1SUNBZ0lDQWdJQ0J3WVhKaGJYTXVKR0Z1YVcxaGRHVXVabTl5UldGamFDZ2daV3hsYldWdWRDQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVlXUmtLSEJoY21GdGN5NWhibWx0WVhScGIyNHBYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JsYkhObGUxeHVJQ0FnSUNBZ0lDQndZWEpoYlhNdUpHRnVhVzFoZEdVdVptOXlSV0ZqYUNnZ1pXeGxiV1Z1ZENBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnWld4bGJXVnVkQzVqYkdGemMweHBjM1F1Y21WdGIzWmxLSEJoY21GdGN5NWhibWx0WVhScGIyNHBYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2xjYmlBZ2ZWeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVGd2NHVmhjbHh1SWl3aVkyOXVjM1FnU0dGdGJXVnlJRDBnY21WeGRXbHlaU2duYUdGdGJXVnlhbk1uS1Z4dVhHNWpiR0Z6Y3lCRFlYSnZkWE5sYkh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvY0dGeVlXMXpLU0I3WEc0Z0lDQWdkR2hwY3k1cGJtUmxlQ0E5SURCY2JseHVJQ0FnSUhSb2FYTXVKR052Ym5SeWIyeHpJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTG1OdmJHOXljMTlmWTI5dWRISnZiSE1uS1Z4dUlDQWdJSFJvYVhNdUpHbHRZV2RsY3lBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b0p5NWpiMnh2Y25OZlgybHRZV2RsUTI5dWRHRnBibVZ5SnlsY2JpQWdJQ0IwYUdsekxpUnBiV0ZuWlNBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1amIyeHZjbk5mWDJsdFlXZGxjeWNwWEc0Z0lDQWdkR2hwY3k0a1pHbGhiVzl1WkNBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1amIyeHZjbk5mWDJScFlXMXZibVFuS1Z4dUlDQWdJSFJvYVhNdUpHUnBZVzF2Ym1SVVpYaDBJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbU52Ykc5eWMxOWZiblZ0WW1WeUp5bGNiaUFnSUNCMGFHbHpMaVIwWlhoMGN5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTVqYjJ4dmNuTmZYM1JsZUhSRGIyNTBZV2x1WlhJbktWeHVYRzRnSUNBZ2RHaHBjeTV4ZFdGdWRHbDBlU0E5SUhSb2FYTXVKR2x0WVdkbGN5NXNaVzVuZEdoY2JpQWdJQ0IwYUdsekxuTjNhWEJsWkNBOUlHWmhiSE5sWEc1Y2JpQWdJQ0IwYUdsekxtTnZiRzl5Y3lBOUlGdGNiaUFnSUNBZ0lDY2pSa1pHUmtaR0p5eGNiaUFnSUNBZ0lDY2pOVFpHUmtFM0p5eGNiaUFnSUNBZ0lDY2pOVFpHTUVaR0p5eGNiaUFnSUNBZ0lDY2pSa1kzTURJNUp5eGNiaUFnSUNBZ0lDY2pSa1pFTlRBd0oxeHVJQ0FnSUYxY2JseHVJQ0FnSUhSb2FYTXVjM2RwY0dWeklEMGdibVYzSUVoaGJXMWxjaWgwYUdsekxpUnBiV0ZuWlNsY2JseHVJQ0FnSUhSb2FYTXVjM2RwY0dWekxtOXVLQ2R3WVc1c1pXWjBKeXdnWlNBOVBudGNiaUFnSUNBZ0lHbG1LSFJvYVhNdWFXNWtaWGdnS3lBeElEdzlJSFJvYVhNdWNYVmhiblJwZEhrZ0xTQXhJQ1ltSUhSb2FYTXVjM2RwY0dWa0lEMDlJR1poYkhObEtYdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cGJtUmxlQ3NyWEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMmhoYm1kbFUyeHBaR1VvS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwWEc1Y2JpQWdJQ0IwYUdsekxuTjNhWEJsY3k1dmJpZ25jR0Z1Y21sbmFIUW5MQ0JsSUQwK2UxeHVJQ0FnSUNBZ2FXWW9kR2hwY3k1cGJtUmxlQ0F0SURFZ1BqMGdNQ0FnSmlZZ2RHaHBjeTV6ZDJsd1pXUWdQVDBnWm1Gc2MyVXBlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbHVaR1Y0TFMxY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYUdGdVoyVlRiR2xrWlNncFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNsY2JseHVJQ0FnSUhSb2FYTXVZMmhoYm1kbFUyeHBaR1VvS1Z4dVhHNGdJQ0FnZEdocGN5NGtZMjl1ZEhKdmJITXVabTl5UldGamFDZ29aV3hsYldWdWRDd2dhVzVrWlhncElEMCtJSHRjYmlBZ0lDQWdJR1ZzWlcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVc1a1pYZ2dQU0JwYm1SbGVGeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Ob1lXNW5aVk5zYVdSbEtDbGNiaUFnSUNBZ0lIMHBYRzRnSUNBZ2ZTbGNiaUFnZlZ4dUlDQmphR0Z1WjJWVGJHbGtaU2dwZTF4dVhHNGdJQ0FnZEdocGN5NXpkMmx3WldRZ1BTQjBjblZsWEc1Y2JpQWdJQ0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VZMjlzYjNKelgxOWpiMjUwY205c2N5MHRZV04wYVhabEp5a3VZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25ZMjlzYjNKelgxOWpiMjUwY205c2N5MHRZV04wYVhabEp5bGNiaUFnSUNCMGFHbHpMaVJqYjI1MGNtOXNjMXQwYUdsekxtbHVaR1Y0WFM1amJHRnpjMHhwYzNRdVlXUmtLQ2RqYjJ4dmNuTmZYMk52Ym5SeWIyeHpMUzFoWTNScGRtVW5LVnh1WEc0Z0lDQWdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxtTnZiRzl5YzE5ZmFXMWhaMlZEYjI1MFlXbHVaWEl0TFdGamRHbDJaU2NwTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSjJOdmJHOXljMTlmYVcxaFoyVkRiMjUwWVdsdVpYSXRMV0ZqZEdsMlpTY3BYRzRnSUNBZ2RHaHBjeTRrYVcxaFoyVnpXM1JvYVhNdWFXNWtaWGhkTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMk52Ykc5eWMxOWZhVzFoWjJWRGIyNTBZV2x1WlhJdExXRmpkR2wyWlNjcFhHNWNiaUFnSUNCMGFHbHpMaVJrYVdGdGIyNWtWR1Y0ZEM1cGJtNWxja2hVVFV3Z1BTQjBhR2x6TG1sdVpHVjRJQ3NnTVZ4dVhHNGdJQ0FnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbU52Ykc5eWMxOWZkR1Y0ZEVOdmJuUmhhVzVsY2kwdFlXTjBhWFpsSnlrdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnblkyOXNiM0p6WDE5MFpYaDBRMjl1ZEdGcGJtVnlMUzFoWTNScGRtVW5LVnh1SUNBZ0lIUm9hWE11SkhSbGVIUnpXM1JvYVhNdWFXNWtaWGhkTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMk52Ykc5eWMxOWZkR1Y0ZEVOdmJuUmhhVzVsY2kwdFlXTjBhWFpsSnlsY2JseHVJQ0FnSUhSb2FYTXVKR1JwWVcxdmJtUXVjM1I1YkdVdVltOXlaR1Z5UTI5c2IzSWdQU0IwYUdsekxtTnZiRzl5YzF0MGFHbHpMbWx1WkdWNFhWeHVYRzRnSUNBZ2QybHVaRzkzTG5ObGRGUnBiV1Z2ZFhRb0lDZ3BJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjM2RwY0dWa0lEMGdabUZzYzJWY2JpQWdJQ0I5TENBeE5UQXdLVnh1SUNCOVhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUTJGeWIzVnpaV3hjYmlJc0ltTnNZWE56SUZOamNtOXNiRUZ3Y0dWaGNtbHVaM3RjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jR0Z5WVcxektYdGNiaUFnSUNCMGFHbHpMbkJoY21GdGN5QTlJSEJoY21GdGMxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUnpJRDBnYm1WM0lFOWlhbVZqZENncFhHNGdJQ0FnZEdocGN5NXlaV1p5WlhOb1VISnZjR1Z5ZEdsbGN5Z3BYRzRnSUNBZ2RHaHBjeTVwYm1sMEtDbGNiaUFnSUNCM2FXNWtiM2N1YzJWMFNXNTBaWEoyWVd3b0tDa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NXBibWwwS0NsY2JpQWdJQ0I5TENBMU1EQXBYRzRnSUgxY2JpQWdhVzVwZENncGUxeHVJQ0FnSUhSb2FYTXVjbVZtY21WemFGQnliM0JsY25ScFpYTW9LVnh1SUNBZ0lIZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkelkzSnZiR3duTENCMGFHbHpMbU5vWldOcktDa3BYRzRnSUgxY2JpQWdjbVZtY21WemFGQnliM0JsY25ScFpYTW9LWHRjYmlBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwY3k1b2FXUmtaVzRnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0dBdUpIdDBhR2x6TG5CaGNtRnRjeTVvYVdSa1pXNTlZQ2xjYmlBZ0lDQjBhR2x6TG1obGFXZG9kQ0E5SUhkcGJtUnZkeTVwYm01bGNraGxhV2RvZEZ4dUlDQjlYRzRnSUdOb1pXTnJLQ2w3WEc0Z0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEhNdWFHbGtaR1Z1TG1admNrVmhZMmdvSUdWc1pXMWxiblFnUFQ0Z2UxeHVJQ0FnSUNBZ2JHVjBJSFJsYlhCdmN5QTlJR1ZzWlcxbGJuUXVaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0NrdWRHOXdYRzRnSUNBZ0lDQnBaaWgwWlcxd2IzTWdMU0IwYUdsekxtaGxhV2RvZENBOFBTQXdLVnh1SUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbU5zWVhOelRtRnRaU0E5SUdWc1pXMWxiblF1WTJ4aGMzTk9ZVzFsTG5KbGNHeGhZMlVvZEdocGN5NXdZWEpoYlhNdWFHbGtaR1Z1TENCMGFHbHpMbkJoY21GdGN5NWhjSEJsWVhKbFpDbGNiaUFnSUNCOUtWeHVJQ0I5WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVMk55YjJ4c1FYQndaV0Z5YVc1blhHNGlMQ0pqYjI1emRDQlRZM0p2Ykd4QmNIQmxZWEpwYm1jZ1BTQnlaWEYxYVhKbEtDY3VMMk52YlhCdmJtVnVkSE12YzJOeWIyeHNZWEJ3WldGeWFXNW5KeWxjYm1OdmJuTjBJRUZ3Y0dWaGNpQTlJSEpsY1hWcGNtVW9KeTR2WTI5dGNHOXVaVzUwY3k5aGNIQmxZWEluS1Z4dVkyOXVjM1FnUTJGeWIzVnpaV3dnUFNCeVpYRjFhWEpsS0NjdUwyTnZiWEJ2Ym1WdWRITXZZMkZ5YjNWelpXd25LVnh1WEc1amIyNXpkQ0JoYm1sdFlYUnBiMjRnUFNCdVpYY2dVMk55YjJ4c1FYQndaV0Z5YVc1bktIdGNiaUFnYUdsa1pHVnVJRG9nSjJocFpHUmxiaWNzWEc0Z0lHRndjR1ZoY21Wa0lEb2dKMkZ3Y0dWaGNtVmtKMXh1ZlNsY2JseHVZMjl1YzNRZ1lYQndaV0Z5YVc1bklEMGdibVYzSUVGd2NHVmhjaWg3WEc0Z0lDUmpiMjUwWVdsdVpYSWdPaUJrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VZbTk0Snlrc1hHNGdJQ1JoYm1sdFlYUmxJRG9nWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTG1KaFkydG5jbTkxYm1SZlgyTnBjbU5zWlNjcExGeHVJQ0JoYm1sdFlYUnBiMjRnT2lBbmIzQmhZMmwwZVNkY2JuMHBYRzVjYm1OdmJuTjBJSE5zYVdSbGNpQTlJRzVsZHlCRFlYSnZkWE5sYkNoN1hHNGdJQ1JqYjI1MFlXbHVaWEk2SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeTVqYjJ4dmNuTW5LVnh1ZlNsY2JpSmRmUT09XG4iXX0=
