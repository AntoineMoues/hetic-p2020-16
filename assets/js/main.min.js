!function t(e,n,i){function r(s,a){if(!n[s]){if(!e[s]){var c="function"==typeof require&&require;if(!a&&c)return c(s,!0);if(o)return o(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var h=n[s]={exports:{}};e[s][0].call(h.exports,function(t){var n=e[s][1][t];return r(n||t)},h,h.exports,t,e,n,i)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<i.length;s++)r(i[s]);return r}({1:[function(t,e,n){!function(t,n,i,r){"use strict";function o(t,e,n){return setTimeout(h(t,n),e)}function s(t,e,n){return!!Array.isArray(t)&&(a(t,n[e],n),!0)}function a(t,e,n){var i;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==r)for(i=0;i<t.length;)e.call(n,t[i],i,t),i++;else for(i in t)t.hasOwnProperty(i)&&e.call(n,t[i],i,t)}function c(e,n,i){var r="DEPRECATED METHOD: "+n+"\n"+i+" AT \n";return function(){var n=new Error("get-stack-trace"),i=n&&n.stack?n.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=t.console&&(t.console.warn||t.console.log);return o&&o.call(t.console,r,i),e.apply(this,arguments)}}function u(t,e,n){var i,r=e.prototype;i=t.prototype=Object.create(r),i.constructor=t,i._super=r,n&&lt(i,n)}function h(t,e){return function(){return t.apply(e,arguments)}}function l(t,e){return typeof t==dt?t.apply(e?e[0]||r:r,e):t}function p(t,e){return t===r?e:t}function f(t,e,n){a(g(e),function(e){t.addEventListener(e,n,!1)})}function d(t,e,n){a(g(e),function(e){t.removeEventListener(e,n,!1)})}function v(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function m(t,e){return t.indexOf(e)>-1}function g(t){return t.trim().split(/\s+/g)}function y(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}function T(t){return Array.prototype.slice.call(t,0)}function E(t,e,n){for(var i=[],r=[],o=0;o<t.length;){var s=e?t[o][e]:t[o];y(r,s)<0&&i.push(t[o]),r[o]=s,o++}return n&&(i=e?i.sort(function(t,n){return t[e]>n[e]}):i.sort()),i}function _(t,e){for(var n,i,o=e[0].toUpperCase()+e.slice(1),s=0;s<pt.length;){if(n=pt[s],(i=n?n+o:e)in t)return i;s++}return r}function w(){return Et++}function x(e){var n=e.ownerDocument||e;return n.defaultView||n.parentWindow||t}function b(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){l(t.options.enable,[t])&&n.handler(e)},this.init()}function C(t){var e=t.options.inputClass;return new(e||(xt?N:bt?Y:wt?H:L))(t,S)}function S(t,e,n){var i=n.pointers.length,r=n.changedPointers.length,o=e&St&&i-r==0,s=e&(It|Dt)&&i-r==0;n.isFirst=!!o,n.isFinal=!!s,o&&(t.session={}),n.eventType=e,A(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function A(t,e){var n=t.session,i=e.pointers,r=i.length;n.firstInput||(n.firstInput=P(e)),r>1&&!n.firstMultiple?n.firstMultiple=P(e):1===r&&(n.firstMultiple=!1);var o=n.firstInput,s=n.firstMultiple,a=s?s.center:o.center,c=e.center=$(i);e.timeStamp=gt(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=O(a,c),e.distance=F(a,c),I(n,e),e.offsetDirection=q(e.deltaX,e.deltaY);var u=k(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=u.x,e.overallVelocityY=u.y,e.overallVelocity=mt(u.x)>mt(u.y)?u.x:u.y,e.scale=s?M(s.pointers,i):1,e.rotation=s?R(s.pointers,i):0,e.maxPointers=n.prevInput?e.pointers.length>n.prevInput.maxPointers?e.pointers.length:n.prevInput.maxPointers:e.pointers.length,D(n,e);var h=t.element;v(e.srcEvent.target,h)&&(h=e.srcEvent.target),e.target=h}function I(t,e){var n=e.center,i=t.offsetDelta||{},r=t.prevDelta||{},o=t.prevInput||{};e.eventType!==St&&o.eventType!==It||(r=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=r.x+(n.x-i.x),e.deltaY=r.y+(n.y-i.y)}function D(t,e){var n,i,o,s,a=t.lastInterval||e,c=e.timeStamp-a.timeStamp;if(e.eventType!=Dt&&(c>Ct||a.velocity===r)){var u=e.deltaX-a.deltaX,h=e.deltaY-a.deltaY,l=k(c,u,h);i=l.x,o=l.y,n=mt(l.x)>mt(l.y)?l.x:l.y,s=q(u,h),t.lastInterval=e}else n=a.velocity,i=a.velocityX,o=a.velocityY,s=a.direction;e.velocity=n,e.velocityX=i,e.velocityY=o,e.direction=s}function P(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:vt(t.pointers[n].clientX),clientY:vt(t.pointers[n].clientY)},n++;return{timeStamp:gt(),pointers:e,center:$(e),deltaX:t.deltaX,deltaY:t.deltaY}}function $(t){var e=t.length;if(1===e)return{x:vt(t[0].clientX),y:vt(t[0].clientY)};for(var n=0,i=0,r=0;r<e;)n+=t[r].clientX,i+=t[r].clientY,r++;return{x:vt(n/e),y:vt(i/e)}}function k(t,e,n){return{x:e/t||0,y:n/t||0}}function q(t,e){return t===e?Pt:mt(t)>=mt(e)?t<0?$t:kt:e<0?qt:Ft}function F(t,e,n){n||(n=Lt);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return Math.sqrt(i*i+r*r)}function O(t,e,n){n||(n=Lt);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return 180*Math.atan2(r,i)/Math.PI}function R(t,e){return O(e[1],e[0],Nt)+O(t[1],t[0],Nt)}function M(t,e){return F(e[0],e[1],Nt)/F(t[0],t[1],Nt)}function L(){this.evEl=Xt,this.evWin=Yt,this.pressed=!1,b.apply(this,arguments)}function N(){this.evEl=jt,this.evWin=Ut,b.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function z(){this.evTarget=Vt,this.evWin=Gt,this.started=!1,b.apply(this,arguments)}function X(t,e){var n=T(t.touches),i=T(t.changedTouches);return e&(It|Dt)&&(n=E(n.concat(i),"identifier",!0)),[n,i]}function Y(){this.evTarget=Jt,this.targetIds={},b.apply(this,arguments)}function W(t,e){var n=T(t.touches),i=this.targetIds;if(e&(St|At)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,o,s=T(t.changedTouches),a=[],c=this.target;if(o=n.filter(function(t){return v(t.target,c)}),e===St)for(r=0;r<o.length;)i[o[r].identifier]=!0,r++;for(r=0;r<s.length;)i[s[r].identifier]&&a.push(s[r]),e&(It|Dt)&&delete i[s[r].identifier],r++;return a.length?[E(o.concat(a),"identifier",!0),a]:void 0}function H(){b.apply(this,arguments);var t=h(this.handler,this);this.touch=new Y(this.manager,t),this.mouse=new L(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function j(t,e){t&St?(this.primaryTouch=e.changedPointers[0].identifier,U.call(this,e)):t&(It|Dt)&&U.call(this,e)}function U(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var n={x:e.clientX,y:e.clientY};this.lastTouches.push(n);var i=this.lastTouches,r=function(){var t=i.indexOf(n);t>-1&&i.splice(t,1)};setTimeout(r,Kt)}}function B(t){for(var e=t.srcEvent.clientX,n=t.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var r=this.lastTouches[i],o=Math.abs(e-r.x),s=Math.abs(n-r.y);if(o<=Qt&&s<=Qt)return!0}return!1}function V(t,e){this.manager=t,this.set(e)}function G(t){if(m(t,re))return re;var e=m(t,oe),n=m(t,se);return e&&n?re:e||n?e?oe:se:m(t,ie)?ie:ne}function Z(t){this.options=lt({},this.defaults,t||{}),this.id=w(),this.manager=null,this.options.enable=p(this.options.enable,!0),this.state=ce,this.simultaneous={},this.requireFail=[]}function J(t){return t&fe?"cancel":t&le?"end":t&he?"move":t&ue?"start":""}function K(t){return t==Ft?"down":t==qt?"up":t==$t?"left":t==kt?"right":""}function Q(t,e){var n=e.manager;return n?n.get(t):t}function tt(){Z.apply(this,arguments)}function et(){tt.apply(this,arguments),this.pX=null,this.pY=null}function nt(){tt.apply(this,arguments)}function it(){Z.apply(this,arguments),this._timer=null,this._input=null}function rt(){tt.apply(this,arguments)}function ot(){tt.apply(this,arguments)}function st(){Z.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function at(t,e){return e=e||{},e.recognizers=p(e.recognizers,at.defaults.preset),new ct(t,e)}function ct(t,e){this.options=lt({},at.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=C(this),this.touchAction=new V(this,this.options.touchAction),ut(this,!0),a(this.options.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function ut(t,e){var n=t.element;if(n.style){var i;a(t.options.cssProps,function(r,o){i=_(n.style,o),e?(t.oldCssProps[i]=n.style[i],n.style[i]=r):n.style[i]=t.oldCssProps[i]||""}),e||(t.oldCssProps={})}}function ht(t,e){var i=n.createEvent("Event");i.initEvent(t,!0,!0),i.gesture=e,e.target.dispatchEvent(i)}var lt,pt=["","webkit","Moz","MS","ms","o"],ft=n.createElement("div"),dt="function",vt=Math.round,mt=Math.abs,gt=Date.now;lt="function"!=typeof Object.assign?function(t){if(t===r||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(i!==r&&null!==i)for(var o in i)i.hasOwnProperty(o)&&(e[o]=i[o])}return e}:Object.assign;var yt=c(function(t,e,n){for(var i=Object.keys(e),o=0;o<i.length;)(!n||n&&t[i[o]]===r)&&(t[i[o]]=e[i[o]]),o++;return t},"extend","Use `assign`."),Tt=c(function(t,e){return yt(t,e,!0)},"merge","Use `assign`."),Et=1,_t=/mobile|tablet|ip(ad|hone|od)|android/i,wt="ontouchstart"in t,xt=_(t,"PointerEvent")!==r,bt=wt&&_t.test(navigator.userAgent),Ct=25,St=1,At=2,It=4,Dt=8,Pt=1,$t=2,kt=4,qt=8,Ft=16,Ot=$t|kt,Rt=qt|Ft,Mt=Ot|Rt,Lt=["x","y"],Nt=["clientX","clientY"];b.prototype={handler:function(){},init:function(){this.evEl&&f(this.element,this.evEl,this.domHandler),this.evTarget&&f(this.target,this.evTarget,this.domHandler),this.evWin&&f(x(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&d(this.element,this.evEl,this.domHandler),this.evTarget&&d(this.target,this.evTarget,this.domHandler),this.evWin&&d(x(this.element),this.evWin,this.domHandler)}};var zt={mousedown:St,mousemove:At,mouseup:It},Xt="mousedown",Yt="mousemove mouseup";u(L,b,{handler:function(t){var e=zt[t.type];e&St&&0===t.button&&(this.pressed=!0),e&At&&1!==t.which&&(e=It),this.pressed&&(e&It&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:"mouse",srcEvent:t}))}});var Wt={pointerdown:St,pointermove:At,pointerup:It,pointercancel:Dt,pointerout:Dt},Ht={2:"touch",3:"pen",4:"mouse",5:"kinect"},jt="pointerdown",Ut="pointermove pointerup pointercancel";t.MSPointerEvent&&!t.PointerEvent&&(jt="MSPointerDown",Ut="MSPointerMove MSPointerUp MSPointerCancel"),u(N,b,{handler:function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),r=Wt[i],o=Ht[t.pointerType]||t.pointerType,s="touch"==o,a=y(e,t.pointerId,"pointerId");r&St&&(0===t.button||s)?a<0&&(e.push(t),a=e.length-1):r&(It|Dt)&&(n=!0),a<0||(e[a]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),n&&e.splice(a,1))}});var Bt={touchstart:St,touchmove:At,touchend:It,touchcancel:Dt},Vt="touchstart",Gt="touchstart touchmove touchend touchcancel";u(z,b,{handler:function(t){var e=Bt[t.type];if(e===St&&(this.started=!0),this.started){var n=X.call(this,t,e);e&(It|Dt)&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:t})}}});var Zt={touchstart:St,touchmove:At,touchend:It,touchcancel:Dt},Jt="touchstart touchmove touchend touchcancel";u(Y,b,{handler:function(t){var e=Zt[t.type],n=W.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:t})}});var Kt=2500,Qt=25;u(H,b,{handler:function(t,e,n){var i="touch"==n.pointerType,r="mouse"==n.pointerType;if(!(r&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)j.call(this,e,n);else if(r&&B.call(this,n))return;this.callback(t,e,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var te=_(ft.style,"touchAction"),ee=te!==r,ne="auto",ie="manipulation",re="none",oe="pan-x",se="pan-y",ae=function(){if(!ee)return!1;var e={},n=t.CSS&&t.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(i){e[i]=!n||t.CSS.supports("touch-action",i)}),e}();V.prototype={set:function(t){"compute"==t&&(t=this.compute()),ee&&this.manager.element.style&&ae[t]&&(this.manager.element.style[te]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return a(this.manager.recognizers,function(e){l(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),G(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)return void e.preventDefault();var i=this.actions,r=m(i,re)&&!ae[re],o=m(i,se)&&!ae[se],s=m(i,oe)&&!ae[oe];if(r){var a=1===t.pointers.length,c=t.distance<2,u=t.deltaTime<250;if(a&&c&&u)return}return s&&o?void 0:r||o&&n&Ot||s&&n&Rt?this.preventSrc(e):void 0},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var ce=1,ue=2,he=4,le=8,pe=le,fe=16;Z.prototype={defaults:{},set:function(t){return lt(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(s(t,"recognizeWith",this))return this;var e=this.simultaneous;return t=Q(t,this),e[t.id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return s(t,"dropRecognizeWith",this)?this:(t=Q(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(s(t,"requireFailure",this))return this;var e=this.requireFail;return t=Q(t,this),-1===y(e,t)&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(s(t,"dropRequireFailure",this))return this;t=Q(t,this);var e=y(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){function e(e){n.manager.emit(e,t)}var n=this,i=this.state;i<le&&e(n.options.event+J(i)),e(n.options.event),t.additionalEvent&&e(t.additionalEvent),i>=le&&e(n.options.event+J(i))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=32},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(32|ce)))return!1;t++}return!0},recognize:function(t){var e=lt({},t);if(!l(this.options.enable,[this,e]))return this.reset(),void(this.state=32);this.state&(pe|fe|32)&&(this.state=ce),this.state=this.process(e),this.state&(ue|he|le|fe)&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},u(tt,Z,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,i=e&(ue|he),r=this.attrTest(t);return i&&(n&Dt||!r)?e|fe:i||r?n&It?e|le:e&ue?e|he:ue:32}}),u(et,tt,{defaults:{event:"pan",threshold:10,pointers:1,direction:Mt},getTouchAction:function(){var t=this.options.direction,e=[];return t&Ot&&e.push(se),t&Rt&&e.push(oe),e},directionTest:function(t){var e=this.options,n=!0,i=t.distance,r=t.direction,o=t.deltaX,s=t.deltaY;return r&e.direction||(e.direction&Ot?(r=0===o?Pt:o<0?$t:kt,n=o!=this.pX,i=Math.abs(t.deltaX)):(r=0===s?Pt:s<0?qt:Ft,n=s!=this.pY,i=Math.abs(t.deltaY))),t.direction=r,n&&i>e.threshold&&r&e.direction},attrTest:function(t){return tt.prototype.attrTest.call(this,t)&&(this.state&ue||!(this.state&ue)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=K(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),u(nt,tt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[re]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&ue)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),u(it,Z,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[ne]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime>e.time;if(this._input=t,!i||!n||t.eventType&(It|Dt)&&!r)this.reset();else if(t.eventType&St)this.reset(),this._timer=o(function(){this.state=pe,this.tryEmit()},e.time,this);else if(t.eventType&It)return pe;return 32},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===pe&&(t&&t.eventType&It?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=gt(),this.manager.emit(this.options.event,this._input)))}}),u(rt,tt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[re]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&ue)}}),u(ot,tt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Ot|Rt,pointers:1},getTouchAction:function(){return et.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&(Ot|Rt)?e=t.overallVelocity:n&Ot?e=t.overallVelocityX:n&Rt&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&n&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&mt(e)>this.options.velocity&&t.eventType&It},emit:function(t){var e=K(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),u(st,Z,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[ie]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime<e.time;if(this.reset(),t.eventType&St&&0===this.count)return this.failTimeout();if(i&&r&&n){if(t.eventType!=It)return this.failTimeout();var s=!this.pTime||t.timeStamp-this.pTime<e.interval,a=!this.pCenter||F(this.pCenter,t.center)<e.posThreshold;this.pTime=t.timeStamp,this.pCenter=t.center,a&&s?this.count+=1:this.count=1,this._input=t;if(0===this.count%e.taps)return this.hasRequireFailures()?(this._timer=o(function(){this.state=pe,this.tryEmit()},e.interval,this),ue):pe}return 32},failTimeout:function(){return this._timer=o(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==pe&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),at.VERSION="2.0.7",at.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[rt,{enable:!1}],[nt,{enable:!1},["rotate"]],[ot,{direction:Ot}],[et,{direction:Ot},["swipe"]],[st],[st,{event:"doubletap",taps:2},["tap"]],[it]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};ct.prototype={set:function(t){return lt(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){this.touchAction.preventDefaults(t);var n,i=this.recognizers,r=e.curRecognizer;(!r||r&&r.state&pe)&&(r=e.curRecognizer=null);for(var o=0;o<i.length;)n=i[o],2===e.stopped||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(t),!r&&n.state&(ue|he|le)&&(r=e.curRecognizer=n),o++}},get:function(t){if(t instanceof Z)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(s(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(s(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,n=y(e,t);-1!==n&&(e.splice(n,1),this.touchAction.update())}return this},on:function(t,e){if(t!==r&&e!==r){var n=this.handlers;return a(g(t),function(t){n[t]=n[t]||[],n[t].push(e)}),this}},off:function(t,e){if(t!==r){var n=this.handlers;return a(g(t),function(t){e?n[t]&&n[t].splice(y(n[t],e),1):delete n[t]}),this}},emit:function(t,e){this.options.domEvents&&ht(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},destroy:function(){this.element&&ut(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},lt(at,{INPUT_START:St,INPUT_MOVE:At,INPUT_END:It,INPUT_CANCEL:Dt,STATE_POSSIBLE:ce,STATE_BEGAN:ue,STATE_CHANGED:he,STATE_ENDED:le,STATE_RECOGNIZED:pe,STATE_CANCELLED:fe,STATE_FAILED:32,DIRECTION_NONE:Pt,DIRECTION_LEFT:$t,DIRECTION_RIGHT:kt,DIRECTION_UP:qt,DIRECTION_DOWN:Ft,DIRECTION_HORIZONTAL:Ot,DIRECTION_VERTICAL:Rt,DIRECTION_ALL:Mt,Manager:ct,Input:b,TouchAction:V,TouchInput:Y,MouseInput:L,PointerEventInput:N,TouchMouseInput:H,SingleTouchInput:z,Recognizer:Z,AttrRecognizer:tt,Tap:st,Pan:et,Swipe:ot,Pinch:nt,Rotate:rt,Press:it,on:f,off:d,each:a,merge:Tt,extend:yt,assign:lt,inherit:u,bindFn:h,prefixed:_}),(void 0!==t?t:"undefined"!=typeof self?self:{}).Hammer=at,"function"==typeof define&&define.amd?define(function(){return at}):void 0!==e&&e.exports?e.exports=at:t.Hammer=at}(window,document)},{}],2:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=function t(e){i(this,t),window.addEventListener("scroll",function(){e.$container.getBoundingClientRect().y<70&&e.$container.getBoundingClientRect().y>-e.$container.getBoundingClientRect().height?e.$animate.forEach(function(t){t.classList.add(e.animation)}):e.$animate.forEach(function(t){t.classList.remove(e.animation)})})};e.exports=r},{}],3:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=t("hammerjs"),s=function(){function t(e){var n=this;i(this,t),this.index=0,this.$container=e.$container,this.$controls=document.querySelectorAll(".colors__controls"),this.$images=document.querySelectorAll(".colors__imageContainer"),this.$image=document.querySelector(".colors__images"),this.$diamond=document.querySelector(".colors__diamond"),this.$diamondText=document.querySelector(".colors__number"),this.$texts=document.querySelectorAll(".colors__textContainer"),this.$text=document.querySelectorAll(".colors__text"),this.$backgroundDivs=document.querySelectorAll(".background div:not(.background__circle)"),this.$circles=document.querySelectorAll(".background__circle"),this.quantity=this.$images.length,this.swiped=!1,this.colors=["#FFFFFF","#56FFA7","#56F0FF","#FF7029","#FFD500"],this.backgroundColors=["#595959","#244028","#243540","#402B24","#403B24"],this.swipes=new o(this.$image),this.swipes.on("panleft",function(t){n.index+1<=n.quantity-1&&0==n.swiped&&(n.index++,n.changeSlide())}),this.swipes.on("panright",function(t){n.index-1>=0&&0==n.swiped&&(n.index--,n.changeSlide())}),this.changeSlide(),this.$controls.forEach(function(t,e){t.addEventListener("click",function(){n.index=e,n.changeSlide()})}),window.addEventListener("scroll",function(){n.check()})}return r(t,[{key:"changeSlide",value:function(){var t=this;this.swiped=!0,document.querySelector(".colors__controls--active").classList.remove("colors__controls--active"),this.$controls[this.index].classList.add("colors__controls--active"),document.querySelector(".colors__imageContainer--active").classList.remove("colors__imageContainer--active"),this.$images[this.index].classList.add("colors__imageContainer--active"),this.$diamondText.innerHTML=this.index+1,document.querySelector(".colors__textContainer--active").classList.remove("colors__textContainer--active"),this.$texts[this.index].classList.add("colors__textContainer--active"),this.$text.forEach(function(e){e.style.color=t.colors[t.index]}),this.check(),this.$diamond.style.borderColor=this.colors[this.index],window.setTimeout(function(){t.swiped=!1},1500)}},{key:"check",value:function(){var t=this;this.$container.getBoundingClientRect().y<70&&this.$container.getBoundingClientRect().y>300-this.$container.getBoundingClientRect().height?(this.$backgroundDivs.forEach(function(e){e.style.backgroundColor=t.backgroundColors[t.index]}),this.$circles.forEach(function(e){e.style.borderColor=t.backgroundColors[t.index]})):(this.$backgroundDivs.forEach(function(t){t.style.backgroundColor="#403524"}),this.$circles.forEach(function(t){t.style.borderColor="#403524"}))}}]),t}();e.exports=s},{hammerjs:1}],4:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=function t(e){var n=this;i(this,t),this.$element=e.$element,window.addEventListener("deviceorientation",function(t){n.$element.style.transform="rotate3d("+t.gamma+", "+t.beta+", "+t.alpha+", 30deg)"},!1)};e.exports=r},{}],5:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=function(){function t(e){var n=this;i(this,t),this.params=e,this.$elements=new Object,this.refreshProperties(),this.init(),window.setInterval(function(){n.init()},500)}return r(t,[{key:"init",value:function(){this.refreshProperties(),window.addEventListener("scroll",this.check())}},{key:"refreshProperties",value:function(){this.$elements.hidden=document.querySelectorAll("."+this.params.hidden),this.height=window.innerHeight}},{key:"check",value:function(){var t=this;this.$elements.hidden.forEach(function(e){e.getBoundingClientRect().top-t.height<=0&&(e.className=e.className.replace(t.params.hidden,t.params.appeared))})}}]),t}();e.exports=o},{}],6:[function(t,e,n){"use strict";var i=t("./components/scrollappearing"),r=t("./components/appear"),o=t("./components/carousel"),s=t("./components/orientation");new i({hidden:"hidden",appeared:"appeared"}),new r({$container:document.querySelector(".box"),$animate:document.querySelectorAll(".background__circle"),animation:"opacity"}),new o({$container:document.querySelector(".colors")});if(window.DeviceOrientationEvent){new s({$element:document.querySelector(".push__image")})}},{"./components/appear":2,"./components/carousel":3,"./components/orientation":4,"./components/scrollappearing":5}]},{},[6]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
