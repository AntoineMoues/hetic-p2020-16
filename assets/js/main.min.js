!function e(n,t,r){function i(a,c){if(!t[a]){if(!n[a]){var s="function"==typeof require&&require;if(!c&&s)return s(a,!0);if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var l=t[a]={exports:{}};n[a][0].call(l.exports,function(e){var t=n[a][1][e];return i(t||e)},l,l.exports,e,n,t,r)}return t[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,n,t){"use strict";function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var i=function e(n){r(this,e),window.addEventListener("scroll",function(){n.$container.getBoundingClientRect().y<70&&n.$container.getBoundingClientRect().y>-n.$container.getBoundingClientRect().height?n.$animate.forEach(function(e){e.classList.add(n.animation)}):n.$animate.forEach(function(e){e.classList.remove(n.animation)})})};n.exports=i},{}],2:[function(e,n,t){"use strict";function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),o=function(){function e(n){var t=this;r(this,e),this.params=n,this.$elements=new Object,this.refreshProperties(),this.init(),window.setInterval(function(){t.init()},500)}return i(e,[{key:"init",value:function(){this.refreshProperties(),window.addEventListener("scroll",this.check())}},{key:"refreshProperties",value:function(){this.$elements.hidden=document.querySelectorAll("."+this.params.hidden),this.height=window.innerHeight}},{key:"check",value:function(){var e=this;this.$elements.hidden.forEach(function(n){n.getBoundingClientRect().top-e.height<=0&&(n.className=n.className.replace(e.params.hidden,e.params.appeared))})}}]),e}();n.exports=o},{}],3:[function(e,n,t){"use strict";var r=e("./components/scrollappearing"),i=e("./components/appear");new r({hidden:"hidden",appeared:"appeared"}),new i({$container:document.querySelector(".box"),$animate:document.querySelectorAll(".background__circle"),animation:"opacity"})},{"./components/appear":1,"./components/scrollappearing":2}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
