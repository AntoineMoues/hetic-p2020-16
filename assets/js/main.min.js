!function t(e,n,i){function s(o,a){if(!n[o]){if(!e[o]){var c="function"==typeof require&&require;if(!a&&c)return c(o,!0);if(r)return r(o,!0);var h=new Error("Cannot find module '"+o+"'");throw h.code="MODULE_NOT_FOUND",h}var u=n[o]={exports:{}};e[o][0].call(u.exports,function(t){var n=e[o][1][t];return s(n||t)},u,u.exports,t,e,n,i)}return n[o].exports}for(var r="function"==typeof require&&require,o=0;o<i.length;o++)s(i[o]);return s}({1:[function(t,e,n){!function(t,n,i,s){"use strict";function r(t,e,n){return setTimeout(u(t,n),e)}function o(t,e,n){return!!Array.isArray(t)&&(a(t,n[e],n),!0)}function a(t,e,n){var i;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==s)for(i=0;i<t.length;)e.call(n,t[i],i,t),i++;else for(i in t)t.hasOwnProperty(i)&&e.call(n,t[i],i,t)}function c(e,n,i){var s="DEPRECATED METHOD: "+n+"\n"+i+" AT \n";return function(){var n=new Error("get-stack-trace"),i=n&&n.stack?n.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",r=t.console&&(t.console.warn||t.console.log);return r&&r.call(t.console,s,i),e.apply(this,arguments)}}function h(t,e,n){var i,s=e.prototype;i=t.prototype=Object.create(s),i.constructor=t,i._super=s,n&&lt(i,n)}function u(t,e){return function(){return t.apply(e,arguments)}}function l(t,e){return typeof t==dt?t.apply(e?e[0]||s:s,e):t}function p(t,e){return t===s?e:t}function f(t,e,n){a(g(e),function(e){t.addEventListener(e,n,!1)})}function d(t,e,n){a(g(e),function(e){t.removeEventListener(e,n,!1)})}function v(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function m(t,e){return t.indexOf(e)>-1}function g(t){return t.trim().split(/\s+/g)}function y(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}function T(t){return Array.prototype.slice.call(t,0)}function E(t,e,n){for(var i=[],s=[],r=0;r<t.length;){var o=e?t[r][e]:t[r];y(s,o)<0&&i.push(t[r]),s[r]=o,r++}return n&&(i=e?i.sort(function(t,n){return t[e]>n[e]}):i.sort()),i}function b(t,e){for(var n,i,r=e[0].toUpperCase()+e.slice(1),o=0;o<pt.length;){if(n=pt[o],(i=n?n+r:e)in t)return i;o++}return s}function x(){return Et++}function w(e){var n=e.ownerDocument||e;return n.defaultView||n.parentWindow||t}function _(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){l(t.options.enable,[t])&&n.handler(e)},this.init()}function $(t){var e=t.options.inputClass;return new(e||(wt?L:_t?j:xt?W:Y))(t,I)}function I(t,e,n){var i=n.pointers.length,s=n.changedPointers.length,r=e&It&&i-s==0,o=e&(St|Ct)&&i-s==0;n.isFirst=!!r,n.isFinal=!!o,r&&(t.session={}),n.eventType=e,A(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function A(t,e){var n=t.session,i=e.pointers,s=i.length;n.firstInput||(n.firstInput=D(e)),s>1&&!n.firstMultiple?n.firstMultiple=D(e):1===s&&(n.firstMultiple=!1);var r=n.firstInput,o=n.firstMultiple,a=o?o.center:r.center,c=e.center=O(i);e.timeStamp=gt(),e.deltaTime=e.timeStamp-r.timeStamp,e.angle=q(a,c),e.distance=R(a,c),S(n,e),e.offsetDirection=M(e.deltaX,e.deltaY);var h=P(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=h.x,e.overallVelocityY=h.y,e.overallVelocity=mt(h.x)>mt(h.y)?h.x:h.y,e.scale=o?z(o.pointers,i):1,e.rotation=o?N(o.pointers,i):0,e.maxPointers=n.prevInput?e.pointers.length>n.prevInput.maxPointers?e.pointers.length:n.prevInput.maxPointers:e.pointers.length,C(n,e);var u=t.element;v(e.srcEvent.target,u)&&(u=e.srcEvent.target),e.target=u}function S(t,e){var n=e.center,i=t.offsetDelta||{},s=t.prevDelta||{},r=t.prevInput||{};e.eventType!==It&&r.eventType!==St||(s=t.prevDelta={x:r.deltaX||0,y:r.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=s.x+(n.x-i.x),e.deltaY=s.y+(n.y-i.y)}function C(t,e){var n,i,r,o,a=t.lastInterval||e,c=e.timeStamp-a.timeStamp;if(e.eventType!=Ct&&(c>$t||a.velocity===s)){var h=e.deltaX-a.deltaX,u=e.deltaY-a.deltaY,l=P(c,h,u);i=l.x,r=l.y,n=mt(l.x)>mt(l.y)?l.x:l.y,o=M(h,u),t.lastInterval=e}else n=a.velocity,i=a.velocityX,r=a.velocityY,o=a.direction;e.velocity=n,e.velocityX=i,e.velocityY=r,e.direction=o}function D(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:vt(t.pointers[n].clientX),clientY:vt(t.pointers[n].clientY)},n++;return{timeStamp:gt(),pointers:e,center:O(e),deltaX:t.deltaX,deltaY:t.deltaY}}function O(t){var e=t.length;if(1===e)return{x:vt(t[0].clientX),y:vt(t[0].clientY)};for(var n=0,i=0,s=0;s<e;)n+=t[s].clientX,i+=t[s].clientY,s++;return{x:vt(n/e),y:vt(i/e)}}function P(t,e,n){return{x:e/t||0,y:n/t||0}}function M(t,e){return t===e?Dt:mt(t)>=mt(e)?t<0?Ot:Pt:e<0?Mt:Rt}function R(t,e,n){n||(n=Yt);var i=e[n[0]]-t[n[0]],s=e[n[1]]-t[n[1]];return Math.sqrt(i*i+s*s)}function q(t,e,n){n||(n=Yt);var i=e[n[0]]-t[n[0]],s=e[n[1]]-t[n[1]];return 180*Math.atan2(s,i)/Math.PI}function N(t,e){return q(e[1],e[0],Lt)+q(t[1],t[0],Lt)}function z(t,e){return R(e[0],e[1],Lt)/R(t[0],t[1],Lt)}function Y(){this.evEl=Xt,this.evWin=jt,this.pressed=!1,_.apply(this,arguments)}function L(){this.evEl=Ht,this.evWin=Ut,_.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function k(){this.evTarget=Bt,this.evWin=Gt,this.started=!1,_.apply(this,arguments)}function X(t,e){var n=T(t.touches),i=T(t.changedTouches);return e&(St|Ct)&&(n=E(n.concat(i),"identifier",!0)),[n,i]}function j(){this.evTarget=Jt,this.targetIds={},_.apply(this,arguments)}function F(t,e){var n=T(t.touches),i=this.targetIds;if(e&(It|At)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var s,r,o=T(t.changedTouches),a=[],c=this.target;if(r=n.filter(function(t){return v(t.target,c)}),e===It)for(s=0;s<r.length;)i[r[s].identifier]=!0,s++;for(s=0;s<o.length;)i[o[s].identifier]&&a.push(o[s]),e&(St|Ct)&&delete i[o[s].identifier],s++;return a.length?[E(r.concat(a),"identifier",!0),a]:void 0}function W(){_.apply(this,arguments);var t=u(this.handler,this);this.touch=new j(this.manager,t),this.mouse=new Y(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function H(t,e){t&It?(this.primaryTouch=e.changedPointers[0].identifier,U.call(this,e)):t&(St|Ct)&&U.call(this,e)}function U(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var n={x:e.clientX,y:e.clientY};this.lastTouches.push(n);var i=this.lastTouches,s=function(){var t=i.indexOf(n);t>-1&&i.splice(t,1)};setTimeout(s,Kt)}}function V(t){for(var e=t.srcEvent.clientX,n=t.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var s=this.lastTouches[i],r=Math.abs(e-s.x),o=Math.abs(n-s.y);if(r<=Qt&&o<=Qt)return!0}return!1}function B(t,e){this.manager=t,this.set(e)}function G(t){if(m(t,se))return se;var e=m(t,re),n=m(t,oe);return e&&n?se:e||n?e?re:oe:m(t,ie)?ie:ne}function Z(t){this.options=lt({},this.defaults,t||{}),this.id=x(),this.manager=null,this.options.enable=p(this.options.enable,!0),this.state=ce,this.simultaneous={},this.requireFail=[]}function J(t){return t&fe?"cancel":t&le?"end":t&ue?"move":t&he?"start":""}function K(t){return t==Rt?"down":t==Mt?"up":t==Ot?"left":t==Pt?"right":""}function Q(t,e){var n=e.manager;return n?n.get(t):t}function tt(){Z.apply(this,arguments)}function et(){tt.apply(this,arguments),this.pX=null,this.pY=null}function nt(){tt.apply(this,arguments)}function it(){Z.apply(this,arguments),this._timer=null,this._input=null}function st(){tt.apply(this,arguments)}function rt(){tt.apply(this,arguments)}function ot(){Z.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function at(t,e){return e=e||{},e.recognizers=p(e.recognizers,at.defaults.preset),new ct(t,e)}function ct(t,e){this.options=lt({},at.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=$(this),this.touchAction=new B(this,this.options.touchAction),ht(this,!0),a(this.options.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function ht(t,e){var n=t.element;if(n.style){var i;a(t.options.cssProps,function(s,r){i=b(n.style,r),e?(t.oldCssProps[i]=n.style[i],n.style[i]=s):n.style[i]=t.oldCssProps[i]||""}),e||(t.oldCssProps={})}}function ut(t,e){var i=n.createEvent("Event");i.initEvent(t,!0,!0),i.gesture=e,e.target.dispatchEvent(i)}var lt,pt=["","webkit","Moz","MS","ms","o"],ft=n.createElement("div"),dt="function",vt=Math.round,mt=Math.abs,gt=Date.now;lt="function"!=typeof Object.assign?function(t){if(t===s||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(i!==s&&null!==i)for(var r in i)i.hasOwnProperty(r)&&(e[r]=i[r])}return e}:Object.assign;var yt=c(function(t,e,n){for(var i=Object.keys(e),r=0;r<i.length;)(!n||n&&t[i[r]]===s)&&(t[i[r]]=e[i[r]]),r++;return t},"extend","Use `assign`."),Tt=c(function(t,e){return yt(t,e,!0)},"merge","Use `assign`."),Et=1,bt=/mobile|tablet|ip(ad|hone|od)|android/i,xt="ontouchstart"in t,wt=b(t,"PointerEvent")!==s,_t=xt&&bt.test(navigator.userAgent),$t=25,It=1,At=2,St=4,Ct=8,Dt=1,Ot=2,Pt=4,Mt=8,Rt=16,qt=Ot|Pt,Nt=Mt|Rt,zt=qt|Nt,Yt=["x","y"],Lt=["clientX","clientY"];_.prototype={handler:function(){},init:function(){this.evEl&&f(this.element,this.evEl,this.domHandler),this.evTarget&&f(this.target,this.evTarget,this.domHandler),this.evWin&&f(w(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&d(this.element,this.evEl,this.domHandler),this.evTarget&&d(this.target,this.evTarget,this.domHandler),this.evWin&&d(w(this.element),this.evWin,this.domHandler)}};var kt={mousedown:It,mousemove:At,mouseup:St},Xt="mousedown",jt="mousemove mouseup";h(Y,_,{handler:function(t){var e=kt[t.type];e&It&&0===t.button&&(this.pressed=!0),e&At&&1!==t.which&&(e=St),this.pressed&&(e&St&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:"mouse",srcEvent:t}))}});var Ft={pointerdown:It,pointermove:At,pointerup:St,pointercancel:Ct,pointerout:Ct},Wt={2:"touch",3:"pen",4:"mouse",5:"kinect"},Ht="pointerdown",Ut="pointermove pointerup pointercancel";t.MSPointerEvent&&!t.PointerEvent&&(Ht="MSPointerDown",Ut="MSPointerMove MSPointerUp MSPointerCancel"),h(L,_,{handler:function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),s=Ft[i],r=Wt[t.pointerType]||t.pointerType,o="touch"==r,a=y(e,t.pointerId,"pointerId");s&It&&(0===t.button||o)?a<0&&(e.push(t),a=e.length-1):s&(St|Ct)&&(n=!0),a<0||(e[a]=t,this.callback(this.manager,s,{pointers:e,changedPointers:[t],pointerType:r,srcEvent:t}),n&&e.splice(a,1))}});var Vt={touchstart:It,touchmove:At,touchend:St,touchcancel:Ct},Bt="touchstart",Gt="touchstart touchmove touchend touchcancel";h(k,_,{handler:function(t){var e=Vt[t.type];if(e===It&&(this.started=!0),this.started){var n=X.call(this,t,e);e&(St|Ct)&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:t})}}});var Zt={touchstart:It,touchmove:At,touchend:St,touchcancel:Ct},Jt="touchstart touchmove touchend touchcancel";h(j,_,{handler:function(t){var e=Zt[t.type],n=F.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:t})}});var Kt=2500,Qt=25;h(W,_,{handler:function(t,e,n){var i="touch"==n.pointerType,s="mouse"==n.pointerType;if(!(s&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)H.call(this,e,n);else if(s&&V.call(this,n))return;this.callback(t,e,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var te=b(ft.style,"touchAction"),ee=te!==s,ne="auto",ie="manipulation",se="none",re="pan-x",oe="pan-y",ae=function(){if(!ee)return!1;var e={},n=t.CSS&&t.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(i){e[i]=!n||t.CSS.supports("touch-action",i)}),e}();B.prototype={set:function(t){"compute"==t&&(t=this.compute()),ee&&this.manager.element.style&&ae[t]&&(this.manager.element.style[te]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return a(this.manager.recognizers,function(e){l(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),G(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)return void e.preventDefault();var i=this.actions,s=m(i,se)&&!ae[se],r=m(i,oe)&&!ae[oe],o=m(i,re)&&!ae[re];if(s){var a=1===t.pointers.length,c=t.distance<2,h=t.deltaTime<250;if(a&&c&&h)return}return o&&r?void 0:s||r&&n&qt||o&&n&Nt?this.preventSrc(e):void 0},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var ce=1,he=2,ue=4,le=8,pe=le,fe=16;Z.prototype={defaults:{},set:function(t){return lt(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(o(t,"recognizeWith",this))return this;var e=this.simultaneous;return t=Q(t,this),e[t.id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return o(t,"dropRecognizeWith",this)?this:(t=Q(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(o(t,"requireFailure",this))return this;var e=this.requireFail;return t=Q(t,this),-1===y(e,t)&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(o(t,"dropRequireFailure",this))return this;t=Q(t,this);var e=y(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){function e(e){n.manager.emit(e,t)}var n=this,i=this.state;i<le&&e(n.options.event+J(i)),e(n.options.event),t.additionalEvent&&e(t.additionalEvent),i>=le&&e(n.options.event+J(i))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=32},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(32|ce)))return!1;t++}return!0},recognize:function(t){var e=lt({},t);if(!l(this.options.enable,[this,e]))return this.reset(),void(this.state=32);this.state&(pe|fe|32)&&(this.state=ce),this.state=this.process(e),this.state&(he|ue|le|fe)&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},h(tt,Z,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,i=e&(he|ue),s=this.attrTest(t);return i&&(n&Ct||!s)?e|fe:i||s?n&St?e|le:e&he?e|ue:he:32}}),h(et,tt,{defaults:{event:"pan",threshold:10,pointers:1,direction:zt},getTouchAction:function(){var t=this.options.direction,e=[];return t&qt&&e.push(oe),t&Nt&&e.push(re),e},directionTest:function(t){var e=this.options,n=!0,i=t.distance,s=t.direction,r=t.deltaX,o=t.deltaY;return s&e.direction||(e.direction&qt?(s=0===r?Dt:r<0?Ot:Pt,n=r!=this.pX,i=Math.abs(t.deltaX)):(s=0===o?Dt:o<0?Mt:Rt,n=o!=this.pY,i=Math.abs(t.deltaY))),t.direction=s,n&&i>e.threshold&&s&e.direction},attrTest:function(t){return tt.prototype.attrTest.call(this,t)&&(this.state&he||!(this.state&he)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=K(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),h(nt,tt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[se]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&he)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),h(it,Z,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[ne]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,s=t.deltaTime>e.time;if(this._input=t,!i||!n||t.eventType&(St|Ct)&&!s)this.reset();else if(t.eventType&It)this.reset(),this._timer=r(function(){this.state=pe,this.tryEmit()},e.time,this);else if(t.eventType&St)return pe;return 32},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===pe&&(t&&t.eventType&St?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=gt(),this.manager.emit(this.options.event,this._input)))}}),h(st,tt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[se]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&he)}}),h(rt,tt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:qt|Nt,pointers:1},getTouchAction:function(){return et.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&(qt|Nt)?e=t.overallVelocity:n&qt?e=t.overallVelocityX:n&Nt&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&n&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&mt(e)>this.options.velocity&&t.eventType&St},emit:function(t){var e=K(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),h(ot,Z,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[ie]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,s=t.deltaTime<e.time;if(this.reset(),t.eventType&It&&0===this.count)return this.failTimeout();if(i&&s&&n){if(t.eventType!=St)return this.failTimeout();var o=!this.pTime||t.timeStamp-this.pTime<e.interval,a=!this.pCenter||R(this.pCenter,t.center)<e.posThreshold;this.pTime=t.timeStamp,this.pCenter=t.center,a&&o?this.count+=1:this.count=1,this._input=t;if(0===this.count%e.taps)return this.hasRequireFailures()?(this._timer=r(function(){this.state=pe,this.tryEmit()},e.interval,this),he):pe}return 32},failTimeout:function(){return this._timer=r(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==pe&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),at.VERSION="2.0.7",at.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[st,{enable:!1}],[nt,{enable:!1},["rotate"]],[rt,{direction:qt}],[et,{direction:qt},["swipe"]],[ot],[ot,{event:"doubletap",taps:2},["tap"]],[it]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};ct.prototype={set:function(t){return lt(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){this.touchAction.preventDefaults(t);var n,i=this.recognizers,s=e.curRecognizer;(!s||s&&s.state&pe)&&(s=e.curRecognizer=null);for(var r=0;r<i.length;)n=i[r],2===e.stopped||s&&n!=s&&!n.canRecognizeWith(s)?n.reset():n.recognize(t),!s&&n.state&(he|ue|le)&&(s=e.curRecognizer=n),r++}},get:function(t){if(t instanceof Z)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(o(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(o(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,n=y(e,t);-1!==n&&(e.splice(n,1),this.touchAction.update())}return this},on:function(t,e){if(t!==s&&e!==s){var n=this.handlers;return a(g(t),function(t){n[t]=n[t]||[],n[t].push(e)}),this}},off:function(t,e){if(t!==s){var n=this.handlers;return a(g(t),function(t){e?n[t]&&n[t].splice(y(n[t],e),1):delete n[t]}),this}},emit:function(t,e){this.options.domEvents&&ut(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},destroy:function(){this.element&&ht(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},lt(at,{INPUT_START:It,INPUT_MOVE:At,INPUT_END:St,INPUT_CANCEL:Ct,STATE_POSSIBLE:ce,STATE_BEGAN:he,STATE_CHANGED:ue,STATE_ENDED:le,STATE_RECOGNIZED:pe,STATE_CANCELLED:fe,STATE_FAILED:32,DIRECTION_NONE:Dt,DIRECTION_LEFT:Ot,DIRECTION_RIGHT:Pt,DIRECTION_UP:Mt,DIRECTION_DOWN:Rt,DIRECTION_HORIZONTAL:qt,DIRECTION_VERTICAL:Nt,DIRECTION_ALL:zt,Manager:ct,Input:_,TouchAction:B,TouchInput:j,MouseInput:Y,PointerEventInput:L,TouchMouseInput:W,SingleTouchInput:k,Recognizer:Z,AttrRecognizer:tt,Tap:ot,Pan:et,Swipe:rt,Pinch:nt,Rotate:st,Press:it,on:f,off:d,each:a,merge:Tt,extend:yt,assign:lt,inherit:h,bindFn:u,prefixed:b}),(void 0!==t?t:"undefined"!=typeof self?self:{}).Hammer=at,"function"==typeof define&&define.amd?define(function(){return at}):void 0!==e&&e.exports?e.exports=at:t.Hammer=at}(window,document)},{}],2:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=t("hammerjs"),o=function(){function t(e){var n=this;i(this,t),this.$elements=new Object,this.$elements.$container=e.$el,this.$elements.$scrollListener=this.$elements.$container.querySelector(".home-slider__scroll"),this.$elements.$box=this.$elements.$container.querySelector(".home-slider__content"),this.$elements.$close=this.$elements.$container.querySelector(".home-slider__content .box__title span"),this.classes=new Object,this.classes.boxActive="home-slider__content-active",this.opened=!1,this.swipes=new r(this.$elements.$scrollListener),this.swipes.get("pan").set({direction:r.DIRECTION_ALL}),this.swipes.on("panup",function(t){n.openBox()}),this.$elements.$close.addEventListener("click",function(){n.closeBox()})}return s(t,[{key:"openBox",value:function(){var t=this;0==this.opened&&(this.opened=!0,this.boxIndex=-50,this.$elements.$box.classList.add(this.classes.boxActive),this.boxMove(),this.boxSwipes=new r(this.$elements.$box),this.boxSwipes.get("pan").set({direction:r.DIRECTION_ALL}),this.boxSwipes.on("panup pandown",function(e){"panup"==e.type?t.boxUp():"pandown"==e.type&&t.boxDown()}))}},{key:"closeBox",value:function(){this.opened&&(this.opened=!1,this.$elements.$box.classList.remove(this.classes.boxActive),this.$elements.$box.style.transform="translateY(0)")}},{key:"boxUp",value:function(){this.boxIndex--,this.boxIndex<-100&&(this.boxIndex=-100),this.boxMove()}},{key:"boxDown",value:function(){this.boxIndex++,this.boxMove()}},{key:"boxMove",value:function(){this.$elements.$box.style.transform="translateY("+this.boxIndex+"%)"}}]),t}();e.exports=o},{hammerjs:1}],3:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=t("hammerjs"),o=function(){function t(e){var n=this;i(this,t),this.$elements=new Object,this.$elements.$container=e.$el,this.$elements.$slideContainer=this.$elements.$container.querySelector(".home-slider__slides"),this.$elements.$controls=this.$elements.$container.querySelectorAll(".home-slider__control"),this.$elements.$slides=this.$elements.$container.querySelectorAll(".home-slider__slide"),this.classes=new Object,this.classes.controlActive="home-slider__control-active",this.classes.slideActive="home-slider__slide-active",this.index=0,this.quantities=this.$elements.$controls.length-1,this.swiped=!1;var s=new r(this.$elements.$slideContainer);s.on("panleft",function(t){n.index-1>=0&&0==n.swiped&&n.goToSlide(n.index--)}),s.on("panright",function(t){n.index+1<=n.quantities&&0==n.swiped&&n.goToSlide(n.index++)})}return s(t,[{key:"goToSlide",value:function(t){0==this.swiped&&(this.resetSwiped(),this.change(this.$elements.$controls,this.classes.controlActive),this.change(this.$elements.$slides,this.classes.slideActive))}},{key:"change",value:function(t,e){t.forEach(function(t){t.classList.remove(e)}),t[this.index].classList.add(e)}},{key:"resetSwiped",value:function(){var t=this;this.swiped=!0,setTimeout(function(){t.swiped=!1},1e3)}}]),t}();e.exports=o},{hammerjs:1}],4:[function(t,e,n){"use strict";var i=t("./components/slider"),s=t("./components/box"),r=new Object;r.$el=document.querySelector(".home-slider"),r.object=new i({$el:r.$el});var o=new Object;o.$el=document.querySelector(".home-slider"),r.object=new s({$el:o.$el})},{"./components/box":2,"./components/slider":3}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
