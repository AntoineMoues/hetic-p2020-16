!function e(t,n,o){function r(c,a){if(!n[c]){if(!t[c]){var s="function"==typeof require&&require;if(!a&&s)return s(c,!0);if(i)return i(c,!0);var l=new Error("Cannot find module '"+c+"'");throw l.code="MODULE_NOT_FOUND",l}var u=n[c]={exports:{}};t[c][0].call(u.exports,function(e){var n=t[c][1][e];return r(n||e)},u,u.exports,e,t,n,o)}return n[c].exports}for(var i="function"==typeof require&&require,c=0;c<o.length;c++)r(o[c]);return r}({1:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function e(t){o(this,e),window.addEventListener("scroll",function(){t.$container.getBoundingClientRect().y<70&&t.$container.getBoundingClientRect().y>-t.$container.getBoundingClientRect().height?t.$animate.forEach(function(e){e.classList.add(t.animation)}):t.$animate.forEach(function(e){e.classList.remove(t.animation)})})};t.exports=r},{}],2:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(t){o(this,e),this.index=0,this.$controls=document.querySelectorAll(".colors__control"),this.$images=document.querySelectorAll(".colors__imageContainer"),this.$diamond=document.querySelector(".colors__diamond"),this.$diamondText=document.querySelector(".colors__diamond p"),this.$texts=document.querySelectorAll(".colors__textContainer"),this.colors=["#FFFFFF","#56FFA7","#56F0FF","#FF7029","FFD500"],this.changeSlide()}return r(e,[{key:"changeSlide",value:function(){document.querySelector(".colors__control--active").classList.remove("colors__control--active"),this.$controls[this.index].classList.add("colors__control--active"),document.querySelector(".colors__imageContainer--active").classList.remove("colors__imageContainer--active"),this.$images[this.index].classList.add("colors__imageContainer--active"),this.$diamondText=this.index+1,document.querySelector(".colors__textContainer--active").classList.remove("colors__textContainer--active"),this.$texts[this.index].classList.add("colors__textContainer--active"),this.$diamond.style.borderColor=this.colors[this.index]}}]),e}();t.exports=i},{}],3:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(t){var n=this;o(this,e),this.params=t,this.$elements=new Object,this.refreshProperties(),this.init(),window.setInterval(function(){n.init()},500)}return r(e,[{key:"init",value:function(){this.refreshProperties(),window.addEventListener("scroll",this.check())}},{key:"refreshProperties",value:function(){this.$elements.hidden=document.querySelectorAll("."+this.params.hidden),this.height=window.innerHeight}},{key:"check",value:function(){var e=this;this.$elements.hidden.forEach(function(t){t.getBoundingClientRect().top-e.height<=0&&(t.className=t.className.replace(e.params.hidden,e.params.appeared))})}}]),e}();t.exports=i},{}],4:[function(e,t,n){"use strict";var o=e("./components/scrollappearing"),r=e("./components/appear"),i=e("./components/carousel");new o({hidden:"hidden",appeared:"appeared"}),new r({$container:document.querySelector(".box"),$animate:document.querySelectorAll(".background__circle"),animation:"opacity"}),new i({$container:document.querySelector(".colors")})},{"./components/appear":1,"./components/carousel":2,"./components/scrollappearing":3}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
